{"version":3,"sources":["webpack:///./src/app/shared/components/dialog-table/dialog-table.component.html","webpack:///./src/app/shared/components/dialog-table/dialog-table.component.ts","webpack:///./src/app/shared/components/dialog-table/dialog-table.module.ts","webpack:///./src/app/shared/enums/table-column-filter-mode.enum.ts","webpack:///./src/app/shared/enums/table-selection-mode.enum.ts"],"names":[],"mappings":"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","file":"default~administration-administration-module~administration-attributes-attributes-module~administrat~974549ff.js","sourcesContent":["module.exports = \"<a-modal class=\\\"aw-modal\\\" [(visible)]=\\\"display\\\">\\r\\n  <a-header>\\r\\n    <div class=\\\"modal-title\\\">\\r\\n      {{ tableData.componentId + \\\".title\\\" | translate }} ({{ formattedTableRows ? formattedTableRows.length : 0 }})\\r\\n    </div>\\r\\n  </a-header>\\r\\n\\r\\n  <a-content>\\r\\n    <p-table\\r\\n      [resizableColumns]=\\\"true\\\"\\r\\n      #ptable\\r\\n      class=\\\"aw-table2\\\"\\r\\n      [columns]=\\\"tableData.tableCols\\\"\\r\\n      [value]=\\\"formattedTableRows\\\"\\r\\n      [selectionMode]=\\\"tableData.selectionMode\\\"\\r\\n      [(selection)]=\\\"selection\\\"\\r\\n      [dataKey]=\\\"!!tableData.dataKey ? '_id' : undefined\\\"\\r\\n      [scrollable]=\\\"true\\\"\\r\\n    >\\r\\n      <ng-template pTemplate=\\\"emptymessage\\\">\\r\\n        <span *ngIf=\\\"!isLoading\\\"> &nbsp;</span>\\r\\n\\r\\n        <div *ngIf=\\\"isLoading\\\" class=\\\"aw-table-loading-indicator\\\">\\r\\n          <div class=\\\"loading-message\\\">{{ \\\"table.loadingData\\\" | translate }}</div>\\r\\n          <div class=\\\"lds-hourglass\\\"></div>\\r\\n        </div>\\r\\n      </ng-template>\\r\\n\\r\\n      <ng-template pTemplate=\\\"caption\\\">\\r\\n        <div class=\\\"aw-table-header\\\">\\r\\n          <div class=\\\"aw-table-global-filter\\\">\\r\\n            <label class=\\\"aw-table-global-filter-label\\\"> <i class=\\\"fa fa-fw fa-search\\\" aria-hidden=\\\"true\\\"></i> </label>\\r\\n\\r\\n            <input\\r\\n              #ptableGlobalFilter\\r\\n              class=\\\"aw-table-global-filter-input\\\"\\r\\n              type=\\\"text\\\"\\r\\n              placeholder=\\\"{{ 'table.globalFilterText' | translate }}\\\"\\r\\n              (input)=\\\"ptable.filterGlobal($event.target.value, 'contains')\\\"\\r\\n            />\\r\\n          </div>\\r\\n        </div>\\r\\n      </ng-template>\\r\\n\\r\\n      <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\r\\n        <colgroup>\\r\\n          <col *ngIf=\\\"tableData.selectionMode === tableSelectionMode.Multiple\\\" class=\\\"aw-table-checkbox-wrapper\\\" />\\r\\n          <col *ngFor=\\\"let col of columns\\\" [ngStyle]=\\\"{ width: col.width }\\\" />\\r\\n        </colgroup>\\r\\n      </ng-template>\\r\\n\\r\\n      <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n        <tr>\\r\\n          <th *ngIf=\\\"tableData.selectionMode === tableSelectionMode.Multiple\\\" class=\\\"aw-table-checkbox-wrapper\\\">\\r\\n            <p-tableHeaderCheckbox class=\\\"aw-table-checkbox\\\"></p-tableHeaderCheckbox>\\r\\n          </th>\\r\\n\\r\\n          <th pResizableColumn *ngFor=\\\"let col of columns\\\" [ngStyle]=\\\"{ 'text-align': col.alignment }\\\">\\r\\n            {{ tableData.componentId + \\\".\\\" + col.field | translate }}\\r\\n          </th>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n\\r\\n      <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-rowIndex=\\\"rowIndex\\\">\\r\\n        <tr [pSelectableRow]=\\\"rowData\\\" [pSelectableRowIndex]=\\\"rowIndex\\\">\\r\\n          <td *ngIf=\\\"tableData.selectionMode === tableSelectionMode.Multiple\\\" class=\\\"aw-table-checkbox-wrapper\\\">\\r\\n            <p-tableCheckbox class=\\\"aw-table-checkbox\\\" [value]=\\\"rowData\\\"></p-tableCheckbox>\\r\\n          </td>\\r\\n\\r\\n          <td *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.filterMode\\\" [ngStyle]=\\\"{ 'text-align': col.alignment }\\\">\\r\\n            <span *ngSwitchCase=\\\"tableColumnFilterMode.Tricheckbox\\\">\\r\\n              <i\\r\\n                *ngIf=\\\"rowData[col.field] !== null && rowData[col.field]\\\"\\r\\n                class=\\\"fa fa-fw fa-check\\\"\\r\\n                aria-hidden=\\\"true\\\"\\r\\n              ></i>\\r\\n            </span>\\r\\n\\r\\n            <span *ngSwitchDefault> {{ rowData[col.field] }} </span>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n    </p-table>\\r\\n  </a-content>\\r\\n\\r\\n  <a-footer>\\r\\n    <button type=\\\"button\\\" mat-raised-button (click)=\\\"closeDialog()\\\">\\r\\n      <span>{{ \\\"global.cancel\\\" | translate }}</span>\\r\\n    </button>\\r\\n\\r\\n    <button type=\\\"button\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"validate()\\\" [disabled]=\\\"!selection\\\">\\r\\n      <span>{{ \\\"global.validate\\\" | translate }}</span>\\r\\n    </button>\\r\\n  </a-footer>\\r\\n</a-modal>\\r\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Observable, forkJoin } from 'rxjs';\r\n\r\nimport { DialogComponent } from '../../../shared/types/dialog-component';\r\nimport { TableColumn } from '../../../shared/types/table-column.interface';\r\nimport { ComponentOpenMode } from '../../enums/component-open-mode.enum';\r\nimport { TableColumnFilterMode } from '../../enums/table-column-filter-mode.enum';\r\nimport { TableSelectionMode } from '../../enums/table-selection-mode.enum';\r\nimport { DateService } from '../../services/date.service';\r\nimport { LoaderService } from '../../services/loader.service';\r\nimport { MessageService } from '../../services/message.service';\r\nimport { LabelValue } from '../../types/label-value.interface';\r\nimport { ListUtils } from '../../utils/list-utils';\r\n\r\nimport { DialogTableData } from './types/dialog-table-data.interface';\r\n\r\n@Component({\r\n  selector: 'aw-dialog-table',\r\n  templateUrl: './dialog-table.component.html'\r\n})\r\nexport class DialogTableComponent<T> extends DialogComponent implements OnInit {\r\n  @Input('data') public tableData: DialogTableData<T>;\r\n  @Input('keyMap') public keyObservableMap: Map<string, Observable<LabelValue<string>[]>>;\r\n  @Output() public onSelected: EventEmitter<T | T[]>;\r\n\r\n  public readonly tableColumnFilterMode: typeof TableColumnFilterMode;\r\n  public readonly tableSelectionMode: typeof TableSelectionMode;\r\n\r\n  public colWidthUnit: string | undefined;\r\n  public formattedTableRows: object[];\r\n  public moreResults: boolean;\r\n  public selection: object | object[] | undefined;\r\n  public showColumnFilters: boolean;\r\n  public tableWidth: string | undefined;\r\n\r\n  private readonly objectMap: Map<object, T>;\r\n\r\n  public constructor(\r\n    public translateService: TranslateService,\r\n    private readonly dateService: DateService,\r\n    private readonly loaderService: LoaderService,\r\n    private readonly messageService: MessageService\r\n  ) {\r\n    super(ComponentOpenMode.Write, 'DialogTableComponent');\r\n\r\n    this.displayChange = new EventEmitter<boolean>();\r\n\r\n    this.onSelected = new EventEmitter<T | T[]>();\r\n\r\n    this.tableColumnFilterMode = TableColumnFilterMode;\r\n    this.tableSelectionMode = TableSelectionMode;\r\n\r\n    this.colWidthUnit = undefined;\r\n    this.formattedTableRows = [];\r\n    this.moreResults = false;\r\n    this.objectMap = new Map<object, T>();\r\n    this.showColumnFilters = false;\r\n    this.tableWidth = undefined;\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.loaderService.hideLoadingBar();\r\n\r\n    if (!!this.tableData) {\r\n      this.init();\r\n      this.computeTableWidth();\r\n\r\n      this.selection = this.tableData.selectionMode === TableSelectionMode.Multiple ? [] : undefined;\r\n      this.showColumnFilters = !this.tableData.tableCols.some((col: TableColumn) => {\r\n        return !!col.filterMode && col.filterMode === TableColumnFilterMode.None;\r\n      });\r\n    }\r\n  }\r\n\r\n  public validate(): void {\r\n    if (\r\n      (this.selection instanceof Array && ListUtils.isEmpty(this.selection)) ||\r\n      (!(this.selection instanceof Array) && !this.selection)\r\n    ) {\r\n      this.messageService.showWarningMessage('global.warningOnNoSelection');\r\n    } else {\r\n      if (this.selection instanceof Array) {\r\n        this.onSelected.emit(this.selection.map((row) => this.objectMap.get(row)).filter((obj) => !!obj) as T[]);\r\n      } else {\r\n        this.onSelected.emit(this.objectMap.get(this.selection) as T);\r\n      }\r\n\r\n      this.closeDialog();\r\n    }\r\n  }\r\n\r\n  private computeTableWidth(): void {\r\n    const tableWidthData = this.tableData.tableCols.map((col) =>\r\n      !!col.width ? /^(\\d+(?:\\.\\d+)?)[ ]*([a-zA-Z]+)$/g.exec(col.width) : undefined\r\n    );\r\n    if (tableWidthData.every((regExpMatches) => !!regExpMatches)) {\r\n      const widthIndex = 1;\r\n      const unitIndex = 2;\r\n\r\n      const colUnitList = tableWidthData\r\n        .map((regExpMatches: RegExpExecArray) => regExpMatches[unitIndex])\r\n        .map((unit) => unit.trim())\r\n        .map((unit) => unit.toLowerCase());\r\n\r\n      if (colUnitList.filter((v, i, a) => a.indexOf(v) === i).length === 1) {\r\n        this.colWidthUnit = colUnitList[0];\r\n\r\n        let tableWidth = tableWidthData\r\n          .map((regExpMatches: RegExpExecArray) => regExpMatches[widthIndex])\r\n          .map(Number)\r\n          .reduce((acc, val) => acc + val, 0);\r\n        if (this.colWidthUnit === 'rem') {\r\n          const tableScrollbarWidthInRem = 2;\r\n          tableWidth += tableScrollbarWidthInRem;\r\n        } else if (this.colWidthUnit === 'px') {\r\n          const tableScrollbarWidthInPx = 20;\r\n          tableWidth += tableScrollbarWidthInPx;\r\n        }\r\n        this.tableWidth = tableWidth.toString();\r\n      }\r\n    }\r\n  }\r\n\r\n  private init(): void {\r\n    if (!!this.keyObservableMap) {\r\n      const columnsWithKey: string[] = Array.from(this.keyObservableMap.keys());\r\n      const keyValueMap: { [key: string]: string } = {};\r\n\r\n      forkJoin(Array.from(this.keyObservableMap.values())).subscribe((keyValueResults) => {\r\n        keyValueResults.forEach((keyValueResult) => {\r\n          keyValueResult.forEach((keyValue) => {\r\n            keyValueMap[keyValue.value] = keyValue.label;\r\n          });\r\n        });\r\n\r\n        this.loadAndFormatTableRows(columnsWithKey, keyValueMap);\r\n      });\r\n    } else {\r\n      this.loadAndFormatTableRows([], {});\r\n    }\r\n  }\r\n\r\n  private loadAndFormatTableRows(columnsWithKey: string[], keyValueMap: { [key: string]: string }): void {\r\n    this.tableData.tableRows.subscribe((result) => {\r\n      if (!!result) {\r\n        this.moreResults = result.moreResults;\r\n\r\n        this.formattedTableRows = result.list\r\n          .map((obj) => {\r\n            const formattedObj = {};\r\n            this.tableData.tableCols.forEach((tableCol) => {\r\n              if (Object.getOwnPropertyNames(obj).some((property) => property === tableCol.field)) {\r\n                if (tableCol.isDate !== undefined && tableCol.isDate !== null && tableCol.isDate) {\r\n                  if (obj[tableCol.field] instanceof Date) {\r\n                    formattedObj[tableCol.field] = this.dateService.dateToString(obj[tableCol.field]);\r\n                  } else if (typeof obj[tableCol.field] === 'number') {\r\n                    formattedObj[tableCol.field] = this.dateService.timestampToString(obj[tableCol.field]);\r\n                  }\r\n                } else {\r\n                  formattedObj[tableCol.field] =\r\n                    columnsWithKey.includes(tableCol.field) &&\r\n                    Object.getOwnPropertyNames(keyValueMap).some((property) => property === obj[tableCol.field])\r\n                      ? keyValueMap[obj[tableCol.field]]\r\n                      : !!obj[tableCol.field]\r\n                      ? obj[tableCol.field].toString()\r\n                      : '';\r\n                }\r\n              }\r\n            });\r\n\r\n            if (\r\n              !!this.tableData.dataKey &&\r\n              Object.getOwnPropertyNames(obj).some((property) => property === this.tableData.dataKey)\r\n            ) {\r\n              const idPropertyName = '_id';\r\n              formattedObj[idPropertyName] = obj[this.tableData.dataKey];\r\n            }\r\n\r\n            this.objectMap.set(formattedObj, obj);\r\n\r\n            return formattedObj;\r\n          })\r\n          .filter((obj) => !ListUtils.isEmpty(Object.getOwnPropertyNames(obj)));\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TableModule } from 'primeng/table';\r\n\r\nimport { AngularCommonSharedModule } from '../../angular-common-shared.module';\r\nimport { AngularGenericTemplatesSharedModule } from '../../angular-generic-templates-shared-module';\r\nimport { AppCommonSharedModule } from '../../app-common-shared.module';\r\nimport { ModalModule } from '../modal/modal.module';\r\n\r\nimport { DialogTableComponent } from './dialog-table.component';\r\n\r\n/******************************************************************************\r\n * Modules\r\n *************************************************************************** */\r\n\r\nconst EXTERNAL_MODULES = [TableModule];\r\n\r\nconst INTERNAL_MODULES = [ModalModule];\r\n\r\n/******************************************************************************\r\n * Components\r\n *************************************************************************** */\r\n\r\nconst COMPONENTS = [DialogTableComponent];\r\n\r\n@NgModule({\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n  imports: [\r\n    AngularCommonSharedModule,\r\n    AngularGenericTemplatesSharedModule,\r\n    AppCommonSharedModule,\r\n    ...EXTERNAL_MODULES,\r\n    ...INTERNAL_MODULES\r\n  ]\r\n})\r\nexport class DialogTableModule {}\r\n","export enum TableColumnFilterMode {\r\n  None = 'none',\r\n  Tricheckbox = 'tricheckbox',\r\n  Input = 'input'\r\n}\r\n","export enum TableSelectionMode {\r\n  Multiple = 'multiple',\r\n  Single = 'single'\r\n}\r\n"],"sourceRoot":""}