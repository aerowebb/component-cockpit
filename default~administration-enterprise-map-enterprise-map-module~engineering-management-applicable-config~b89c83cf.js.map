{"version":3,"sources":["webpack:///./node_modules/primeng/components/tree/tree.js"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,aAAa,mBAAO,CAAC,iEAAe;AACpC,eAAe,mBAAO,CAAC,uEAAiB;AACxC,eAAe,mBAAO,CAAC,4EAAkB;AACzC,eAAe,mBAAO,CAAC,4EAAkB;AACzC,4BAA4B,mBAAO,CAAC,sGAA+B;AACnE,oBAAoB,mBAAO,CAAC,oFAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wCAAwC;AAC7E;AACA;AACA;AACA,uCAAuC,wCAAwC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrgEAAgE,u1BAAu1B,2JAA2J,oRAAoR,8DAA8D,+OAA+O,+CAA+C,sHAAsH,wDAAwD,sPAAsP,kCAAkC,kFAAkF,YAAY,qLAAqL,WAAW,gBAAgB,uLAAuL,0LAA0L,qBAAqB,mBAAmB,iBAAiB,wUAAwU,gEAAgE,kmBAAkmB,yCAAyC,wJAAwJ,wCAAwC,mOAAmO,uCAAuC,iJAAiJ,8EAA8E,4PAA4P,kDAAkD,+YAA+Y,YAAY,yMAAyM,WAAW,gBAAgB,ifAAif,qBAAqB,mBAAmB;AAC7lM,SAAS;AACT,gEAAgE,aAAa,EAAE;AAC/E;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,qBAAqB,EAAE;AACzG;AACA;AACA;AACA;AACA,8CAA8C,mCAAmC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mCAAmC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,qBAAqB,EAAE;AAC7G;AACA;AACA,kDAAkD,mCAAmC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mCAAmC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mCAAmC;AACzF;AACA;AACA;AACA,oDAAoD,mCAAmC;AACvF;AACA;AACA;AACA;AACA,sFAAsF,qBAAqB,EAAE;AAC7G,sDAAsD,mCAAmC;AACzF;AACA;AACA;AACA,oDAAoD,mCAAmC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mCAAmC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,qBAAqB,EAAE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,mBAAmB,EAAE;AAC3F;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yBAAyB;AACtF;AACA,iEAAiE,yBAAyB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA,0CAA0C;AAC1C,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,0BAA0B;AACrF;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,4BAA4B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iFAAiF;AACrmDAAmD,wJAAwJ,ioCAAioC,sBAAsB,mBAAmB,iBAAiB,mPAAmP,cAAc,kDAAkD,+GAA+G,+iBAA+iB,cAAc;AACr2E,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,gC","file":"default~administration-enterprise-map-enterprise-map-module~engineering-management-applicable-config~b89c83cf.js","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar core_2 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar shared_2 = require(\"../common/shared\");\nvar treedragdropservice_1 = require(\"../common/treedragdropservice\");\nvar objectutils_1 = require(\"../utils/objectutils\");\nvar UITreeNode = /** @class */ (function () {\n    function UITreeNode(tree) {\n        this.tree = tree;\n    }\n    UITreeNode_1 = UITreeNode;\n    UITreeNode.prototype.ngOnInit = function () {\n        this.node.parent = this.parentNode;\n        if (this.parentNode) {\n            this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\n        }\n    };\n    UITreeNode.prototype.getIcon = function () {\n        var icon;\n        if (this.node.icon)\n            icon = this.node.icon;\n        else\n            icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;\n        return UITreeNode_1.ICON_CLASS + ' ' + icon;\n    };\n    UITreeNode.prototype.isLeaf = function () {\n        return this.tree.isNodeLeaf(this.node);\n    };\n    UITreeNode.prototype.toggle = function (event) {\n        if (this.node.expanded)\n            this.collapse(event);\n        else\n            this.expand(event);\n    };\n    UITreeNode.prototype.expand = function (event) {\n        this.node.expanded = true;\n        this.tree.onNodeExpand.emit({ originalEvent: event, node: this.node });\n    };\n    UITreeNode.prototype.collapse = function (event) {\n        this.node.expanded = false;\n        this.tree.onNodeCollapse.emit({ originalEvent: event, node: this.node });\n    };\n    UITreeNode.prototype.onNodeClick = function (event) {\n        this.tree.onNodeClick(event, this.node);\n    };\n    UITreeNode.prototype.onNodeTouchEnd = function () {\n        this.tree.onNodeTouchEnd();\n    };\n    UITreeNode.prototype.onNodeRightClick = function (event) {\n        this.tree.onNodeRightClick(event, this.node);\n    };\n    UITreeNode.prototype.isSelected = function () {\n        return this.tree.isSelected(this.node);\n    };\n    UITreeNode.prototype.onDropPoint = function (event, position) {\n        var _this = this;\n        event.preventDefault();\n        var dragNode = this.tree.dragNode;\n        var dragNodeIndex = this.tree.dragNodeIndex;\n        var dragNodeScope = this.tree.dragNodeScope;\n        var isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? (position === 1 || dragNodeIndex !== this.index - 1) : true;\n        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n            if (this.tree.validateDrop) {\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    dropIndex: this.index,\n                    accept: function () {\n                        _this.processPointDrop(dragNode, dragNodeIndex, position);\n                    }\n                });\n            }\n            else {\n                this.processPointDrop(dragNode, dragNodeIndex, position);\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    dropIndex: this.index\n                });\n            }\n        }\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    };\n    UITreeNode.prototype.processPointDrop = function (dragNode, dragNodeIndex, position) {\n        var newNodeList = this.node.parent ? this.node.parent.children : this.tree.value;\n        this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        var dropIndex = this.index;\n        if (position < 0) {\n            dropIndex = (this.tree.dragNodeSubNodes === newNodeList) ? ((this.tree.dragNodeIndex > this.index) ? this.index : this.index - 1) : this.index;\n            newNodeList.splice(dropIndex, 0, dragNode);\n        }\n        else {\n            dropIndex = newNodeList.length;\n            newNodeList.push(dragNode);\n        }\n        this.tree.dragDropService.stopDrag({\n            node: dragNode,\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n            index: dragNodeIndex\n        });\n    };\n    UITreeNode.prototype.onDropPointDragOver = function (event) {\n        event.dataTransfer.dropEffect = 'move';\n        event.preventDefault();\n    };\n    UITreeNode.prototype.onDropPointDragEnter = function (event, position) {\n        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            if (position < 0)\n                this.draghoverPrev = true;\n            else\n                this.draghoverNext = true;\n        }\n    };\n    UITreeNode.prototype.onDropPointDragLeave = function (event) {\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    };\n    UITreeNode.prototype.onDragStart = function (event) {\n        if (this.tree.draggableNodes && this.node.draggable !== false) {\n            event.dataTransfer.setData(\"text\", \"data\");\n            this.tree.dragDropService.startDrag({\n                tree: this,\n                node: this.node,\n                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n                index: this.index,\n                scope: this.tree.draggableScope\n            });\n        }\n        else {\n            event.preventDefault();\n        }\n    };\n    UITreeNode.prototype.onDragStop = function (event) {\n        this.tree.dragDropService.stopDrag({\n            node: this.node,\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n            index: this.index\n        });\n    };\n    UITreeNode.prototype.onDropNodeDragOver = function (event) {\n        event.dataTransfer.dropEffect = 'move';\n        if (this.tree.droppableNodes) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n    UITreeNode.prototype.onDropNode = function (event) {\n        var _this = this;\n        if (this.tree.droppableNodes && this.node.droppable !== false) {\n            event.preventDefault();\n            event.stopPropagation();\n            var dragNode_1 = this.tree.dragNode;\n            if (this.tree.allowDrop(dragNode_1, this.node, this.tree.dragNodeScope)) {\n                if (this.tree.validateDrop) {\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode_1,\n                        dropNode: this.node,\n                        index: this.index,\n                        accept: function () {\n                            _this.processNodeDrop(dragNode_1);\n                        }\n                    });\n                }\n                else {\n                    this.processNodeDrop(dragNode_1);\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode_1,\n                        dropNode: this.node,\n                        index: this.index\n                    });\n                }\n            }\n        }\n        this.draghoverNode = false;\n    };\n    UITreeNode.prototype.processNodeDrop = function (dragNode) {\n        var dragNodeIndex = this.tree.dragNodeIndex;\n        this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        if (this.node.children)\n            this.node.children.push(dragNode);\n        else\n            this.node.children = [dragNode];\n        this.tree.dragDropService.stopDrag({\n            node: dragNode,\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n            index: this.tree.dragNodeIndex\n        });\n    };\n    UITreeNode.prototype.onDropNodeDragEnter = function (event) {\n        if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            this.draghoverNode = true;\n        }\n    };\n    UITreeNode.prototype.onDropNodeDragLeave = function (event) {\n        if (this.tree.droppableNodes) {\n            var rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n                this.draghoverNode = false;\n            }\n        }\n    };\n    UITreeNode.prototype.onKeyDown = function (event) {\n        var nodeElement = event.target.parentElement.parentElement;\n        switch (event.which) {\n            //down arrow\n            case 40:\n                var listElement = (this.tree.droppableNodes) ? nodeElement.children[1].children[1] : nodeElement.children[0].children[1];\n                if (listElement) {\n                    this.focusNode(listElement.children[0]);\n                }\n                else {\n                    var nextNodeElement = nodeElement.nextElementSibling;\n                    if (nextNodeElement) {\n                        this.focusNode(nextNodeElement);\n                    }\n                    else {\n                        var nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n                        if (nextSiblingAncestor) {\n                            this.focusNode(nextSiblingAncestor);\n                        }\n                    }\n                }\n                event.preventDefault();\n                break;\n            //up arrow\n            case 38:\n                if (nodeElement.previousElementSibling) {\n                    this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n                }\n                else {\n                    var parentNodeElement = this.getParentNodeElement(nodeElement);\n                    if (parentNodeElement) {\n                        this.focusNode(parentNodeElement);\n                    }\n                }\n                event.preventDefault();\n                break;\n            //right arrow\n            case 39:\n                if (!this.node.expanded) {\n                    this.expand(event);\n                }\n                event.preventDefault();\n                break;\n            //left arrow\n            case 37:\n                if (this.node.expanded) {\n                    this.collapse(event);\n                }\n                else {\n                    var parentNodeElement = this.getParentNodeElement(nodeElement);\n                    if (parentNodeElement) {\n                        this.focusNode(parentNodeElement);\n                    }\n                }\n                event.preventDefault();\n                break;\n            //enter\n            case 13:\n                this.tree.onNodeClick(event, this.node);\n                event.preventDefault();\n                break;\n            default:\n                //no op\n                break;\n        }\n    };\n    UITreeNode.prototype.findNextSiblingOfAncestor = function (nodeElement) {\n        var parentNodeElement = this.getParentNodeElement(nodeElement);\n        if (parentNodeElement) {\n            if (parentNodeElement.nextElementSibling)\n                return parentNodeElement.nextElementSibling;\n            else\n                return this.findNextSiblingOfAncestor(parentNodeElement);\n        }\n        else {\n            return null;\n        }\n    };\n    UITreeNode.prototype.findLastVisibleDescendant = function (nodeElement) {\n        var childrenListElement = nodeElement.children[0].children[1];\n        if (childrenListElement) {\n            var lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n            return this.findLastVisibleDescendant(lastChildElement);\n        }\n        else {\n            return nodeElement;\n        }\n    };\n    UITreeNode.prototype.getParentNodeElement = function (nodeElement) {\n        var parentNodeElement = nodeElement.parentElement.parentElement.parentElement;\n        return parentNodeElement.tagName === 'P-TREENODE' ? parentNodeElement : null;\n    };\n    UITreeNode.prototype.focusNode = function (element) {\n        if (this.tree.droppableNodes)\n            element.children[1].children[0].focus();\n        else\n            element.children[0].children[0].focus();\n    };\n    var UITreeNode_1;\n    UITreeNode.ICON_CLASS = 'ui-treenode-icon ';\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], UITreeNode.prototype, \"node\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], UITreeNode.prototype, \"parentNode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], UITreeNode.prototype, \"root\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], UITreeNode.prototype, \"index\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], UITreeNode.prototype, \"firstChild\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], UITreeNode.prototype, \"lastChild\", void 0);\n    UITreeNode = UITreeNode_1 = __decorate([\n        core_1.Component({\n            selector: 'p-treeNode',\n            template: \"\\n        <ng-template [ngIf]=\\\"node\\\">\\n            <li *ngIf=\\\"tree.droppableNodes\\\" class=\\\"ui-treenode-droppoint\\\" [ngClass]=\\\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverPrev}\\\"\\n            (drop)=\\\"onDropPoint($event,-1)\\\" (dragover)=\\\"onDropPointDragOver($event)\\\" (dragenter)=\\\"onDropPointDragEnter($event,-1)\\\" (dragleave)=\\\"onDropPointDragLeave($event)\\\"></li>\\n            <li *ngIf=\\\"!tree.horizontal\\\" role=\\\"treeitem\\\" [ngClass]=\\\"['ui-treenode',node.styleClass||'', isLeaf() ? 'ui-treenode-leaf': '']\\\">\\n                <div class=\\\"ui-treenode-content\\\" (click)=\\\"onNodeClick($event)\\\" (contextmenu)=\\\"onNodeRightClick($event)\\\" (touchend)=\\\"onNodeTouchEnd()\\\"\\n                    (drop)=\\\"onDropNode($event)\\\" (dragover)=\\\"onDropNodeDragOver($event)\\\" (dragenter)=\\\"onDropNodeDragEnter($event)\\\" (dragleave)=\\\"onDropNodeDragLeave($event)\\\"\\n                    [draggable]=\\\"tree.draggableNodes\\\" (dragstart)=\\\"onDragStart($event)\\\" (dragend)=\\\"onDragStop($event)\\\" tabIndex=\\\"0\\\"\\n                    [ngClass]=\\\"{'ui-treenode-selectable':tree.selectionMode && node.selectable !== false,'ui-treenode-dragover':draghoverNode, 'ui-treenode-content-selected':isSelected()}\\\" \\n                    (keydown)=\\\"onKeyDown($event)\\\" [attr.aria-posinset]=\\\"this.index + 1\\\" [attr.aria-expanded]=\\\"this.node.expanded\\\" [attr.aria-selected]=\\\"isSelected()\\\">\\n                    <span class=\\\"ui-tree-toggler pi pi-fw ui-unselectable-text\\\" [ngClass]=\\\"{'pi-caret-right':!node.expanded,'pi-caret-down':node.expanded}\\\"\\n                            (click)=\\\"toggle($event)\\\"></span\\n                    ><div class=\\\"ui-chkbox\\\" *ngIf=\\\"tree.selectionMode == 'checkbox'\\\"><div class=\\\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\\\" [ngClass]=\\\"{'ui-state-disabled': node.selectable === false}\\\">\\n                        <span class=\\\"ui-chkbox-icon ui-clickable pi\\\"\\n                            [ngClass]=\\\"{'pi-check':isSelected(),'pi-minus':node.partialSelected}\\\"></span></div></div\\n                    ><span [class]=\\\"getIcon()\\\" *ngIf=\\\"node.icon||node.expandedIcon||node.collapsedIcon\\\"></span\\n                    ><span class=\\\"ui-treenode-label ui-corner-all\\\"\\n                        [ngClass]=\\\"{'ui-state-highlight':isSelected()}\\\">\\n                            <span *ngIf=\\\"!tree.getTemplateForNode(node)\\\">{{node.label}}</span>\\n                            <span *ngIf=\\\"tree.getTemplateForNode(node)\\\">\\n                                <ng-container *ngTemplateOutlet=\\\"tree.getTemplateForNode(node); context: {$implicit: node}\\\"></ng-container>\\n                            </span>\\n                    </span>\\n                </div>\\n                <ul class=\\\"ui-treenode-children\\\" style=\\\"display: none;\\\" *ngIf=\\\"node.children && node.expanded\\\" [style.display]=\\\"node.expanded ? 'block' : 'none'\\\" role=\\\"group\\\">\\n                    <p-treeNode *ngFor=\\\"let childNode of node.children;let firstChild=first;let lastChild=last; let index=index; trackBy: tree.nodeTrackBy\\\" [node]=\\\"childNode\\\" [parentNode]=\\\"node\\\"\\n                        [firstChild]=\\\"firstChild\\\" [lastChild]=\\\"lastChild\\\" [index]=\\\"index\\\"></p-treeNode>\\n                </ul>\\n            </li>\\n            <li *ngIf=\\\"tree.droppableNodes&&lastChild\\\" class=\\\"ui-treenode-droppoint\\\" [ngClass]=\\\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverNext}\\\"\\n            (drop)=\\\"onDropPoint($event,1)\\\" (dragover)=\\\"onDropPointDragOver($event)\\\" (dragenter)=\\\"onDropPointDragEnter($event,1)\\\" (dragleave)=\\\"onDropPointDragLeave($event)\\\"></li>\\n            <table *ngIf=\\\"tree.horizontal\\\" [class]=\\\"node.styleClass\\\">\\n                <tbody>\\n                    <tr>\\n                        <td class=\\\"ui-treenode-connector\\\" *ngIf=\\\"!root\\\">\\n                            <table class=\\\"ui-treenode-connector-table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <td [ngClass]=\\\"{'ui-treenode-connector-line':!firstChild}\\\"></td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td [ngClass]=\\\"{'ui-treenode-connector-line':!lastChild}\\\"></td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </td>\\n                        <td class=\\\"ui-treenode\\\" [ngClass]=\\\"{'ui-treenode-collapsed':!node.expanded}\\\">\\n                            <div class=\\\"ui-treenode-content ui-state-default ui-corner-all\\\"\\n                                [ngClass]=\\\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\\\" (click)=\\\"onNodeClick($event)\\\" (contextmenu)=\\\"onNodeRightClick($event)\\\"\\n                                (touchend)=\\\"onNodeTouchEnd()\\\">\\n                                <span class=\\\"ui-tree-toggler pi pi-fw ui-unselectable-text\\\" [ngClass]=\\\"{'pi-plus':!node.expanded,'pi-minus':node.expanded}\\\" *ngIf=\\\"!isLeaf()\\\"\\n                                        (click)=\\\"toggle($event)\\\"></span\\n                                ><span [class]=\\\"getIcon()\\\" *ngIf=\\\"node.icon||node.expandedIcon||node.collapsedIcon\\\"></span\\n                                ><span class=\\\"ui-treenode-label ui-corner-all\\\">\\n                                        <span *ngIf=\\\"!tree.getTemplateForNode(node)\\\">{{node.label}}</span>\\n                                        <span *ngIf=\\\"tree.getTemplateForNode(node)\\\">\\n                                        <ng-container *ngTemplateOutlet=\\\"tree.getTemplateForNode(node); context: {$implicit: node}\\\"></ng-container>\\n                                        </span>\\n                                </span>\\n                            </div>\\n                        </td>\\n                        <td class=\\\"ui-treenode-children-container\\\" *ngIf=\\\"node.children && node.expanded\\\" [style.display]=\\\"node.expanded ? 'table-cell' : 'none'\\\">\\n                            <div class=\\\"ui-treenode-children\\\">\\n                                <p-treeNode *ngFor=\\\"let childNode of node.children;let firstChild=first;let lastChild=last; trackBy: tree.nodeTrackBy\\\" [node]=\\\"childNode\\\"\\n                                        [firstChild]=\\\"firstChild\\\" [lastChild]=\\\"lastChild\\\"></p-treeNode>\\n                            </div>\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </ng-template>\\n    \"\n        }),\n        __param(0, core_1.Inject(core_1.forwardRef(function () { return Tree; }))),\n        __metadata(\"design:paramtypes\", [Tree])\n    ], UITreeNode);\n    return UITreeNode;\n}());\nexports.UITreeNode = UITreeNode;\nvar Tree = /** @class */ (function () {\n    function Tree(el, dragDropService) {\n        this.el = el;\n        this.dragDropService = dragDropService;\n        this.selectionChange = new core_1.EventEmitter();\n        this.onNodeSelect = new core_1.EventEmitter();\n        this.onNodeUnselect = new core_1.EventEmitter();\n        this.onNodeExpand = new core_1.EventEmitter();\n        this.onNodeCollapse = new core_1.EventEmitter();\n        this.onNodeContextMenuSelect = new core_1.EventEmitter();\n        this.onNodeDrop = new core_1.EventEmitter();\n        this.layout = 'vertical';\n        this.metaKeySelection = true;\n        this.propagateSelectionUp = true;\n        this.propagateSelectionDown = true;\n        this.loadingIcon = 'pi pi-spinner';\n        this.emptyMessage = 'No records found';\n        this.filterBy = 'label';\n        this.filterMode = 'lenient';\n        this.nodeTrackBy = function (index, item) { return item; };\n    }\n    Tree.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.droppableNodes) {\n            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(function (event) {\n                _this.dragNodeTree = event.tree;\n                _this.dragNode = event.node;\n                _this.dragNodeSubNodes = event.subNodes;\n                _this.dragNodeIndex = event.index;\n                _this.dragNodeScope = event.scope;\n            });\n            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(function (event) {\n                _this.dragNodeTree = null;\n                _this.dragNode = null;\n                _this.dragNodeSubNodes = null;\n                _this.dragNodeIndex = null;\n                _this.dragNodeScope = null;\n                _this.dragHover = false;\n            });\n        }\n    };\n    Object.defineProperty(Tree.prototype, \"horizontal\", {\n        get: function () {\n            return this.layout == 'horizontal';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Tree.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n        this.templates.forEach(function (item) {\n            _this.templateMap[item.name] = item.template;\n        });\n    };\n    Tree.prototype.onNodeClick = function (event, node) {\n        var eventTarget = event.target;\n        if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n            if (this.hasFilteredNodes()) {\n                node = this.getNodeWithKey(node.key, this.value);\n                if (!node) {\n                    return;\n                }\n            }\n            var index_1 = this.findIndexInSelection(node);\n            var selected = (index_1 >= 0);\n            if (this.isCheckboxSelectionMode()) {\n                if (selected) {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, false);\n                    else\n                        this.selection = this.selection.filter(function (val, i) { return i != index_1; });\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, false);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                }\n                else {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, true);\n                    else\n                        this.selection = (this.selection || []).concat([node]);\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, true);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeSelect.emit({ originalEvent: event, node: node });\n                }\n            }\n            else {\n                var metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n                if (metaSelection) {\n                    var metaKey = (event.metaKey || event.ctrlKey);\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            this.selection = this.selection.filter(function (val, i) { return i != index_1; });\n                            this.selectionChange.emit(this.selection);\n                        }\n                        this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(node);\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            this.selection = (!metaKey) ? [] : this.selection || [];\n                            this.selection = this.selection.concat([node]);\n                            this.selectionChange.emit(this.selection);\n                        }\n                        this.onNodeSelect.emit({ originalEvent: event, node: node });\n                    }\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        if (selected) {\n                            this.selection = null;\n                            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                        }\n                        else {\n                            this.selection = node;\n                            this.onNodeSelect.emit({ originalEvent: event, node: node });\n                        }\n                    }\n                    else {\n                        if (selected) {\n                            this.selection = this.selection.filter(function (val, i) { return i != index_1; });\n                            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n                        }\n                        else {\n                            this.selection = (this.selection || []).concat([node]);\n                            this.onNodeSelect.emit({ originalEvent: event, node: node });\n                        }\n                    }\n                    this.selectionChange.emit(this.selection);\n                }\n            }\n        }\n        this.nodeTouched = false;\n    };\n    Tree.prototype.onNodeTouchEnd = function () {\n        this.nodeTouched = true;\n    };\n    Tree.prototype.onNodeRightClick = function (event, node) {\n        if (this.contextMenu) {\n            var eventTarget = event.target;\n            if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n                return;\n            }\n            else {\n                var index = this.findIndexInSelection(node);\n                var selected = (index >= 0);\n                if (!selected) {\n                    if (this.isSingleSelectionMode())\n                        this.selectionChange.emit(node);\n                    else\n                        this.selectionChange.emit([node]);\n                }\n                this.contextMenu.show(event);\n                this.onNodeContextMenuSelect.emit({ originalEvent: event, node: node });\n            }\n        }\n    };\n    Tree.prototype.findIndexInSelection = function (node) {\n        var index = -1;\n        if (this.selectionMode && this.selection) {\n            if (this.isSingleSelectionMode()) {\n                var areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;\n                index = areNodesEqual ? 0 : -1;\n            }\n            else {\n                for (var i = 0; i < this.selection.length; i++) {\n                    var selectedNode = this.selection[i];\n                    var areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\n                    if (areNodesEqual) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n        return index;\n    };\n    Tree.prototype.syncNodeOption = function (node, parentNodes, option, value) {\n        // to synchronize the node option between the filtered nodes and the original nodes(this.value) \n        var _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\n        if (_node) {\n            _node[option] = value || node[option];\n        }\n    };\n    Tree.prototype.hasFilteredNodes = function () {\n        return this.filter && this.filteredNodes && this.filteredNodes.length;\n    };\n    Tree.prototype.getNodeWithKey = function (key, nodes) {\n        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n            var node = nodes_1[_i];\n            if (node.key === key) {\n                return node;\n            }\n            if (node.children) {\n                var matchedNode = this.getNodeWithKey(key, node.children);\n                if (matchedNode) {\n                    return matchedNode;\n                }\n            }\n        }\n    };\n    Tree.prototype.propagateUp = function (node, select) {\n        if (node.children && node.children.length) {\n            var selectedCount = 0;\n            var childPartialSelected = false;\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (this.isSelected(child)) {\n                    selectedCount++;\n                }\n                else if (child.partialSelected) {\n                    childPartialSelected = true;\n                }\n            }\n            if (select && selectedCount == node.children.length) {\n                this.selection = (this.selection || []).concat([node]);\n                node.partialSelected = false;\n            }\n            else {\n                if (!select) {\n                    var index_2 = this.findIndexInSelection(node);\n                    if (index_2 >= 0) {\n                        this.selection = this.selection.filter(function (val, i) { return i != index_2; });\n                    }\n                }\n                if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        }\n        var parent = node.parent;\n        if (parent) {\n            this.propagateUp(parent, select);\n        }\n    };\n    Tree.prototype.propagateDown = function (node, select) {\n        var index = this.findIndexInSelection(node);\n        if (select && index == -1) {\n            this.selection = (this.selection || []).concat([node]);\n        }\n        else if (!select && index > -1) {\n            this.selection = this.selection.filter(function (val, i) { return i != index; });\n        }\n        node.partialSelected = false;\n        this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        if (node.children && node.children.length) {\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                this.propagateDown(child, select);\n            }\n        }\n    };\n    Tree.prototype.isSelected = function (node) {\n        return this.findIndexInSelection(node) != -1;\n    };\n    Tree.prototype.isSingleSelectionMode = function () {\n        return this.selectionMode && this.selectionMode == 'single';\n    };\n    Tree.prototype.isMultipleSelectionMode = function () {\n        return this.selectionMode && this.selectionMode == 'multiple';\n    };\n    Tree.prototype.isCheckboxSelectionMode = function () {\n        return this.selectionMode && this.selectionMode == 'checkbox';\n    };\n    Tree.prototype.isNodeLeaf = function (node) {\n        return node.leaf == false ? false : !(node.children && node.children.length);\n    };\n    Tree.prototype.getRootNode = function () {\n        return this.filteredNodes ? this.filteredNodes : this.value;\n    };\n    Tree.prototype.getTemplateForNode = function (node) {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    };\n    Tree.prototype.onDragOver = function (event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.dataTransfer.dropEffect = 'move';\n            event.preventDefault();\n        }\n    };\n    Tree.prototype.onDrop = function (event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.preventDefault();\n            var dragNode = this.dragNode;\n            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n                var dragNodeIndex = this.dragNodeIndex;\n                this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n                this.value = this.value || [];\n                this.value.push(dragNode);\n                this.dragDropService.stopDrag({\n                    node: dragNode\n                });\n            }\n        }\n    };\n    Tree.prototype.onDragEnter = function (event) {\n        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n            this.dragHover = true;\n        }\n    };\n    Tree.prototype.onDragLeave = function (event) {\n        if (this.droppableNodes) {\n            var rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n                this.dragHover = false;\n            }\n        }\n    };\n    Tree.prototype.allowDrop = function (dragNode, dropNode, dragNodeScope) {\n        if (!dragNode) {\n            //prevent random html elements to be dragged\n            return false;\n        }\n        else if (this.isValidDragScope(dragNodeScope)) {\n            var allow = true;\n            if (dropNode) {\n                if (dragNode === dropNode) {\n                    allow = false;\n                }\n                else {\n                    var parent_1 = dropNode.parent;\n                    while (parent_1 != null) {\n                        if (parent_1 === dragNode) {\n                            allow = false;\n                            break;\n                        }\n                        parent_1 = parent_1.parent;\n                    }\n                }\n            }\n            return allow;\n        }\n        else {\n            return false;\n        }\n    };\n    Tree.prototype.isValidDragScope = function (dragScope) {\n        var dropScope = this.droppableScope;\n        if (dropScope) {\n            if (typeof dropScope === 'string') {\n                if (typeof dragScope === 'string')\n                    return dropScope === dragScope;\n                else if (dragScope instanceof Array)\n                    return dragScope.indexOf(dropScope) != -1;\n            }\n            else if (dropScope instanceof Array) {\n                if (typeof dragScope === 'string') {\n                    return dropScope.indexOf(dragScope) != -1;\n                }\n                else if (dragScope instanceof Array) {\n                    for (var _i = 0, dropScope_1 = dropScope; _i < dropScope_1.length; _i++) {\n                        var s = dropScope_1[_i];\n                        for (var _a = 0, dragScope_1 = dragScope; _a < dragScope_1.length; _a++) {\n                            var ds = dragScope_1[_a];\n                            if (s === ds) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    Tree.prototype.onFilter = function (event) {\n        var filterValue = event.target.value;\n        if (filterValue === '') {\n            this.filteredNodes = null;\n        }\n        else {\n            this.filteredNodes = [];\n            var searchFields = this.filterBy.split(',');\n            var filterText = objectutils_1.ObjectUtils.removeAccents(filterValue).toLowerCase();\n            var isStrictMode = this.filterMode === 'strict';\n            for (var _i = 0, _a = this.value; _i < _a.length; _i++) {\n                var node = _a[_i];\n                var copyNode = __assign({}, node);\n                var paramsWithoutNode = { searchFields: searchFields, filterText: filterText, isStrictMode: isStrictMode };\n                if ((isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                    (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                    this.filteredNodes.push(copyNode);\n                }\n            }\n        }\n    };\n    Tree.prototype.findFilteredNodes = function (node, paramsWithoutNode) {\n        if (node) {\n            var matched = false;\n            if (node.children) {\n                var childNodes = node.children.slice();\n                node.children = [];\n                for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n                    var childNode = childNodes_1[_i];\n                    var copyChildNode = __assign({}, childNode);\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            if (matched) {\n                return true;\n            }\n        }\n    };\n    Tree.prototype.isFilterMatched = function (node, _a) {\n        var searchFields = _a.searchFields, filterText = _a.filterText, isStrictMode = _a.isStrictMode;\n        var matched = false;\n        for (var _i = 0, searchFields_1 = searchFields; _i < searchFields_1.length; _i++) {\n            var field = searchFields_1[_i];\n            var fieldValue = objectutils_1.ObjectUtils.removeAccents(String(objectutils_1.ObjectUtils.resolveFieldData(node, field))).toLowerCase();\n            if (fieldValue.indexOf(filterText) > -1) {\n                matched = true;\n            }\n        }\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, { searchFields: searchFields, filterText: filterText, isStrictMode: isStrictMode }) || matched;\n        }\n        return matched;\n    };\n    Tree.prototype.getBlockableElement = function () {\n        return this.el.nativeElement.children[0];\n    };\n    Tree.prototype.ngOnDestroy = function () {\n        if (this.dragStartSubscription) {\n            this.dragStartSubscription.unsubscribe();\n        }\n        if (this.dragStopSubscription) {\n            this.dragStopSubscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], Tree.prototype, \"value\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"selectionMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Tree.prototype, \"selection\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Tree.prototype, \"selectionChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Tree.prototype, \"onNodeSelect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Tree.prototype, \"onNodeUnselect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Tree.prototype, \"onNodeExpand\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Tree.prototype, \"onNodeCollapse\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Tree.prototype, \"onNodeContextMenuSelect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Tree.prototype, \"onNodeDrop\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Tree.prototype, \"style\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"styleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Tree.prototype, \"contextMenu\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"layout\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Tree.prototype, \"draggableScope\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Tree.prototype, \"droppableScope\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Tree.prototype, \"draggableNodes\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Tree.prototype, \"droppableNodes\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Tree.prototype, \"metaKeySelection\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Tree.prototype, \"propagateSelectionUp\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Tree.prototype, \"propagateSelectionDown\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Tree.prototype, \"loading\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"loadingIcon\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"emptyMessage\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"ariaLabel\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"ariaLabelledBy\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Tree.prototype, \"validateDrop\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Tree.prototype, \"filter\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"filterBy\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"filterMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Tree.prototype, \"filterPlaceholder\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Function)\n    ], Tree.prototype, \"nodeTrackBy\", void 0);\n    __decorate([\n        core_1.ContentChildren(shared_2.PrimeTemplate),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], Tree.prototype, \"templates\", void 0);\n    Tree = __decorate([\n        core_1.Component({\n            selector: 'p-tree',\n            template: \"\\n        <div [ngClass]=\\\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode,'ui-treenode-dragover':dragHover,'ui-tree-loading': loading}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" *ngIf=\\\"!horizontal\\\"\\n            (drop)=\\\"onDrop($event)\\\" (dragover)=\\\"onDragOver($event)\\\" (dragenter)=\\\"onDragEnter($event)\\\" (dragleave)=\\\"onDragLeave($event)\\\">\\n            <div class=\\\"ui-tree-loading-mask ui-widget-overlay\\\" *ngIf=\\\"loading\\\"></div>\\n            <div class=\\\"ui-tree-loading-content\\\" *ngIf=\\\"loading\\\">\\n                <i [class]=\\\"'ui-tree-loading-icon pi-spin ' + loadingIcon\\\"></i>\\n            </div>\\n            <div *ngIf=\\\"filter\\\" class=\\\"ui-tree-filter-container\\\">\\n                <input #filter type=\\\"text\\\" autocomplete=\\\"off\\\" class=\\\"ui-tree-filter ui-inputtext ui-widget ui-state-default ui-corner-all\\\" [attr.placeholder]=\\\"filterPlaceholder\\\"\\n                    (keydown.enter)=\\\"$event.preventDefault()\\\" (input)=\\\"onFilter($event)\\\">\\n                    <span class=\\\"ui-tree-filter-icon pi pi-search\\\"></span>\\n            </div>\\n            <ul class=\\\"ui-tree-container\\\" *ngIf=\\\"getRootNode()\\\" role=\\\"tree\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledBy\\\">\\n                <p-treeNode *ngFor=\\\"let node of getRootNode(); let firstChild=first;let lastChild=last; let index=index; trackBy: nodeTrackBy\\\" [node]=\\\"node\\\"\\n                [firstChild]=\\\"firstChild\\\" [lastChild]=\\\"lastChild\\\" [index]=\\\"index\\\"></p-treeNode>\\n            </ul>\\n            <div class=\\\"ui-tree-empty-message\\\" *ngIf=\\\"!loading && !value\\\">{{emptyMessage}}</div>\\n        </div>\\n        <div [ngClass]=\\\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\\\"  [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" *ngIf=\\\"horizontal\\\">\\n            <div class=\\\"ui-tree-loading ui-widget-overlay\\\" *ngIf=\\\"loading\\\"></div>\\n            <div class=\\\"ui-tree-loading-content\\\" *ngIf=\\\"loading\\\">\\n                <i [class]=\\\"'ui-tree-loading-icon pi-spin ' + loadingIcon\\\"></i>\\n            </div>\\n            <table *ngIf=\\\"value&&value[0]\\\">\\n                <p-treeNode [node]=\\\"value[0]\\\" [root]=\\\"true\\\"></p-treeNode>\\n            </table>\\n            <div class=\\\"ui-tree-empty-message\\\" *ngIf=\\\"!loading && !value\\\">{{emptyMessage}}</div>\\n        </div>\\n    \"\n        }),\n        __param(1, core_2.Optional()),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef, treedragdropservice_1.TreeDragDropService])\n    ], Tree);\n    return Tree;\n}());\nexports.Tree = Tree;\nvar TreeModule = /** @class */ (function () {\n    function TreeModule() {\n    }\n    TreeModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule],\n            exports: [Tree, shared_1.SharedModule],\n            declarations: [Tree, UITreeNode]\n        })\n    ], TreeModule);\n    return TreeModule;\n}());\nexports.TreeModule = TreeModule;\n//# sourceMappingURL=tree.js.map"],"sourceRoot":""}