{"version":3,"sources":["webpack:///./src/app/shared/components/status-update-history/status-update-history.component.html","webpack:///./src/app/shared/components/status-update-history/status-update-history.component.scss","webpack:///./src/app/shared/components/status-update-history/status-update-history.component.ts","webpack:///./src/app/shared/components/status-update-history/status-update-history.module.ts"],"names":[],"mappings":"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","file":"default~engineering-management-applicable-configuration-applicable-configuration-module~engineering-~9b74530e.js","sourcesContent":["module.exports = \"<a-modal class=\\\"aw-modal\\\" [(visible)]=\\\"display\\\">\\n  <a-header>\\n    <div class=\\\"modal-title\\\">{{ \\\"updates\\\" | translate }} ({{ tableRows ? tableRows.length : 0 }})</div>\\n  </a-header>\\n\\n  <a-content>\\n    <div class=\\\"search-dialog-container\\\">\\n      <div class=\\\"section search-critetia-section\\\">\\n        <h4 class=\\\"section-title\\\">{{ componentId + \\\".status\\\" | translate }}</h4>\\n\\n        <div class=\\\"section-content\\\">\\n          <div class=\\\"column\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"form-label\\\"> {{ componentId + \\\".statusState\\\" | translate }} </label>\\n                <div class=\\\"form-control\\\">\\n                  <p-dropdown\\n                    class=\\\"aw-dropdown fixed-width\\\"\\n                    [showClear]=\\\"true\\\"\\n                    [disabled]=\\\"!isStatusEditable\\\"\\n                    [options]=\\\"statusList\\\"\\n                    [(ngModel)]=\\\"object.statusState\\\"\\n                    placeholder=\\\"&nbsp;\\\"\\n                    appendTo=\\\"body\\\"\\n                  ></p-dropdown>\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"form-label\\\">{{ componentId + \\\".statusUser\\\" | translate }}</label>\\n                <div class=\\\"form-control\\\">\\n                  <input\\n                    type=\\\"text\\\"\\n                    name=\\\"statusUser\\\"\\n                    class=\\\"aw-input\\\"\\n                    [(ngModel)]=\\\"object.statusUser\\\"\\n                    [disabled]=\\\"true\\\"\\n                  />\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"form-label\\\">{{ componentId + \\\".statusDate\\\" | translate }}</label>\\n                <div class=\\\"form-control\\\">\\n                  <input\\n                    type=\\\"datetime\\\"\\n                    name=\\\"statusDate\\\"\\n                    class=\\\"aw-input\\\"\\n                    [disabled]=\\\"true\\\"\\n                    value=\\\"{{ dateService.dateWitCustomFormatToString(object.statusDate, DATE_WITH_HOUR) }}\\\"\\n                  />\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div *ngIf=\\\"isStatusEditable\\\" class=\\\"row search-criteria-footer\\\">\\n              <div class=\\\"search-actions\\\">\\n                <button type=\\\"button\\\" mat-raised-button (click)=\\\"updateObjectStatus()\\\">\\n                  <span>{{ \\\"global.update\\\" | translate }}</span>\\n                </button>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"section\\\">\\n        <div class=\\\"section-content\\\">\\n          <p-table\\n            [resizableColumns]=\\\"true\\\"\\n            #table\\n            class=\\\"aw-table2\\\"\\n            [columns]=\\\"tableData.tableCols\\\"\\n            [value]=\\\"tableRows\\\"\\n            [(selection)]=\\\"selectedRows\\\"\\n            [scrollable]=\\\"true\\\"\\n          >\\n            <ng-template pTemplate=\\\"emptymessage\\\">\\n              <span *ngIf=\\\"!isLoading\\\"> &nbsp;</span>\\n\\n              <div *ngIf=\\\"isLoading\\\" class=\\\"aw-table-loading-indicator\\\">\\n                <div class=\\\"loading-message\\\">{{ \\\"table.loadingData\\\" | translate }}</div>\\n                <div class=\\\"lds-hourglass\\\"></div>\\n              </div>\\n            </ng-template>\\n\\n            <ng-template pTemplate=\\\"caption\\\">\\n              <div class=\\\"aw-table-header\\\" [ngClass]=\\\"{ 'rows-selected': selectedRows.length > 0 }\\\">\\n                <div class=\\\"aw-table-global-filter\\\">\\n                  <label class=\\\"aw-table-global-filter-label\\\">\\n                    <i class=\\\"fa fa-fw fa-search\\\" aria-hidden=\\\"true\\\"></i>\\n                  </label>\\n\\n                  <input\\n                    #tableGlobalFilter\\n                    class=\\\"aw-table-global-filter-input\\\"\\n                    type=\\\"text\\\"\\n                    placeholder=\\\"{{ 'table.globalFilterText' | translate }}\\\"\\n                    (input)=\\\"table.filterGlobal($event.target.value, 'contains')\\\"\\n                  />\\n                </div>\\n\\n                <div *ngIf=\\\"selectedRows.length > 0\\\" class=\\\"aw-table-actions\\\">\\n                  <button\\n                    *ngIf=\\\"isStatusEditable\\\"\\n                    type=\\\"button\\\"\\n                    mat-raised-button\\n                    [ngClass]=\\\"{ inactive: selectedRows.length === 0 }\\\"\\n                    (click)=\\\"deleteSelectedObjects()\\\"\\n                    [disabled]=\\\"selectedRows.length === 0\\\"\\n                    pTooltip=\\\"{{ 'global.delete' | translate }}\\\"\\n                    tooltipPosition=\\\"top\\\"\\n                  >\\n                    {{ \\\"global.delete\\\" | translate }}\\n                  </button>\\n                </div>\\n              </div>\\n            </ng-template>\\n\\n            <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\n              <colgroup>\\n                <col *ngIf=\\\"isStatusEditable\\\" class=\\\"aw-table-checkbox-wrapper\\\" />\\n                <col *ngFor=\\\"let col of columns\\\" [ngStyle]=\\\"{ width: col.width }\\\" />\\n              </colgroup>\\n            </ng-template>\\n\\n            <ng-template pTemplate=\\\"header\\\" let-columns>\\n              <tr>\\n                <th *ngIf=\\\"isStatusEditable\\\" class=\\\"aw-table-checkbox-wrapper\\\">\\n                  <p-tableHeaderCheckbox class=\\\"aw-table-checkbox\\\"></p-tableHeaderCheckbox>\\n                </th>\\n\\n                <th\\n                  pResizableColumn\\n                  *ngFor=\\\"let col of columns\\\"\\n                  [pSortableColumn]=\\\"col.field\\\"\\n                  [ngStyle]=\\\"{ 'text-align': col.alignment }\\\"\\n                >\\n                  {{ tableData.componentId + \\\".\\\" + col.field | translate }}\\n                </th>\\n              </tr>\\n            </ng-template>\\n\\n            <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\" let-rowIndex=\\\"rowIndex\\\">\\n              <tr [pSelectableRow]=\\\"rowData\\\" [pSelectableRowIndex]=\\\"rowIndex\\\">\\n                <td *ngIf=\\\"isStatusEditable\\\" class=\\\"aw-table-checkbox-wrapper\\\">\\n                  <p-tableCheckbox class=\\\"aw-checkbox\\\" [value]=\\\"rowData\\\"></p-tableCheckbox>\\n                </td>\\n\\n                <td *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.filterMode\\\" [ngStyle]=\\\"{ 'text-align': col.alignment }\\\">\\n                  <span *ngSwitchCase=\\\"tableColumnFilterMode.Tricheckbox\\\">\\n                    <span *ngIf=\\\"rowData[col.field]\\\"> <i class=\\\"fa fa-check\\\" aria-hidden=\\\"true\\\"></i> </span>\\n                  </span>\\n\\n                  <span *ngSwitchDefault>\\n                    <span *ngIf=\\\"!col.isDate && !col.isDateWithHour\\\">\\n                      {{\\n                        columnsWithKey.includes(col.field) && keyValueMap[rowData[col.field]]\\n                          ? keyValueMap[rowData[col.field]]\\n                          : rowData[col.field]\\n                      }}\\n                    </span>\\n                    <span *ngIf=\\\"col.isDate && col.field === 'timestamp'\\\">\\n                      {{ dateService.dateWitCustomFormatToString(rowData[col.field], DATE_WITH_HOUR) }}\\n                    </span>\\n                    <span *ngIf=\\\"col.isDate && col.field !== 'timestamp'\\\">\\n                      {{ dateService.dateToString(rowData[col.field]) }}\\n                    </span>\\n                    <span *ngIf=\\\"col.isDateWithHour\\\">\\n                      {{ dateService.dateWitCustomFormatToString(rowData[col.field], DATE_WITH_HOUR) }}\\n                    </span>\\n                  </span>\\n                </td>\\n              </tr>\\n            </ng-template>\\n          </p-table>\\n        </div>\\n      </div>\\n    </div>\\n  </a-content>\\n\\n  <a-footer>\\n    <button type=\\\"button\\\" mat-raised-button (click)=\\\"closeDialog()\\\">\\n      {{ \\\"global.close\\\" | translate }}\\n    </button>\\n  </a-footer>\\n</a-modal>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9jb21wb25lbnRzL3N0YXR1cy11cGRhdGUtaGlzdG9yeS9zdGF0dXMtdXBkYXRlLWhpc3RvcnkuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Observable, forkJoin } from 'rxjs';\r\n\r\nimport { AppConstants } from '../../../shared/constants/app-constants';\r\nimport { DialogComponent } from '../../../shared/types/dialog-component';\r\nimport { ComponentOpenMode } from '../../enums/component-open-mode.enum';\r\nimport { TableColumnFilterMode } from '../../enums/table-column-filter-mode.enum';\r\nimport { TableSelectionMode } from '../../enums/table-selection-mode.enum';\r\nimport { ConfirmationService } from '../../services/confirmation.service';\r\nimport { DateService } from '../../services/date.service';\r\nimport { MessageService } from '../../services/message.service';\r\nimport { PropertiesService } from '../../services/properties.service';\r\nimport { SessionService } from '../../services/session.service';\r\nimport { UpdateHistoricService } from '../../services/update-historic.service';\r\nimport { LabelValue } from '../../types/label-value.interface';\r\nimport { LabelValueUtils } from '../../utils/label-value-utils';\r\nimport { DialogTableData } from '../dialog-table/types/dialog-table-data.interface';\r\n\r\n@Component({\r\n  selector: 'aw-status-update-history',\r\n  styleUrls: ['./status-update-history.component.scss'],\r\n  templateUrl: './status-update-history.component.html'\r\n})\r\nexport class StatusUpdateHistoryComponent<T1, T2> extends DialogComponent implements OnInit {\r\n  @Output()\r\n  public onUpdated = new EventEmitter<T1>();\r\n\r\n  @Input('object')\r\n  public object: T1 | null;\r\n\r\n  @Input('data')\r\n  public tableData: DialogTableData<T2>;\r\n\r\n  @Input('deleteApi')\r\n  public deleteApi: string;\r\n\r\n  @Input('keyMap')\r\n  public keyObservableMap: Map<string, Observable<LabelValue<string>[]>>;\r\n\r\n  @Input('isStatusEditable')\r\n  public isStatusEditable: boolean;\r\n\r\n  @Input('isObjectTypeOfBireSbDTO')\r\n  public readonly isObjectTypeOfBireSbDTO: boolean;\r\n\r\n  @Input('isObjectTypeOfBireEvolutionDTO')\r\n  public readonly isObjectTypeOfBireEvolutionDTO: boolean;\r\n\r\n  @Input('isObjectBireMaintenancePlanDTO')\r\n  public readonly isObjectBireMaintenancePlanDTO: boolean;\r\n\r\n  @Input('isSapSession')\r\n  private readonly isSapSession: boolean;\r\n\r\n  public componentId: string;\r\n\r\n  public columnsWithKey: string[];\r\n  public keyValueMap: { [key: string]: string };\r\n  public readonly tableColumnFilterMode: typeof TableColumnFilterMode;\r\n  public readonly tableSelectionMode: typeof TableSelectionMode;\r\n\r\n  public showColumnFilters: boolean;\r\n\r\n  public selectedRows: T2[];\r\n  public tableRows: T2[];\r\n\r\n  public statusList: LabelValue<string>[];\r\n\r\n  public isLoading: boolean;\r\n  public DATE_WITH_HOUR: string = AppConstants.MOMENTJS_DATE_TIME;\r\n\r\n  public constructor(\r\n    private readonly messageService: MessageService,\r\n    private readonly propertiesService: PropertiesService,\r\n    public sessionService: SessionService,\r\n    private readonly updateHistoricService: UpdateHistoricService,\r\n    private readonly confirmationService: ConfirmationService,\r\n    public translateService: TranslateService,\r\n    public dateService: DateService\r\n  ) {\r\n    super(ComponentOpenMode.Write, 'DialogStatusUpdateComponent');\r\n\r\n    this.tableColumnFilterMode = TableColumnFilterMode;\r\n    this.tableSelectionMode = TableSelectionMode;\r\n\r\n    this.columnsWithKey = [];\r\n    this.keyValueMap = {};\r\n\r\n    this.statusList = [];\r\n\r\n    this.tableRows = [];\r\n\r\n    this.showColumnFilters = true;\r\n\r\n    this.selectedRows = [];\r\n\r\n    this.isLoading = false;\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    const statusDate = 'statusDate';\r\n    const statusState = 'statusState';\r\n\r\n    if (!!this.object) {\r\n      this.loadStatusList(this.object[statusState]);\r\n    }\r\n\r\n    if (this.tableData) {\r\n      this.componentId = this.tableData.componentId;\r\n      this.loadTableRows();\r\n      this.loadKeyValueMapping();\r\n    }\r\n\r\n    if (!!this.object && this.object[statusDate]) {\r\n      this.object[statusDate] = new Date(this.object[statusDate]);\r\n    }\r\n  }\r\n\r\n  private loadKeyValueMapping(): void {\r\n    if (this.keyObservableMap) {\r\n      this.columnsWithKey = Array.from(this.keyObservableMap.keys());\r\n      const observables = Array.from(this.keyObservableMap.values());\r\n\r\n      forkJoin(observables).subscribe((results: LabelValue<string>[][]) => {\r\n        results.forEach((result) => {\r\n          result.forEach((element) => {\r\n            this.keyValueMap[element.value] = element.label;\r\n          });\r\n        });\r\n        if (this.object) {\r\n          const statusState = 'statusState';\r\n          this.addMissingStatusLabel(this.object[statusState]);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private loadTableRows(): void {\r\n    if (!!this.tableData) {\r\n      this.isLoading = true;\r\n      const statusState = 'statusState';\r\n\r\n      this.tableData.tableRows.subscribe(\r\n        (results) => {\r\n          this.isLoading = false;\r\n          this.tableRows = results.list;\r\n          this.tableRows.forEach((element) => {\r\n            this.addMissingStatusLabel(element[statusState]);\r\n            if (!LabelValueUtils.stringValueToLabel<T2>(element, 'statusState', this.statusList)) {\r\n              this.loadStatusList(element[statusState]);\r\n            }\r\n          });\r\n          this.tableRows = [...this.tableRows];\r\n        },\r\n        () => {\r\n          if (this.tableData) {\r\n            this.messageService.showErrorMessage(this.tableData.componentId + '.errorOnGetTableRows');\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  private loadStatusList(statusState: string): void {\r\n    this.propertiesService\r\n      .getObjectStatusList(\r\n        this.isObjectTypeOfBireSbDTO,\r\n        this.isObjectTypeOfBireEvolutionDTO,\r\n        this.isObjectBireMaintenancePlanDTO,\r\n        statusState,\r\n        this.isSapSession\r\n      )\r\n      .subscribe(\r\n        (result) => {\r\n          result.forEach((element) => {\r\n            if (this.statusList.filter((status) => status.value === element.value).length === 0) {\r\n              this.statusList.push(element);\r\n            }\r\n          });\r\n          this.statusList = [...this.statusList];\r\n          this.addMissingStatusLabel(statusState);\r\n\r\n          this.tableRows.forEach((element) => {\r\n            LabelValueUtils.stringValueToLabel<T2>(element, 'statusState', this.statusList);\r\n          });\r\n          this.tableRows = [...this.tableRows];\r\n        },\r\n        () => {\r\n          this.messageService.showErrorMessage(this.getTranslateKey('errorOnLoadStatusList'));\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Add current state label from keyValueMap if status value unavailable in status list\r\n   * Introduced for feature 2058 (added func object status to Part Number)\r\n   * as it can be in a new function object status or in a former object status.\r\n   * @param statusState Object status value.\r\n   */\r\n  private addMissingStatusLabel(statusState: string): void {\r\n    if (\r\n      statusState &&\r\n      this.statusList &&\r\n      !this.statusList.find((lv) => lv.value === statusState) &&\r\n      this.keyValueMap[statusState]\r\n    ) {\r\n      this.statusList.push({ value: statusState, label: this.keyValueMap[statusState] });\r\n    }\r\n  }\r\n\r\n  public deleteSelectedObjects(): void {\r\n    this.confirmationService.confirmDelete({\r\n      messageKey: this.getTranslateKey('confirmDeleteSelectedHistories'),\r\n      accept: () => {\r\n        this.updateHistoricService.removeUpdateHistory(this.deleteApi, this.selectedRows).subscribe(\r\n          (result) => {\r\n            if (result) {\r\n              this.loadTableRows();\r\n              this.selectedRows = [];\r\n            } else {\r\n              this.messageService.showErrorMessage(this.getTranslateKey('errorOnDelete'));\r\n            }\r\n          },\r\n          () => {\r\n            this.messageService.showErrorMessage(this.getTranslateKey('errorOnDelete'));\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  public updateObjectStatus(): void {\r\n    if (!!this.object) {\r\n      this.onUpdated.emit(this.object);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\nimport { AngularCommonSharedModule } from '../../angular-common-shared.module';\r\nimport { AngularGenericTemplatesSharedModule } from '../../angular-generic-templates-shared-module';\r\nimport { AppCommonSharedModule } from '../../app-common-shared.module';\r\nimport { ModalModule } from '../modal/modal.module';\r\n\r\nimport { StatusUpdateHistoryComponent } from './status-update-history.component';\r\n\r\n/******************************************************************************\r\n * Modules\r\n *************************************************************************** */\r\n\r\nconst EXTERNAL_MODULES = [CalendarModule, DropdownModule, TableModule, TooltipModule];\r\n\r\nconst INTERNAL_MODULES = [ModalModule];\r\n\r\n/******************************************************************************\r\n * Components\r\n *************************************************************************** */\r\n\r\nconst COMPONENTS = [StatusUpdateHistoryComponent];\r\n\r\n@NgModule({\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n  imports: [\r\n    AngularCommonSharedModule,\r\n    AngularGenericTemplatesSharedModule,\r\n    AppCommonSharedModule,\r\n    ...EXTERNAL_MODULES,\r\n    ...INTERNAL_MODULES\r\n  ]\r\n})\r\nexport class StatusUpdateHistoryModule {}\r\n"],"sourceRoot":""}