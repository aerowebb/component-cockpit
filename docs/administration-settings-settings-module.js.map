{"version":3,"sources":["webpack:///./node_modules/primeng/components/inputtextarea/inputtextarea.js","webpack:///./node_modules/primeng/fileupload.js","webpack:///./node_modules/primeng/inputtextarea.js","webpack:///./src/app/main/administration/settings/form/settings-form.component.html","webpack:///./src/app/main/administration/settings/form/settings-form.component.ts","webpack:///./src/app/main/administration/settings/settings.module.ts","webpack:///./src/app/shared/components/dialog-status/dialog-status.component.html","webpack:///./src/app/shared/components/dialog-status/dialog-status.component.ts","webpack:///./src/app/shared/components/dialog-status/dialog-status.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,cAAc,mBAAO,CAAC,oEAAgB;AACtC,eAAe,mBAAO,CAAC,uEAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,yC;;;;;;;;;;;;ACrHA;AACa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,sGAAoC,G;;;;;;;;;;;;ACNrD;AACa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,kHAA0C,G;;;;;;;;;;;ACN3D,2IAA2I,4DAA4D,0NAA0N,+BAA+B,mOAAmO,iCAAiC,4TAA4T,+BAA+B,0HAA0H,6CAA6C,mSAAmS,kCAAkC,yFAAyF,0FAA0F,yTAAyT,qEAAqE,oXAAoX,qEAAqE,6BAA6B,+EAA+E,4oBAA4oB,iCAAiC,0XAA0X,8BAA8B,y3CAAy3C,mEAAmE,+EAA+E,8CAA8C,wEAAwE,+ZAA+Z,iCAAiC,ksBAAksB,YAAY,imBAAimB,gBAAgB,2CAA2C,4CAA4C,y5CAAy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","file":"administration-settings-settings-module.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar common_1 = require(\"@angular/common\");\nvar InputTextarea = /** @class */ (function () {\n    function InputTextarea(el, ngModel) {\n        this.el = el;\n        this.ngModel = ngModel;\n        this.onResize = new core_1.EventEmitter();\n    }\n    InputTextarea.prototype.ngDoCheck = function () {\n        this.updateFilledState();\n        if (this.autoResize) {\n            this.resize();\n        }\n    };\n    //To trigger change detection to manage ui-state-filled for material labels when there is no value binding\n    InputTextarea.prototype.onInput = function (e) {\n        this.updateFilledState();\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.updateFilledState = function () {\n        this.filled = (this.el.nativeElement.value && this.el.nativeElement.value.length) || (this.ngModel && this.ngModel.model);\n    };\n    InputTextarea.prototype.onFocus = function (e) {\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.onBlur = function (e) {\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.resize = function (event) {\n        this.el.nativeElement.style.height = this.el.nativeElement.scrollHeight + 'px';\n        if (parseFloat(this.el.nativeElement.style.height) >= parseFloat(this.el.nativeElement.style.maxHeight)) {\n            this.el.nativeElement.style.overflowY = \"scroll\";\n            this.el.nativeElement.style.height = this.el.nativeElement.style.maxHeight;\n        }\n        else {\n            this.el.nativeElement.style.overflow = \"hidden\";\n        }\n        this.onResize.emit(event || {});\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], InputTextarea.prototype, \"autoResize\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], InputTextarea.prototype, \"onResize\", void 0);\n    __decorate([\n        core_1.HostListener('input', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onInput\", null);\n    __decorate([\n        core_1.HostListener('focus', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onFocus\", null);\n    __decorate([\n        core_1.HostListener('blur', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onBlur\", null);\n    InputTextarea = __decorate([\n        core_1.Directive({\n            selector: '[pInputTextarea]',\n            host: {\n                '[class.ui-inputtext]': 'true',\n                '[class.ui-corner-all]': 'true',\n                '[class.ui-inputtextarea-resizable]': 'autoResize',\n                '[class.ui-state-default]': 'true',\n                '[class.ui-widget]': 'true',\n                '[class.ui-state-filled]': 'filled'\n            }\n        }),\n        __param(1, core_1.Optional()),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef, forms_1.NgModel])\n    ], InputTextarea);\n    return InputTextarea;\n}());\nexports.InputTextarea = InputTextarea;\nvar InputTextareaModule = /** @class */ (function () {\n    function InputTextareaModule() {\n    }\n    InputTextareaModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule],\n            exports: [InputTextarea],\n            declarations: [InputTextarea]\n        })\n    ], InputTextareaModule);\n    return InputTextareaModule;\n}());\nexports.InputTextareaModule = InputTextareaModule;\n//# sourceMappingURL=inputtextarea.js.map","/* Shorthand */\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./components/fileupload/fileupload\"));","/* Shorthand */\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./components/inputtextarea/inputtextarea\"));","module.exports = \"<div class=\\\"page-header\\\">\\r\\n  <div class=\\\"page-info\\\">\\r\\n    <div>\\r\\n      <div class=\\\"page-title\\\">\\r\\n        {{ \\\"transaction.\\\" + componentData.componentId | translate }}\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"page-actions\\\">\\r\\n    <button *ngIf=\\\"isReadOpenMode && hasUpdateAccessRight\\\" type=\\\"button\\\" mat-raised-button (click)=\\\"editSettings()\\\">\\r\\n      {{ \\\"global.edit\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      *ngIf=\\\"!isReadOpenMode && !isCreateOpenMode\\\"\\r\\n      type=\\\"button\\\"\\r\\n      color=\\\"warn\\\"\\r\\n      mat-raised-button\\r\\n      (click)=\\\"cancelSettings()\\\"\\r\\n    >\\r\\n      {{ \\\"global.cancel\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      *ngIf=\\\"!isReadOpenMode\\\"\\r\\n      class=\\\"btn-with-spinner\\\"\\r\\n      color=\\\"primary\\\"\\r\\n      type=\\\"button\\\"\\r\\n      mat-raised-button\\r\\n      (click)=\\\"saveSettings()\\\"\\r\\n    >\\r\\n      <span class=\\\"lds-hourglass\\\" *ngIf=\\\"showSaveSpinner\\\"></span>\\r\\n      {{ \\\"global.save\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      mat-icon-button\\r\\n      class=\\\"mat-elevation-z1\\\"\\r\\n      matTooltip=\\\"{{ 'global.showAllActionTooltip' | translate }}\\\"\\r\\n      matTooltipPosition=\\\"above\\\"\\r\\n      aria-label=\\\"Show all actions\\\"\\r\\n      [matMenuTriggerFor]=\\\"actions\\\"\\r\\n    >\\r\\n      <mat-icon>more_horiz</mat-icon>\\r\\n    </button>\\r\\n    <mat-menu #actions=\\\"matMenu\\\">\\r\\n      <button mat-menu-item (click)=\\\"reloadSettings()\\\">{{ \\\"global.refresh\\\" | translate }}</button>\\r\\n      <button mat-menu-item (click)=\\\"updateFavoriteState()\\\">\\r\\n        {{ (isFavoriteEntry ? \\\"page.removeFromFavorites\\\" : \\\"page.addToFavorites\\\") | translate }}\\r\\n      </button>\\r\\n    </mat-menu>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"page-wrapper\\\">\\r\\n  <div class=\\\"page-container\\\">\\r\\n    <div class=\\\"page-content\\\">\\r\\n      <mat-tab-group animationDuration=\\\"0ms\\\" dynamicHeight>\\r\\n        <mat-tab>\\r\\n          <ng-template mat-tab-label>\\r\\n            {{ componentData.componentId + \\\".generalConfiguration\\\" | translate }}\\r\\n          </ng-template>\\r\\n          <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"grid-cell--12\\\">\\r\\n              <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n                <div class=\\\"grid-cell-header\\\">\\r\\n                  <div class=\\\"grid-cell-title-container\\\">\\r\\n                    <h3 class=\\\"grid-cell-title\\\">\\r\\n                      {{ componentData.componentId + \\\".generalConfiguration\\\" | translate }}\\r\\n                      ({{ propertyValuesTableDataSource ? propertyValuesTableDataSource.dataCount : 0 }})\\r\\n                    </h3>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"grid-cell-content\\\">\\r\\n                  <a-table [dataSource]=\\\"propertyValuesTableDataSource\\\">\\r\\n                    <ng-template tableActionsDef>\\r\\n                      <button\\r\\n                        *ngIf=\\\"!isReadOpenMode && !disablePropertyTypeDeleteButton()\\\"\\r\\n                        type=\\\"button\\\"\\r\\n                        mat-raised-button\\r\\n                        color=\\\"warn\\\"\\r\\n                        (click)=\\\"deleteSelectedPropertyValue()\\\"\\r\\n                      >\\r\\n                        {{ \\\"global.delete\\\" | translate }}\\r\\n                      </button>\\r\\n\\r\\n                      <button\\r\\n                        *ngIf=\\\"!isReadOpenMode && propertyValuesTableDataSource.hasDataSelection\\\"\\r\\n                        type=\\\"button\\\"\\r\\n                        mat-raised-button\\r\\n                        (click)=\\\"addPropertyValue()\\\"\\r\\n                      >\\r\\n                        {{ \\\"global.add\\\" | translate }}\\r\\n                      </button>\\r\\n                    </ng-template>\\r\\n\\r\\n                    <ng-template columnDef=\\\"isStandard\\\" let-rowData=\\\"rowData\\\">\\r\\n                      <i *ngIf=\\\"rowData.isStandard\\\" class=\\\"fa fa-fw fa-check\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                    </ng-template>\\r\\n\\r\\n                    <ng-template columnDef=\\\"propertiesValue\\\" let-rowData=\\\"rowData\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"rowData.propertiesValue\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      />\\r\\n                    </ng-template>\\r\\n\\r\\n                    <ng-template columnDef=\\\"propertiesKey\\\" let-rowData=\\\"rowData\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"rowData.propertiesKey\\\"\\r\\n                        [disabled]=\\\"rowData['propertiesValueId']\\\"\\r\\n                        maxlength=\\\"100\\\"\\r\\n                      />\\r\\n                    </ng-template>\\r\\n                  </a-table>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </mat-tab>\\r\\n        <mat-tab>\\r\\n          <ng-template mat-tab-label>\\r\\n            {{ componentData.componentId + \\\".inspectorWorkbench\\\" | translate }}\\r\\n          </ng-template>\\r\\n          <div class=\\\"grid-row\\\" [ngStyle]=\\\"{ display: iwListArr.length > 0 ? '' : 'none' }\\\">\\r\\n            <div\\r\\n              *ngFor=\\\"let item of iwListArr; let i = index\\\"\\r\\n              [ngClass]=\\\"i < 1 ? 'grid-cell--7' : i < 2 ? 'grid-cell--5' : i < 3 ? 'grid-cell--3' : 'grid-cell--9'\\\"\\r\\n            >\\r\\n              <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n                <div class=\\\"grid-cell-header\\\">\\r\\n                  <div class=\\\"grid-cell-title-container\\\">\\r\\n                    <h3 class=\\\"grid-cell-title\\\">\\r\\n                      {{ item.sectionTitle | translate }}\\r\\n                    </h3>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <!-- DISPLAY CUSTOMIZING PANEL -->\\r\\n                <div *ngIf=\\\"i == 0\\\" class=\\\"grid-cell-content grid-cell-content-with-section\\\">\\r\\n                  <div class=\\\"section\\\">\\r\\n                    <div class=\\\"section-content\\\">\\r\\n                      <div *ngFor=\\\"let element of item.sectionRowData\\\" class=\\\"row\\\">\\r\\n                        <div class=\\\"grid-cell--4\\\" *ngFor=\\\"let obj of element\\\" [ngSwitch]=\\\"obj.customValueList\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"form-label\\\">\\r\\n                              {{ obj.name }}\\r\\n                            </label>\\r\\n\\r\\n                            <div class=\\\"form-control\\\">\\r\\n                              <span *ngSwitchCase=\\\"undefined\\\" class=\\\"display--flex-row\\\">\\r\\n                                <input\\r\\n                                  type=\\\"text\\\"\\r\\n                                  class=\\\"aw-input\\\"\\r\\n                                  [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                  [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                />\\r\\n                                <span style=\\\"width:140px; padding: 8px 0;\\\"\\r\\n                                  >{{ obj.bsdeAwCustomDTO.propertyDefaultValue }} (default)</span\\r\\n                                >\\r\\n                              </span>\\r\\n                              <p-dropdown\\r\\n                                *ngSwitchDefault\\r\\n                                class=\\\"aw-dropdown fixed-width\\\"\\r\\n                                [options]=\\\"obj.customValueList\\\"\\r\\n                                [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                appendTo=\\\"body\\\"\\r\\n                              ></p-dropdown>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <!-- PROJECT CUSTOMIZING PANEL -->\\r\\n                <div *ngIf=\\\"i == 1\\\" class=\\\"grid-cell-content grid-cell-content-with-section\\\">\\r\\n                  <div class=\\\"section\\\">\\r\\n                    <div class=\\\"section-content\\\">\\r\\n                      <div class=\\\"row\\\" *ngFor=\\\"let element of item.sectionRowData\\\">\\r\\n                        <div class=\\\"grid-cell--6\\\" *ngFor=\\\"let obj of element\\\" [ngSwitch]=\\\"obj.customValueList\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"form-label\\\">\\r\\n                              {{ obj.name }}\\r\\n                            </label>\\r\\n\\r\\n                            <div class=\\\"form-control\\\">\\r\\n                              <span *ngSwitchCase=\\\"undefined\\\" class=\\\"display--flex-row\\\">\\r\\n                                <input\\r\\n                                  type=\\\"text\\\"\\r\\n                                  class=\\\"aw-input\\\"\\r\\n                                  [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                  [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                />\\r\\n                                <span style=\\\"width:140px; padding: 8px 0;\\\"\\r\\n                                  >{{ obj.bsdeAwCustomDTO.propertyDefaultValue }} (default)</span\\r\\n                                >\\r\\n                              </span>\\r\\n                              <p-dropdown\\r\\n                                *ngSwitchDefault\\r\\n                                class=\\\"aw-dropdown fixed-width\\\"\\r\\n                                [options]=\\\"obj.customValueList\\\"\\r\\n                                [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                appendTo=\\\"body\\\"\\r\\n                              ></p-dropdown>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <!-- WORKSCOPE CUSTOMIZING PANEL -->\\r\\n                <div *ngIf=\\\"i == 2\\\" class=\\\"grid-cell-content grid-cell-content-with-section\\\">\\r\\n                  <div class=\\\"section\\\">\\r\\n                    <div *ngFor=\\\"let element of item.sectionRowData\\\" class=\\\"section-content\\\">\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"grid-cell--12\\\" *ngFor=\\\"let obj of element\\\" [ngSwitch]=\\\"obj.customValueList\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"form-label\\\">\\r\\n                              {{ obj.name }}\\r\\n                            </label>\\r\\n\\r\\n                            <div class=\\\"form-control\\\">\\r\\n                              <span *ngSwitchCase=\\\"undefined\\\" class=\\\"display--flex-row\\\">\\r\\n                                <input\\r\\n                                  type=\\\"text\\\"\\r\\n                                  class=\\\"aw-input\\\"\\r\\n                                  [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                  [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                />\\r\\n                                <span style=\\\"width:140px; padding: 8px 0;\\\"\\r\\n                                  >{{ obj.bsdeAwCustomDTO.propertyDefaultValue }} (default)</span\\r\\n                                >\\r\\n                              </span>\\r\\n                              <p-dropdown\\r\\n                                *ngSwitchDefault\\r\\n                                class=\\\"aw-dropdown fixed-width\\\"\\r\\n                                [options]=\\\"obj.customValueList\\\"\\r\\n                                [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                appendTo=\\\"body\\\"\\r\\n                              ></p-dropdown>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <!-- INVENTORY CUSTOMIZING PANEL -->\\r\\n                <div *ngIf=\\\"i == 3\\\" class=\\\"grid-cell-content grid-cell-content-with-section\\\">\\r\\n                  <div class=\\\"section\\\">\\r\\n                    <div class=\\\"section-content\\\">\\r\\n                      <div class=\\\"row\\\" *ngFor=\\\"let element of item.sectionRowData\\\">\\r\\n                        <div class=\\\"grid-cell--3\\\" *ngFor=\\\"let obj of element\\\" [ngSwitch]=\\\"obj.customValueList\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"form-label\\\">\\r\\n                              {{ obj.name }}\\r\\n                            </label>\\r\\n\\r\\n                            <div class=\\\"form-control\\\">\\r\\n                              <span *ngSwitchCase=\\\"undefined\\\" class=\\\"display--flex-row\\\">\\r\\n                                <input\\r\\n                                  type=\\\"text\\\"\\r\\n                                  class=\\\"aw-input\\\"\\r\\n                                  [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                  [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                />\\r\\n                                <span style=\\\"width:140px; padding: 8px 0;\\\"\\r\\n                                  >{{ obj.bsdeAwCustomDTO.propertyDefaultValue }} (default)</span\\r\\n                                >\\r\\n                              </span>\\r\\n                              <p-dropdown\\r\\n                                *ngSwitchDefault\\r\\n                                class=\\\"aw-dropdown fixed-width\\\"\\r\\n                                [options]=\\\"obj.customValueList\\\"\\r\\n                                [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                appendTo=\\\"body\\\"\\r\\n                              ></p-dropdown>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </mat-tab>\\r\\n        <mat-tab>\\r\\n          <ng-template mat-tab-label>\\r\\n            {{ componentData.componentId + \\\".engineeringManagement\\\" | translate }}\\r\\n          </ng-template>\\r\\n          <div\\r\\n            class=\\\"grid-row\\\"\\r\\n            *ngFor=\\\"let item of emListArr\\\"\\r\\n            [ngStyle]=\\\"{ display: emListArr.length > 0 ? '' : 'none' }\\\"\\r\\n          >\\r\\n            <div class=\\\"grid-cell--12\\\">\\r\\n              <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n                <div class=\\\"grid-cell-header\\\">\\r\\n                  <div class=\\\"grid-cell-title-container\\\">\\r\\n                    <h3 class=\\\"grid-cell-title\\\">\\r\\n                      {{ item.sectionTitle | translate }}\\r\\n                    </h3>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"grid-cell-content grid-cell-content-with-section\\\">\\r\\n                  <div class=\\\"section\\\">\\r\\n                    <div class=\\\"section-content\\\">\\r\\n                      <div class=\\\"row\\\" *ngFor=\\\"let element of item.sectionRowData\\\">\\r\\n                        <div class=\\\"grid-cell--3\\\" *ngFor=\\\"let obj of element\\\" [ngSwitch]=\\\"obj.customValueList\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"form-label\\\">\\r\\n                              {{ obj.name }}\\r\\n                            </label>\\r\\n\\r\\n                            <div class=\\\"form-control\\\">\\r\\n                              <span *ngSwitchCase=\\\"undefined\\\" class=\\\"display--flex-row\\\">\\r\\n                                <input\\r\\n                                  type=\\\"text\\\"\\r\\n                                  class=\\\"aw-input\\\"\\r\\n                                  [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                  [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                />\\r\\n                                <span style=\\\"width:140px; padding: 8px 0;\\\"\\r\\n                                  >{{ obj.bsdeAwCustomDTO.propertyDefaultValue }} (default)</span\\r\\n                                >\\r\\n                              </span>\\r\\n                              <p-dropdown\\r\\n                                *ngSwitchDefault\\r\\n                                class=\\\"aw-dropdown fixed-width\\\"\\r\\n                                [options]=\\\"obj.customValueList\\\"\\r\\n                                [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                appendTo=\\\"body\\\"\\r\\n                              ></p-dropdown>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </mat-tab>\\r\\n        <mat-tab>\\r\\n          <ng-template mat-tab-label>\\r\\n            {{ componentData.componentId + \\\".fleetManagement\\\" | translate }}\\r\\n          </ng-template>\\r\\n          <div class=\\\"grid-row\\\" [ngStyle]=\\\"{ display: fmListArr.length > 0 ? '' : 'none' }\\\">\\r\\n            <div class=\\\"grid-cell--6\\\" *ngFor=\\\"let item of fmListArr\\\">\\r\\n              <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n                <div class=\\\"grid-cell-header\\\">\\r\\n                  <div class=\\\"grid-cell-title-container\\\">\\r\\n                    <h3 class=\\\"grid-cell-title\\\">\\r\\n                      {{ item.sectionTitle | translate }}\\r\\n                    </h3>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"grid-cell-content grid-cell-content-with-section\\\">\\r\\n                  <div class=\\\"section\\\">\\r\\n                    <div class=\\\"section-content\\\">\\r\\n                      <div class=\\\"row\\\" *ngFor=\\\"let element of item.sectionRowData\\\">\\r\\n                        <div class=\\\"grid-cell--3\\\" *ngFor=\\\"let obj of element\\\" [ngSwitch]=\\\"obj.customValueList\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"form-label\\\">\\r\\n                              {{ obj.name }}\\r\\n                            </label>\\r\\n\\r\\n                            <div class=\\\"form-control\\\">\\r\\n                              <span *ngSwitchCase=\\\"undefined\\\" class=\\\"display--flex-row\\\">\\r\\n                                <input\\r\\n                                  type=\\\"text\\\"\\r\\n                                  class=\\\"aw-input\\\"\\r\\n                                  [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                  [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                />\\r\\n                                <span style=\\\"width:140px; padding: 8px 0;\\\"\\r\\n                                  >{{ obj.bsdeAwCustomDTO.propertyDefaultValue }} (default)</span\\r\\n                                >\\r\\n                              </span>\\r\\n                              <p-dropdown\\r\\n                                *ngSwitchDefault\\r\\n                                class=\\\"aw-dropdown fixed-width\\\"\\r\\n                                [options]=\\\"obj.customValueList\\\"\\r\\n                                [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                appendTo=\\\"body\\\"\\r\\n                              ></p-dropdown>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </mat-tab>\\r\\n        <mat-tab>\\r\\n          <ng-template mat-tab-label>\\r\\n            {{ componentData.componentId + \\\".maintenanceOperations\\\" | translate }}\\r\\n          </ng-template>\\r\\n          <div\\r\\n            class=\\\"grid-row\\\"\\r\\n            *ngFor=\\\"let item of meListArr\\\"\\r\\n            [ngStyle]=\\\"{ display: meListArr.length > 0 ? '' : 'none' }\\\"\\r\\n          >\\r\\n            <div class=\\\"grid-cell--12\\\">\\r\\n              <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n                <div class=\\\"grid-cell-header\\\">\\r\\n                  <div class=\\\"grid-cell-title-container\\\">\\r\\n                    <h3 class=\\\"grid-cell-title\\\">\\r\\n                      {{ item.sectionTitle | translate }}\\r\\n                    </h3>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"grid-cell-content grid-cell-content-with-section\\\">\\r\\n                  <div class=\\\"section\\\">\\r\\n                    <div class=\\\"section-content\\\">\\r\\n                      <div class=\\\"row\\\" *ngFor=\\\"let element of item.sectionRowData\\\">\\r\\n                        <div class=\\\"grid-cell--3\\\" *ngFor=\\\"let obj of element\\\" [ngSwitch]=\\\"obj.customValueList\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"form-label\\\">\\r\\n                              {{ obj.name }}\\r\\n                            </label>\\r\\n\\r\\n                            <div class=\\\"form-control\\\">\\r\\n                              <span *ngSwitchCase=\\\"undefined\\\" class=\\\"display--flex-row\\\">\\r\\n                                <input\\r\\n                                  type=\\\"text\\\"\\r\\n                                  class=\\\"aw-input\\\"\\r\\n                                  [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                  [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                />\\r\\n                                <span style=\\\"width:140px; padding: 8px 0;\\\"\\r\\n                                  >{{ obj.bsdeAwCustomDTO.propertyDefaultValue }} (default)</span\\r\\n                                >\\r\\n                              </span>\\r\\n                              <p-dropdown\\r\\n                                *ngSwitchDefault\\r\\n                                class=\\\"aw-dropdown fixed-width\\\"\\r\\n                                [options]=\\\"obj.customValueList\\\"\\r\\n                                [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                appendTo=\\\"body\\\"\\r\\n                              ></p-dropdown>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"grid-row\\\" [ngStyle]=\\\"{ display: ipListArr.length > 0 ? '' : 'none' }\\\">\\r\\n            <div class=\\\"grid-cell--12\\\">\\r\\n              <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n                <div class=\\\"grid-cell-header\\\">\\r\\n                  <div class=\\\"grid-cell-title-container\\\">\\r\\n                    <h3 class=\\\"grid-cell-title\\\">\\r\\n                      {{ componentData.componentId + \\\".installationParameters\\\" | translate }}\\r\\n                    </h3>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"grid-cell-content grid-cell-content-with-section\\\">\\r\\n                  <div class=\\\"section\\\" *ngFor=\\\"let item of ipListArr\\\">\\r\\n                    <h4 class=\\\"section-title\\\">\\r\\n                      {{ item.sectionTitle }}\\r\\n                    </h4>\\r\\n\\r\\n                    <div class=\\\"section-content\\\">\\r\\n                      <div class=\\\"row\\\" *ngFor=\\\"let element of item.sectionRowData\\\">\\r\\n                        <div class=\\\"grid-cell--3\\\" *ngFor=\\\"let obj of element\\\" [ngSwitch]=\\\"obj.customValueList\\\">\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"form-label\\\">\\r\\n                              {{ obj.name }}\\r\\n                            </label>\\r\\n\\r\\n                            <div class=\\\"form-control\\\">\\r\\n                              <span *ngSwitchCase=\\\"undefined\\\" class=\\\"display--flex-row\\\">\\r\\n                                <input\\r\\n                                  type=\\\"text\\\"\\r\\n                                  class=\\\"aw-input\\\"\\r\\n                                  [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                  [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                />\\r\\n                                <span style=\\\"width:140px; padding: 8px 0;\\\"\\r\\n                                  >{{ obj.bsdeAwCustomDTO.propertyDefaultValue }} (default)</span\\r\\n                                >\\r\\n                              </span>\\r\\n                              <p-dropdown\\r\\n                                *ngSwitchDefault\\r\\n                                class=\\\"aw-dropdown fixed-width\\\"\\r\\n                                [options]=\\\"obj.customValueList\\\"\\r\\n                                [(ngModel)]=\\\"obj.bsdeAwCustomDTO.propertyCustomValue\\\"\\r\\n                                [disabled]=\\\"isReadOpenMode\\\"\\r\\n                                appendTo=\\\"body\\\"\\r\\n                              ></p-dropdown>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </mat-tab>\\r\\n      </mat-tab-group>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { PageTocService } from '../../../../shared/components/component-sidebar/page-toc.service';\r\nimport { PageTocEntry } from '../../../../shared/components/component-sidebar/types/page-toc-entry.interface';\r\nimport { ColumnAlignment, TableDataSource } from '../../../../shared/components/table/table-data-source';\r\nimport { ComponentConstants } from '../../../../shared/constants/component-constants';\r\nimport { ComponentOpenMode } from '../../../../shared/enums/component-open-mode.enum';\r\nimport { ConfirmationService } from '../../../../shared/services/confirmation.service';\r\nimport { FavoriteService } from '../../../../shared/services/favorite.service';\r\nimport { LoaderService } from '../../../../shared/services/loader.service';\r\nimport { MessageService } from '../../../../shared/services/message.service';\r\nimport { SerializationService } from '../../../../shared/services/serialization.service';\r\nimport { TabService } from '../../../../shared/services/tab.service';\r\nimport { SaveSettingInput } from '../../../../shared/types/api-input-types/user-profile-management/save-setting-input.interface';\r\nimport { SettingCustomDTO } from '../../../../shared/types/api-output-types/user-profile-management/setting-custom-dto.interface';\r\nimport { SettingTableDTO } from '../../../../shared/types/api-output-types/user-profile-management/setting-table-dto.interface';\r\nimport { BidoPropertiesDTO } from '../../../../shared/types/api-types/bido-properties-dto.interface';\r\nimport { BidoPropertiesValueDTO } from '../../../../shared/types/api-types/bido-properties-value-dto.interface';\r\nimport { BsdeAwCustomDTO } from '../../../../shared/types/api-types/bsde-aw-custom-dto.interface';\r\nimport { FormPageComponent } from '../../../../shared/types/form-page-component';\r\nimport { LabelValue } from '../../../../shared/types/label-value.interface';\r\nimport { PageComponentData } from '../../../../shared/types/page-component-data.interface';\r\n\r\nimport { SettingsFormService } from './settings-form.service';\r\n\r\ninterface SectionRow {\r\n  sectionTitle: string;\r\n  sectionRowData: SettingCustomDTO[][];\r\n}\r\n\r\n@Component({\r\n  selector: 'aw-settings-form',\r\n  templateUrl: './settings-form.component.html'\r\n})\r\nexport class SettingsFormComponent extends FormPageComponent<PageComponentData> implements OnInit {\r\n  public static readonly GENERAL_CONFIGURATION_ANCHOR_ID: string = 'generalConfigurationAnchor';\r\n  public static readonly INSPECTOR_WORKBENCH_ANCHOR_ID: string = 'inspectorWorkBenchAnchor';\r\n  public static readonly ENGINEERING_DATA_ANCHOR_ID: string = 'engineeringDataAnchor';\r\n  public static readonly FLEET_MANAGEMENT_ANCHOR_ID: string = 'fleetManagementAnchor';\r\n  public static readonly MAINTENANCE_OPERATIONS_ANCHOR_ID: string = 'maintenanceOperationsAnchor';\r\n  public static readonly INSTALLATION_PARAMETERS_ANCHOR_ID: string = 'installationParametersAnchor';\r\n  private static readonly AEROWEB_CONFIG_PROPERTY_ID = '1';\r\n\r\n  public readonly component: typeof SettingsFormComponent;\r\n  public readonly tabGeneralConfigurationId: string;\r\n  public readonly tabInspectorWorkBenchId: string;\r\n  public readonly tabEngineeringDataId: string;\r\n  public readonly tabFleetManagementAnchorId: string;\r\n  public readonly tabMaintenanceOperationsId: string;\r\n  public readonly tabInstallationParametersId: string;\r\n\r\n  public propertyValuesTableDataSource: TableDataSource<BidoPropertiesValueDTO>;\r\n  public currentPropertyValue: BidoPropertiesValueDTO | undefined;\r\n  public currentPropertyValueIndex: number | undefined;\r\n  public customizePropertyList: SettingTableDTO[];\r\n\r\n  public iwList: SettingTableDTO[];\r\n  public emList: SettingTableDTO[];\r\n  public fmList: SettingTableDTO[];\r\n  public meList: SettingTableDTO[];\r\n  public ipList: SettingTableDTO[];\r\n\r\n  public iwListArr: SectionRow[];\r\n  public emListArr: SectionRow[];\r\n  public fmListArr: SectionRow[];\r\n  public meListArr: SectionRow[];\r\n  public ipListArr: SectionRow[];\r\n\r\n  // Table of content ***********************************************************\r\n  @ViewChild(SettingsFormComponent.GENERAL_CONFIGURATION_ANCHOR_ID)\r\n  public generalConfigurationEltRef: ElementRef;\r\n\r\n  @ViewChild(SettingsFormComponent.INSPECTOR_WORKBENCH_ANCHOR_ID)\r\n  public inspectorWorkBenchEltRef: ElementRef;\r\n\r\n  @ViewChild(SettingsFormComponent.ENGINEERING_DATA_ANCHOR_ID)\r\n  public engineeringDataEltRef: ElementRef;\r\n\r\n  @ViewChild(SettingsFormComponent.FLEET_MANAGEMENT_ANCHOR_ID)\r\n  public fleetManagementEltRef: ElementRef;\r\n\r\n  @ViewChild(SettingsFormComponent.MAINTENANCE_OPERATIONS_ANCHOR_ID)\r\n  public maintenanceOperationsEltRef: ElementRef;\r\n\r\n  @ViewChild(SettingsFormComponent.INSTALLATION_PARAMETERS_ANCHOR_ID)\r\n  public installationParametersEltRef: ElementRef;\r\n\r\n  public toc: PageTocEntry[];\r\n\r\n  // ****************************************************************************\r\n\r\n  public showSaveSpinner: boolean;\r\n\r\n  public constructor(\r\n    favoriteService: FavoriteService,\r\n    loaderService: LoaderService,\r\n    messageService: MessageService,\r\n    pageTocService: PageTocService,\r\n    serializationService: SerializationService,\r\n    tabService: TabService,\r\n    public translateService: TranslateService,\r\n    private readonly settingsFormService: SettingsFormService,\r\n    private readonly confirmationService: ConfirmationService\r\n  ) {\r\n    super(\r\n      ComponentOpenMode.Read,\r\n      favoriteService,\r\n      loaderService,\r\n      messageService,\r\n      serializationService,\r\n      tabService,\r\n      pageTocService\r\n    );\r\n\r\n    this.component = SettingsFormComponent;\r\n\r\n    this.customizePropertyList = [];\r\n    this.iwList = [];\r\n    this.emList = [];\r\n    this.fmList = [];\r\n    this.meList = [];\r\n    this.ipList = [];\r\n    this.iwListArr = [];\r\n    this.emListArr = [];\r\n    this.fmListArr = [];\r\n    this.meListArr = [];\r\n    this.ipListArr = [];\r\n\r\n    super.registerPageTocEntryObservable();\r\n    this.initPropertyValuesTableDataSource();\r\n  }\r\n\r\n  public getComponentName(): string {\r\n    return ComponentConstants.ADM_SETTINGS_FORM;\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    super.ngOnInit();\r\n\r\n    this.updateOpenMode(ComponentOpenMode.Read);\r\n    this.loadSettings();\r\n  }\r\n\r\n  public cancelSettings(): void {\r\n    this.updateOpenMode(ComponentOpenMode.Read);\r\n    this.loadSettings();\r\n  }\r\n\r\n  public editSettings(): void {\r\n    this.updateOpenMode(ComponentOpenMode.Write);\r\n  }\r\n\r\n  public reloadSettings(): void {\r\n    this.loadSettings();\r\n  }\r\n\r\n  private loadSettings(): void {\r\n    this.propertyValuesTableDataSource.setData([]);\r\n    // get aerweb config properties\r\n    const bidoPropertiesDTO: BidoPropertiesDTO = {\r\n      propertiesId: SettingsFormComponent.AEROWEB_CONFIG_PROPERTY_ID,\r\n      propertiesName: 'aerowebb_configuration',\r\n      propertiesType: 'TECHNICAL',\r\n      isInternationalized: false\r\n    };\r\n    this.settingsFormService.findBidoPropertyValuesByPropertyId(bidoPropertiesDTO).subscribe((result) => {\r\n      if (!!result) {\r\n        this.propertyValuesTableDataSource.addData(result);\r\n      }\r\n    });\r\n    // Get customizing data\r\n    this.settingsFormService.getCustomizationData().subscribe((result) => {\r\n      if (!!result) {\r\n        this.customizePropertyList = result;\r\n\r\n        this.customizePropertyList.forEach((obj) => {\r\n          obj.data.forEach((obj1) => {\r\n            if (obj1.customValueList && obj1.bsdeAwCustomDTO.propertyDefaultValue) {\r\n              let matchFound = 0;\r\n              obj1.customValueList.forEach((val) => {\r\n                if (val.value === obj1.bsdeAwCustomDTO.propertyDefaultValue) {\r\n                  val.label = `${val.label} (default)`;\r\n                  matchFound++;\r\n                }\r\n              });\r\n              if (!matchFound) {\r\n                const listOption: LabelValue<string> = {\r\n                  label: `${obj1.bsdeAwCustomDTO.propertyDefaultValue} (default)`,\r\n                  value: obj1.bsdeAwCustomDTO.propertyDefaultValue\r\n                };\r\n                obj1.customValueList.push(listOption);\r\n              }\r\n            }\r\n          });\r\n        });\r\n\r\n        this.iwList = [];\r\n        this.emList = [];\r\n        this.fmList = [];\r\n        this.meList = [];\r\n        this.ipList = [];\r\n        this.iwListArr = [];\r\n        this.emListArr = [];\r\n        this.fmListArr = [];\r\n        this.meListArr = [];\r\n        this.ipListArr = [];\r\n\r\n        this.iwList = result.filter((obj) => {\r\n          return obj.groupTitle === 'iw';\r\n        });\r\n        this.makeRowsFromList(this.iwList, this.iwListArr);\r\n\r\n        this.emList = result.filter((obj) => {\r\n          return obj.groupTitle === 'em';\r\n        });\r\n        this.makeRowsFromList(this.emList, this.emListArr);\r\n\r\n        this.fmList = result.filter((obj) => {\r\n          return obj.groupTitle === 'fm';\r\n        });\r\n        this.makeRowsFromList(this.fmList, this.fmListArr);\r\n\r\n        this.meList = result.filter((obj) => {\r\n          return obj.groupTitle === 'me';\r\n        });\r\n        this.makeRowsFromList(this.meList, this.meListArr);\r\n\r\n        this.ipList = result.filter((obj) => {\r\n          return obj.groupTitle === 'ip';\r\n        });\r\n        this.makeRowsFromList(this.ipList, this.ipListArr);\r\n\r\n        this.setTableOfContent();\r\n      }\r\n    });\r\n  }\r\n\r\n  private makeRowsFromList(list: SettingTableDTO[], resultArr: SectionRow[]) {\r\n    for (let k = 0; k < list.length; k++) {\r\n      const sectionRowObj: SectionRow = {\r\n        sectionTitle: list[k].title,\r\n        sectionRowData: []\r\n      };\r\n      const rowArr: SettingCustomDTO[] = [];\r\n\r\n      for (let i = 0; i < list[k].data.length; i++) {\r\n        if (list[k].data[i]) {\r\n          rowArr.push(list[k].data[i]);\r\n        }\r\n      }\r\n\r\n      sectionRowObj.sectionRowData.push(rowArr);\r\n      resultArr.push(sectionRowObj);\r\n    }\r\n  }\r\n\r\n  private initPropertyValuesTableDataSource(): void {\r\n    this.propertyValuesTableDataSource = new TableDataSource({\r\n      allowMultiSelect: true,\r\n      columns: [\r\n        {\r\n          field: 'propertiesKey',\r\n          translateKey: this.getTranslateKey('propertiesKey'),\r\n          width: '35%'\r\n        },\r\n        {\r\n          field: 'isStandard',\r\n          translateKey: this.getTranslateKey('isStandard'),\r\n          alignment: ColumnAlignment.CENTER,\r\n          width: '10%'\r\n        },\r\n        {\r\n          field: 'propertiesValue',\r\n          translateKey: this.getTranslateKey('propertiesValue'),\r\n          width: '55%'\r\n        }\r\n      ],\r\n      data: []\r\n    });\r\n  }\r\n\r\n  public saveSettings(): void {\r\n    const bsdeAwCustomDTOs: BsdeAwCustomDTO[] = [];\r\n    const propertyTableDtos: BidoPropertiesValueDTO[] = [];\r\n    this.customizePropertyList.forEach((obj) => {\r\n      if (obj.data) {\r\n        obj.data.forEach((customDto) => {\r\n          bsdeAwCustomDTOs.push(customDto.bsdeAwCustomDTO);\r\n        });\r\n      }\r\n    });\r\n\r\n    this.propertyValuesTableDataSource.dataSrc.forEach((obj) => {\r\n      if (obj.propertiesKey !== null && obj.propertiesKey !== undefined) {\r\n        propertyTableDtos.push(obj);\r\n      }\r\n    });\r\n\r\n    const saveSettingInput: SaveSettingInput = {\r\n      bidoPropertiesValueDTO: propertyTableDtos,\r\n      bsdeAwCustomDTO: bsdeAwCustomDTOs\r\n    };\r\n\r\n    this.showSaveSpinner = true;\r\n    this.settingsFormService.updateSettings(saveSettingInput).subscribe(\r\n      () => {\r\n        this.messageService.showSuccessMessage(this.getTranslateKey('successOnUpdateSettings'));\r\n        this.loadSettings();\r\n        this.showSaveSpinner = false;\r\n      },\r\n      (error) => {\r\n        this.showSaveSpinner = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**************************************************************************\r\n   * Table Of Content\r\n   *************************************************************************/\r\n\r\n  private setTableOfContent(): void {\r\n    const generalConfigurationKey = this.getTranslateKey('generalConfiguration');\r\n    const inspectorWorkBenchKey = this.getTranslateKey('inspectorWorkbench');\r\n    const engineeringDataKey = this.getTranslateKey('engineeringManagement');\r\n    const fleetManagementKey = this.getTranslateKey('fleetManagement');\r\n    const maintenanceOperationsKey = this.getTranslateKey('maintenanceOperations');\r\n    const installationParametersKey = this.getTranslateKey('installationParameters');\r\n    this.translateService\r\n      .get([\r\n        generalConfigurationKey,\r\n        inspectorWorkBenchKey,\r\n        engineeringDataKey,\r\n        fleetManagementKey,\r\n        maintenanceOperationsKey,\r\n        installationParametersKey\r\n      ])\r\n      .subscribe((results: string[]) => {\r\n        const generalConfigurationLabel = !!results ? results[generalConfigurationKey] : 'General Configuration';\r\n        const inspectorWorkBenchLabel = !!results ? results[inspectorWorkBenchKey] : 'Inspector Work Bench';\r\n        const engineeringDataLabel = !!results ? results[engineeringDataKey] : 'Engineering Data';\r\n        const fleetManagementLabel = !!results ? results[fleetManagementKey] : 'Fleet Management';\r\n        const maintenanceOperationsLabel = !!results ? results[maintenanceOperationsKey] : 'Maintenance Operations';\r\n        const installationParametersLabel = !!results ? results[installationParametersKey] : 'Installation Parameters';\r\n\r\n        this.toc = [\r\n          {\r\n            id: 'generalConfigurationAnchor',\r\n            anchor: this.generalConfigurationEltRef,\r\n            label: generalConfigurationLabel\r\n          },\r\n          {\r\n            id: 'inspectorWorkBenchAnchor',\r\n            anchor: this.inspectorWorkBenchEltRef,\r\n            label: inspectorWorkBenchLabel\r\n          },\r\n          {\r\n            id: 'engineeringDataAnchor',\r\n            anchor: this.engineeringDataEltRef,\r\n            label: engineeringDataLabel\r\n          },\r\n          {\r\n            id: 'fleetManagementAnchor',\r\n            anchor: this.fleetManagementEltRef,\r\n            label: fleetManagementLabel\r\n          },\r\n          {\r\n            id: 'maintenanceOperationsAnchor',\r\n            anchor: this.maintenanceOperationsEltRef,\r\n            label: maintenanceOperationsLabel\r\n          }\r\n        ];\r\n\r\n        if (this.ipList && this.ipList.length > 0) {\r\n          this.toc.push({\r\n            id: 'installationParametersAnchor',\r\n            anchor: this.installationParametersEltRef,\r\n            label: installationParametersLabel\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  public addPropertyValue() {\r\n    const bidoPropertiesValueDTO: BidoPropertiesValueDTO = {\r\n      isStandard: false,\r\n      propertiesKey: undefined,\r\n      propertiesValue: undefined,\r\n      propertiesId: SettingsFormComponent.AEROWEB_CONFIG_PROPERTY_ID\r\n    };\r\n    this.propertyValuesTableDataSource.addData([bidoPropertiesValueDTO]);\r\n  }\r\n\r\n  public deleteSelectedPropertyValue() {\r\n    const partialMessageKey = 'global.deleteConfirmationMsg';\r\n\r\n    this.confirmationService.confirmDelete({\r\n      messageKey: partialMessageKey,\r\n      accept: () => {\r\n        this.propertyValuesTableDataSource.deleteDataSelection();\r\n      }\r\n    });\r\n  }\r\n\r\n  public disablePropertyTypeDeleteButton(): boolean {\r\n    let result: boolean;\r\n\r\n    if (this.propertyValuesTableDataSource.dataSelectionCount === 0) {\r\n      result = true;\r\n    } else {\r\n      const properties: BidoPropertiesValueDTO[] = this.propertyValuesTableDataSource.dataSelection.filter(\r\n        (value) => value.isStandard\r\n      );\r\n      result = properties.length === 0 ? false : true;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\nimport { TableModule as PrimeNgTableModule } from 'primeng/table';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\nimport { AngularCommonSharedModule } from '../../../shared/angular-common-shared.module';\r\nimport { AngularGenericTemplatesSharedModule } from '../../../shared/angular-generic-templates-shared-module';\r\nimport { AppCommonSharedModule } from '../../../shared/app-common-shared.module';\r\nimport { ComponentSidebarModule } from '../../../shared/components/component-sidebar/component-sidebar.mdule';\r\nimport { DialogStatusModule } from '../../../shared/components/dialog-status/dialog-status.module';\r\nimport { DialogTableModule } from '../../../shared/components/dialog-table/dialog-table.module';\r\nimport { DynamicAttributesModule } from '../../../shared/components/dynamic-attributes/dynamic-attributes.module';\r\nimport { ManageSearchCriteriaModule } from '../../../shared/components/manage-search-criteria/manage-search-criteria.module';\r\nimport { ModalModule } from '../../../shared/components/modal/modal.module';\r\nimport { TableModule } from '../../../shared/components/table/table.module';\r\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\r\n\r\nimport { SettingsFormComponent } from './form/settings-form.component';\r\nimport { SettingsFormService } from './form/settings-form.service';\r\n\r\n/******************************************************************************\r\n * Modules\r\n *************************************************************************** */\r\n\r\nconst EXTERNAL_MODULES = [\r\n  CalendarModule,\r\n  CheckboxModule,\r\n  DropdownModule,\r\n  FileUploadModule,\r\n  InputTextareaModule,\r\n  PrimeNgTableModule,\r\n  TooltipModule\r\n];\r\n\r\nconst INTERNAL_MODULES = [\r\n  ComponentSidebarModule,\r\n  DialogTableModule,\r\n  DialogStatusModule,\r\n  DynamicAttributesModule,\r\n  ModalModule,\r\n  TableModule\r\n];\r\n\r\n/******************************************************************************\r\n * Components\r\n *************************************************************************** */\r\n\r\nconst COMPONENTS = [];\r\n\r\nconst DYNAMIC_COMPONENTS = [SettingsFormComponent];\r\n\r\n/******************************************************************************\r\n * Services\r\n *************************************************************************** */\r\n\r\nconst SERVICES = [SettingsFormService];\r\n\r\n@NgModule({\r\n  declarations: [...COMPONENTS, ...DYNAMIC_COMPONENTS],\r\n  imports: [\r\n    AngularCommonSharedModule,\r\n    AngularGenericTemplatesSharedModule,\r\n    AppCommonSharedModule,\r\n    DynamicComponentLoaderModule.forChild(DYNAMIC_COMPONENTS),\r\n    ManageSearchCriteriaModule,\r\n    ...EXTERNAL_MODULES,\r\n    ...INTERNAL_MODULES\r\n  ],\r\n  providers: [...SERVICES]\r\n})\r\nexport class SettingsModule {}\r\n","module.exports = \"<a-modal class=\\\"aw-modal\\\" [(visible)]=\\\"display\\\">\\r\\n  <a-header>\\r\\n    <div class=\\\"modal-title\\\">{{ getComponentName() + \\\".title\\\" | translate }}</div>\\r\\n  </a-header>\\r\\n\\r\\n  <a-content>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".statusState\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <p-dropdown\\r\\n          class=\\\"aw-dropdown fixed-width\\\"\\r\\n          [options]=\\\"statusList\\\"\\r\\n          [(ngModel)]=\\\"item.statusState\\\"\\r\\n          [showClear]=\\\"true\\\"\\r\\n          placeholder=\\\"&nbsp;\\\"\\r\\n          [disabled]=\\\"!isStatusEditable\\\"\\r\\n          appendTo=\\\"body\\\"\\r\\n        ></p-dropdown>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".statusDate\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <p-calendar\\r\\n          showButtonBar=\\\"true\\\"\\r\\n          [monthNavigator]=\\\"true\\\"\\r\\n          [yearNavigator]=\\\"true\\\"\\r\\n          [yearRange]=\\\"sessionService.calendarYearRange\\\"\\r\\n          class=\\\"aw-calendar\\\"\\r\\n          [dateFormat]=\\\"sessionService.dateFormatPrimeNG\\\"\\r\\n          [locale]=\\\"sessionService.calendarFormat\\\"\\r\\n          [(ngModel)]=\\\"item.statusDate\\\"\\r\\n          [disabled]=\\\"true\\\"\\r\\n          [showTime]=\\\"true\\\"\\r\\n          appendTo=\\\"body\\\"\\r\\n        ></p-calendar>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".statusUser\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <input class=\\\"aw-input\\\" type=\\\"text\\\" [(ngModel)]=\\\"item.statusUser\\\" [disabled]=\\\"true\\\" />\\r\\n      </div>\\r\\n    </div>\\r\\n  </a-content>\\r\\n  <a-footer>\\r\\n    <button type=\\\"button\\\" mat-raised-button (click)=\\\"closeDialog()\\\">{{ \\\"global.close\\\" | translate }}</button>\\r\\n  </a-footer>\\r\\n</a-modal>\\r\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { DialogComponent } from '../../../shared/types/dialog-component';\r\nimport { ComponentOpenMode } from '../../enums/component-open-mode.enum';\r\nimport { MessageService } from '../../services/message.service';\r\nimport { PropertiesService } from '../../services/properties.service';\r\nimport { SessionService } from '../../services/session.service';\r\nimport { LabelValue } from '../../types/label-value.interface';\r\n\r\n@Component({\r\n  selector: 'aw-dialog-status',\r\n  templateUrl: './dialog-status.component.html'\r\n})\r\nexport class DialogStatusComponent<T> extends DialogComponent implements OnInit {\r\n  @Input() public item: T;\r\n\r\n  @Input() public itemId: string;\r\n\r\n  @Input('isStatusEditable') public isStatusEditable: boolean;\r\n\r\n  @Input('isObjectTypeOfBireSbDTO') public readonly isObjectTypeOfBireSbDTO: boolean;\r\n\r\n  @Input('isObjectTypeOfBireEvolutionDTO') public readonly isObjectTypeOfBireEvolutionDTO: boolean;\r\n\r\n  @Input('isObjectTypeOfBireMaintenancePlanDTO') public readonly isObjectTypeOfBireMaintenancePlanDTO: boolean;\r\n\r\n  @Input('isSapSession') private readonly isSapSession: boolean;\r\n\r\n  public statusList: LabelValue<string>[];\r\n\r\n  public readonly componentId: string;\r\n\r\n  public constructor(\r\n    public readonly sessionService: SessionService,\r\n    private readonly propertiesService: PropertiesService,\r\n    private readonly messageService: MessageService\r\n  ) {\r\n    super(ComponentOpenMode.Write, 'DialogStatusComponent');\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.loadStatusList();\r\n  }\r\n\r\n  public close(): void {\r\n    this.display = false;\r\n  }\r\n\r\n  private loadStatusList(): void {\r\n    const statusState = 'statusState';\r\n    this.propertiesService\r\n      .getObjectStatusList(\r\n        this.isObjectTypeOfBireSbDTO,\r\n        this.isObjectTypeOfBireEvolutionDTO,\r\n        this.isObjectTypeOfBireMaintenancePlanDTO,\r\n        this.item[statusState],\r\n        this.isSapSession\r\n      )\r\n      .subscribe(\r\n        (result) => {\r\n          this.statusList = result;\r\n        },\r\n        () => {\r\n          this.messageService.showErrorMessage(this.getTranslateKey('errorOnLoadStatusList'));\r\n        }\r\n      );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\n\r\nimport { AngularCommonSharedModule } from '../../angular-common-shared.module';\r\nimport { AngularGenericTemplatesSharedModule } from '../../angular-generic-templates-shared-module';\r\nimport { AppCommonSharedModule } from '../../app-common-shared.module';\r\nimport { ModalModule } from '../modal/modal.module';\r\n\r\nimport { DialogStatusComponent } from './dialog-status.component';\r\n\r\n/******************************************************************************\r\n * Modules\r\n *************************************************************************** */\r\n\r\nconst EXTERNAL_MODULES = [CalendarModule, DropdownModule];\r\n\r\nconst INTERNAL_MODULES = [ModalModule];\r\n\r\n/******************************************************************************\r\n * Components\r\n *************************************************************************** */\r\n\r\nconst COMPONENTS = [DialogStatusComponent];\r\n\r\n@NgModule({\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n  imports: [\r\n    AngularCommonSharedModule,\r\n    AngularGenericTemplatesSharedModule,\r\n    AppCommonSharedModule,\r\n    ...EXTERNAL_MODULES,\r\n    ...INTERNAL_MODULES\r\n  ]\r\n})\r\nexport class DialogStatusModule {}\r\n"],"sourceRoot":""}