{"version":3,"sources":["webpack:///./node_modules/primeng/components/inputtextarea/inputtextarea.js","webpack:///./node_modules/primeng/components/keyfilter/keyfilter.js","webpack:///./node_modules/primeng/inputtextarea.js","webpack:///./node_modules/primeng/keyfilter.js","webpack:///./src/app/main/administration/contact/contact.module.ts","webpack:///./src/app/main/administration/contact/form/contact-form.component.html","webpack:///./src/app/main/administration/contact/form/contact-form.component.ts","webpack:///./src/app/main/administration/contact/form/contact-form.service.ts","webpack:///./src/app/main/administration/contact/search/contact-search.component.html","webpack:///./src/app/main/administration/contact/search/contact-search.component.ts","webpack:///./src/app/main/administration/contact/search/contact-search.service.ts","webpack:///./src/app/shared/components/dialog-status/dialog-status.component.html","webpack:///./src/app/shared/components/dialog-status/dialog-status.component.ts","webpack:///./src/app/shared/components/dialog-status/dialog-status.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,cAAc,mBAAO,CAAC,oEAAgB;AACtC,eAAe,mBAAO,CAAC,uEAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,yC;;;;;;;;;;;;ACrHa;AACb;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,eAAe,mBAAO,CAAC,uEAAiB;AACxC,mBAAmB,mBAAO,CAAC,8EAAmB;AAC9C,cAAc,mBAAO,CAAC,oEAAgB;AACtC;AACA;AACA,gDAAgD,kBAAkB,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,qC;;;;;;;;;;;;AC/KA;AACa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,kHAA0C,G;;;;;;;;;;;;ACN3D;AACa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,kGAAkC,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNV;AACS;AACU;AACR;AACc;AAClB;AAEyC;AACqB;AAC7B;AAC4C;AAC1B;AAC0B;AACjD;AACA;AACkC;AAEzC;AACJ;AACU;AACJ;AAEvE;;+EAE+E;AAE/E,IAAM,gBAAgB,GAAG,CAAC,+DAAc,EAAE,yEAAmB,EAAE,iEAAe,EAAE,yDAAkB,EAAE,6DAAa,CAAC,CAAC;AAEnH,IAAM,gBAAgB,GAAG,CAAC,kIAA0B,EAAE,yGAAkB,EAAE,kFAAW,EAAE,kFAAW,CAAC,CAAC;AAEpG;;+EAE+E;AAE/E,IAAM,kBAAkB,GAAG,CAAC,kFAAoB,EAAE,wFAAsB,CA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","file":"administration-contact-contact-module.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar common_1 = require(\"@angular/common\");\nvar InputTextarea = /** @class */ (function () {\n    function InputTextarea(el, ngModel) {\n        this.el = el;\n        this.ngModel = ngModel;\n        this.onResize = new core_1.EventEmitter();\n    }\n    InputTextarea.prototype.ngDoCheck = function () {\n        this.updateFilledState();\n        if (this.autoResize) {\n            this.resize();\n        }\n    };\n    //To trigger change detection to manage ui-state-filled for material labels when there is no value binding\n    InputTextarea.prototype.onInput = function (e) {\n        this.updateFilledState();\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.updateFilledState = function () {\n        this.filled = (this.el.nativeElement.value && this.el.nativeElement.value.length) || (this.ngModel && this.ngModel.model);\n    };\n    InputTextarea.prototype.onFocus = function (e) {\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.onBlur = function (e) {\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.resize = function (event) {\n        this.el.nativeElement.style.height = this.el.nativeElement.scrollHeight + 'px';\n        if (parseFloat(this.el.nativeElement.style.height) >= parseFloat(this.el.nativeElement.style.maxHeight)) {\n            this.el.nativeElement.style.overflowY = \"scroll\";\n            this.el.nativeElement.style.height = this.el.nativeElement.style.maxHeight;\n        }\n        else {\n            this.el.nativeElement.style.overflow = \"hidden\";\n        }\n        this.onResize.emit(event || {});\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], InputTextarea.prototype, \"autoResize\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], InputTextarea.prototype, \"onResize\", void 0);\n    __decorate([\n        core_1.HostListener('input', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onInput\", null);\n    __decorate([\n        core_1.HostListener('focus', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onFocus\", null);\n    __decorate([\n        core_1.HostListener('blur', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onBlur\", null);\n    InputTextarea = __decorate([\n        core_1.Directive({\n            selector: '[pInputTextarea]',\n            host: {\n                '[class.ui-inputtext]': 'true',\n                '[class.ui-corner-all]': 'true',\n                '[class.ui-inputtextarea-resizable]': 'autoResize',\n                '[class.ui-state-default]': 'true',\n                '[class.ui-widget]': 'true',\n                '[class.ui-state-filled]': 'filled'\n            }\n        }),\n        __param(1, core_1.Optional()),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef, forms_1.NgModel])\n    ], InputTextarea);\n    return InputTextarea;\n}());\nexports.InputTextarea = InputTextarea;\nvar InputTextareaModule = /** @class */ (function () {\n    function InputTextareaModule() {\n    }\n    InputTextareaModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule],\n            exports: [InputTextarea],\n            declarations: [InputTextarea]\n        })\n    ], InputTextareaModule);\n    return InputTextareaModule;\n}());\nexports.InputTextareaModule = InputTextareaModule;\n//# sourceMappingURL=inputtextarea.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar forms_1 = require(\"@angular/forms\");\nexports.KEYFILTER_VALIDATOR = {\n    provide: forms_1.NG_VALIDATORS,\n    useExisting: core_1.forwardRef(function () { return KeyFilter; }),\n    multi: true\n};\nvar KeyFilter = /** @class */ (function () {\n    function KeyFilter(el) {\n        this.el = el;\n    }\n    KeyFilter_1 = KeyFilter;\n    Object.defineProperty(KeyFilter.prototype, \"pattern\", {\n        get: function () {\n            return this._pattern;\n        },\n        set: function (_pattern) {\n            this._pattern = _pattern;\n            this.regex = KeyFilter_1.DEFAULT_MASKS[this._pattern] || this._pattern;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    KeyFilter.prototype.isNavKeyPress = function (e) {\n        var k = e.keyCode;\n        k = domhandler_1.DomHandler.getBrowser().safari ? (KeyFilter_1.SAFARI_KEYS[k] || k) : k;\n        return (k >= 33 && k <= 40) || k == KeyFilter_1.KEYS.RETURN || k == KeyFilter_1.KEYS.TAB || k == KeyFilter_1.KEYS.ESC;\n    };\n    ;\n    KeyFilter.prototype.isSpecialKey = function (e) {\n        var k = e.keyCode;\n        var c = e.charCode;\n        return k == 9 || k == 13 || k == 27 || k == 16 || k == 17 || (k >= 18 && k <= 20) ||\n            (domhandler_1.DomHandler.getBrowser().opera && !e.shiftKey && (k == 8 || (k >= 33 && k <= 35) || (k >= 36 && k <= 39) || (k >= 44 && k <= 45)));\n    };\n    KeyFilter.prototype.getKey = function (e) {\n        var k = e.keyCode || e.charCode;\n        return domhandler_1.DomHandler.getBrowser().safari ? (KeyFilter_1.SAFARI_KEYS[k] || k) : k;\n    };\n    KeyFilter.prototype.getCharCode = function (e) {\n        return e.charCode || e.keyCode || e.which;\n    };\n    ;\n    KeyFilter.prototype.onKeyPress = function (e) {\n        if (this.pValidateOnly) {\n            return;\n        }\n        var browser = domhandler_1.DomHandler.getBrowser();\n        if (e.ctrlKey || e.altKey) {\n            return;\n        }\n        var k = this.getKey(e);\n        if (k == 13) {\n            return;\n        }\n        if (browser.mozilla && (this.isNavKeyPress(e) || k == KeyFilter_1.KEYS.BACKSPACE || (k == KeyFilter_1.KEYS.DELETE && e.charCode == 0))) {\n            return;\n        }\n        var c = this.getCharCode(e);\n        var cc = String.fromCharCode(c);\n        var ok = true;\n        if (browser.mozilla && (this.isSpecialKey(e) || !cc)) {\n            return;\n        }\n        ok = this.regex.test(cc);\n        if (!ok) {\n            e.preventDefault();\n        }\n    };\n    KeyFilter.prototype.onPaste = function (e) {\n        var clipboardData = e.clipboardData || window.clipboardData.getData('text');\n        if (clipboardData) {\n            var pastedText = clipboardData;\n            if (!this.regex.test(pastedText)) {\n                e.preventDefault();\n            }\n        }\n    };\n    KeyFilter.prototype.validate = function (c) {\n        if (this.pValidateOnly) {\n            var value = this.el.nativeElement.value;\n            if (value && !this.regex.test(value)) {\n                return {\n                    validatePattern: false\n                };\n            }\n        }\n    };\n    var KeyFilter_1;\n    KeyFilter.DEFAULT_MASKS = {\n        pint: /[\\d]/,\n        'int': /[\\d\\-]/,\n        pnum: /[\\d\\.]/,\n        money: /[\\d\\.\\s,]/,\n        num: /[\\d\\-\\.]/,\n        hex: /[0-9a-f]/i,\n        email: /[a-z0-9_\\.\\-@]/i,\n        alpha: /[a-z_]/i,\n        alphanum: /[a-z0-9_]/i\n    };\n    KeyFilter.KEYS = {\n        TAB: 9,\n        RETURN: 13,\n        ESC: 27,\n        BACKSPACE: 8,\n        DELETE: 46\n    };\n    KeyFilter.SAFARI_KEYS = {\n        63234: 37,\n        63235: 39,\n        63232: 38,\n        63233: 40,\n        63276: 33,\n        63277: 34,\n        63272: 46,\n        63273: 36,\n        63275: 35 // end\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], KeyFilter.prototype, \"pValidateOnly\", void 0);\n    __decorate([\n        core_1.Input('pKeyFilter'),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], KeyFilter.prototype, \"pattern\", null);\n    __decorate([\n        core_1.HostListener('keypress', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [KeyboardEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], KeyFilter.prototype, \"onKeyPress\", null);\n    __decorate([\n        core_1.HostListener('paste', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], KeyFilter.prototype, \"onPaste\", null);\n    KeyFilter = KeyFilter_1 = __decorate([\n        core_1.Directive({\n            selector: '[pKeyFilter]',\n            providers: [exports.KEYFILTER_VALIDATOR]\n        }),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef])\n    ], KeyFilter);\n    return KeyFilter;\n}());\nexports.KeyFilter = KeyFilter;\nvar KeyFilterModule = /** @class */ (function () {\n    function KeyFilterModule() {\n    }\n    KeyFilterModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule],\n            exports: [KeyFilter],\n            declarations: [KeyFilter]\n        })\n    ], KeyFilterModule);\n    return KeyFilterModule;\n}());\nexports.KeyFilterModule = KeyFilterModule;\n//# sourceMappingURL=keyfilter.js.map","/* Shorthand */\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./components/inputtextarea/inputtextarea\"));","/* Shorthand */\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./components/keyfilter/keyfilter\"));","import { NgModule } from '@angular/core';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\nimport { KeyFilterModule } from 'primeng/keyfilter';\r\nimport { TableModule as PrimeNgTableModule } from 'primeng/table';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\nimport { AngularCommonSharedModule } from '../../../shared/angular-common-shared.module';\r\nimport { AngularGenericTemplatesSharedModule } from '../../../shared/angular-generic-templates-shared-module';\r\nimport { AppCommonSharedModule } from '../../../shared/app-common-shared.module';\r\nimport { DialogSearchCustomerModule } from '../../../shared/components/dialog-search-customer/dialog-search-customer.module';\r\nimport { DialogStatusModule } from '../../../shared/components/dialog-status/dialog-status.module';\r\nimport { ManageSearchCriteriaModule } from '../../../shared/components/manage-search-criteria/manage-search-criteria.module';\r\nimport { ModalModule } from '../../../shared/components/modal/modal.module';\r\nimport { TableModule } from '../../../shared/components/table/table.module';\r\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\r\n\r\nimport { ContactFormComponent } from './form/contact-form.component';\r\nimport { ContactFormService } from './form/contact-form.service';\r\nimport { ContactSearchComponent } from './search/contact-search.component';\r\nimport { ContactSearchService } from './search/contact-search.service';\r\n\r\n/******************************************************************************\r\n * Modules\r\n *************************************************************************** */\r\n\r\nconst EXTERNAL_MODULES = [CheckboxModule, InputTextareaModule, KeyFilterModule, PrimeNgTableModule, TooltipModule];\r\n\r\nconst INTERNAL_MODULES = [DialogSearchCustomerModule, DialogStatusModule, ModalModule, TableModule];\r\n\r\n/******************************************************************************\r\n * Components\r\n *************************************************************************** */\r\n\r\nconst DYNAMIC_COMPONENTS = [ContactFormComponent, ContactSearchComponent];\r\n\r\n/******************************************************************************\r\n * Services\r\n *************************************************************************** */\r\n\r\nconst SERVICES = [ContactFormService, ContactSearchService];\r\n\r\n@NgModule({\r\n  declarations: [...DYNAMIC_COMPONENTS],\r\n  imports: [\r\n    AngularCommonSharedModule,\r\n    AngularGenericTemplatesSharedModule,\r\n    AppCommonSharedModule,\r\n    ManageSearchCriteriaModule,\r\n    DynamicComponentLoaderModule.forChild(DYNAMIC_COMPONENTS),\r\n    ...EXTERNAL_MODULES,\r\n    ...INTERNAL_MODULES\r\n  ],\r\n  providers: [...SERVICES]\r\n})\r\nexport class ContactModule {}\r\n","module.exports = \"<div class=\\\"page-header\\\">\\r\\n  <div class=\\\"page-info\\\">\\r\\n    <div>\\r\\n      <div class=\\\"page-title\\\">\\r\\n        {{ \\\"transaction.\\\" + componentData.componentId | translate }}\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"page-subtitle\\\">\\r\\n        <div *ngIf=\\\"!isCreateOpenMode && componentData && componentData.objectId\\\" class=\\\"page-subtitle\\\">\\r\\n          - {{ serializationService.deserialize(componentData.objectId)[\\\"contactName\\\"] }}\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"page-actions\\\">\\r\\n    <button *ngIf=\\\"isReadOpenMode && hasUpdateAccessRight\\\" type=\\\"button\\\" mat-raised-button (click)=\\\"editContact()\\\">\\r\\n      {{ \\\"global.edit\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      *ngIf=\\\"!isReadOpenMode && !isCreateOpenMode\\\"\\r\\n      type=\\\"button\\\"\\r\\n      mat-raised-button\\r\\n      color=\\\"warn\\\"\\r\\n      (click)=\\\"cancelContact()\\\"\\r\\n    >\\r\\n      {{ \\\"global.cancel\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      *ngIf=\\\"!isReadOpenMode\\\"\\r\\n      class=\\\"btn-with-spinner\\\"\\r\\n      color=\\\"primary\\\"\\r\\n      type=\\\"button\\\"\\r\\n      mat-raised-button\\r\\n      (click)=\\\"saveContact()\\\"\\r\\n    >\\r\\n      <span class=\\\"lds-hourglass\\\" *ngIf=\\\"showSaveSpinner\\\"></span>\\r\\n      {{ \\\"global.save\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      mat-icon-button\\r\\n      class=\\\"mat-elevation-z1\\\"\\r\\n      matTooltip=\\\"{{ 'global.showAllActionTooltip' | translate }}\\\"\\r\\n      matTooltipPosition=\\\"above\\\"\\r\\n      aria-label=\\\"Show all actions\\\"\\r\\n      [matMenuTriggerFor]=\\\"actions\\\"\\r\\n    >\\r\\n      <mat-icon>more_horiz</mat-icon>\\r\\n    </button>\\r\\n    <mat-menu #actions=\\\"matMenu\\\">\\r\\n      <button mat-menu-item (click)=\\\"reloadContact()\\\">{{ \\\"global.refresh\\\" | translate }}</button>\\r\\n      <button mat-menu-item (click)=\\\"openStatusUpdatesPopup()\\\">{{ \\\"global.updates\\\" | translate }}</button>\\r\\n      <button mat-menu-item (click)=\\\"updateFavoriteState()\\\">\\r\\n        {{ (isFavoriteEntry ? \\\"page.removeFromFavorites\\\" : \\\"page.addToFavorites\\\") | translate }}\\r\\n      </button>\\r\\n    </mat-menu>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"page-wrapper\\\">\\r\\n  <div class=\\\"page-container\\\">\\r\\n    <div class=\\\"page-content\\\">\\r\\n      <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"grid-cell--12\\\">\\r\\n          <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n            <div class=\\\"grid-cell-header\\\">\\r\\n              <div class=\\\"grid-cell-title-container\\\">\\r\\n                <h3 class=\\\"grid-cell-title\\\">{{ getComponentName() + \\\".contact\\\" | translate }}</h3>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"grid-cell-content\\\">\\r\\n              <div class=\\\"column\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".name\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.contactName\\\"\\r\\n                        disabled=\\\"true\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\" [ngClass]=\\\"{ required: !isReadOpenMode }\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".firstName\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.firstName\\\"\\r\\n                        [disabled]=\\\"componentData.objectId || isReadOpenMode\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\" [ngClass]=\\\"{ required: !isReadOpenMode }\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".lastName\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.lastName\\\"\\r\\n                        [disabled]=\\\"componentData.objectId || isReadOpenMode\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"form-group\\\" [ngClass]=\\\"{ required: !isReadOpenMode }\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".businessPartner\\\" | translate }}</label>\\r\\n\\r\\n                    <div\\r\\n                      class=\\\"form-control form-control-with-modal\\\"\\r\\n                      [ngClass]=\\\"{ disabled: isReadOpenMode || isWriteOpenMode }\\\"\\r\\n                    >\\r\\n                      <div class=\\\"form-control-data\\\" (click)=\\\"openCustomerDialog()\\\">\\r\\n                        {{ contactListOutputDTO.customerCode }}\\r\\n                        <span *ngIf=\\\"businessPartnerName\\\">({{ businessPartnerName }})</span>\\r\\n                      </div>\\r\\n\\r\\n                      <div *ngIf=\\\"contactListOutputDTO.customerCode && isCreateOpenMode\\\" class=\\\"btn-clear-wrapper\\\">\\r\\n                        <i\\r\\n                          class=\\\"ui-dropdown-clear-icon pi pi-times aw-icon btn-clear\\\"\\r\\n                          aria-hidden=\\\"true\\\"\\r\\n                          (click)=\\\"resetCustomerCode()\\\"\\r\\n                        ></i>\\r\\n                      </div>\\r\\n                      <div *ngIf=\\\"isCreateOpenMode\\\" class=\\\"btn-search-wrapper\\\">\\r\\n                        <i\\r\\n                          class=\\\"fa fa-fw fa-search aw-icon btn-search\\\"\\r\\n                          aria-hidden=\\\"true\\\"\\r\\n                          (click)=\\\"openCustomerDialog()\\\"\\r\\n                        ></i>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".primaryContact\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <p-checkbox\\r\\n                        class=\\\"aw-checkbox\\\"\\r\\n                        binary=\\\"true\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.primaryContact\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      ></p-checkbox>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".title\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.title\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                        maxlength=\\\"10\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".officePhone\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.phone1\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".mobilePhone\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.phone2\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".eMail\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.email\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".address\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <textarea\\r\\n                        class=\\\"aw-textarea\\\"\\r\\n                        [rows]=\\\"3\\\"\\r\\n                        pInputTextarea\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.address\\\"\\r\\n                      ></textarea>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".town\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.town\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".country\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.country\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".fax\\\" | translate }}</label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"contactListOutputDTO.fax\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<aw-dialog-search-customer\\r\\n  *ngIf=\\\"showCustomerDialog\\\"\\r\\n  [(display)]=\\\"showCustomerDialog\\\"\\r\\n  [customer-code]=\\\"contactListOutputDTO.customerCode\\\"\\r\\n  (onSelected)=\\\"onSelectedCustomer($event)\\\"\\r\\n></aw-dialog-search-customer>\\r\\n<aw-dialog-status\\r\\n  *ngIf=\\\"showStatusUpdatesPopup\\\"\\r\\n  [isStatusEditable]=\\\"false\\\"\\r\\n  [item]=\\\"contactListOutputDTO\\\"\\r\\n  [itemId]=\\\"contactListOutputDTO.contactName\\\"\\r\\n  [(display)]=\\\"showStatusUpdatesPopup\\\"\\r\\n></aw-dialog-status>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { ComponentConstants } from '../../../../shared/constants/component-constants';\r\nimport { ComponentOpenMode } from '../../../../shared/enums/component-open-mode.enum';\r\nimport { FavoriteService } from '../../../../shared/services/favorite.service';\r\nimport { LoaderService } from '../../../../shared/services/loader.service';\r\nimport { MessageService } from '../../../../shared/services/message.service';\r\nimport { SerializationService } from '../../../../shared/services/serialization.service';\r\nimport { TabService } from '../../../../shared/services/tab.service';\r\nimport { ContactListOutputDTO } from '../../../../shared/types/api-output-types/administration-contact/contact-list-output-dto.interface';\r\nimport { SaveContactInput } from '../../../../shared/types/api-types/save-contact-input-dto.interface';\r\nimport { FormPageComponent } from '../../../../shared/types/form-page-component';\r\nimport { PageComponentData } from '../../../../shared/types/page-component-data.interface';\r\nimport { ContactSearchService } from '../search/contact-search.service';\r\n\r\nimport { ContactFormService } from './contact-form.service';\r\n\r\n@Component({\r\n  selector: 'aw-contact-form',\r\n  templateUrl: './contact-form.component.html'\r\n})\r\nexport class ContactFormComponent extends FormPageComponent<PageComponentData> implements OnInit {\r\n  public contactListOutputDTO: ContactListOutputDTO;\r\n  public showCustomerDialog: boolean;\r\n  public businessPartnerName: string | undefined; // TODO: not in DTO\r\n\r\n  // For object status/updates popup\r\n  public showStatusUpdatesPopup: boolean;\r\n  public showSaveSpinner: boolean;\r\n\r\n  public constructor(\r\n    favoriteService: FavoriteService,\r\n    loaderService: LoaderService,\r\n    messageService: MessageService,\r\n    serializationService: SerializationService,\r\n    tabService: TabService,\r\n    private readonly contactFormService: ContactFormService,\r\n    private readonly contactSearchService: ContactSearchService\r\n  ) {\r\n    super(ComponentOpenMode.Read, favoriteService, loaderService, messageService, serializationService, tabService);\r\n    // Historic popup\r\n    this.showStatusUpdatesPopup = false;\r\n\r\n    this.contactListOutputDTO = {};\r\n    this.showCustomerDialog = false;\r\n  }\r\n\r\n  public getComponentName(): string {\r\n    return ComponentConstants.ADM_CONTACT_FORM;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    super.ngOnInit();\r\n    if (!!this.componentData) {\r\n      this.updateOpenMode(this.componentData.openMode);\r\n\r\n      const context = !!this.componentData.objectId\r\n        ? this.serializationService.deserialize(this.componentData.objectId).contactName\r\n        : 'tab.createMode';\r\n      this.displayComponentContext(context, this.isCreateOpenMode);\r\n\r\n      this.loadContact();\r\n    }\r\n  }\r\n\r\n  public openCustomerDialog(): void {\r\n    if (this.isCreateOpenMode) {\r\n      this.showCustomerDialog = true;\r\n    } else {\r\n      this.showCustomerDialog = false;\r\n    }\r\n  }\r\n\r\n  /** Loading contact info */\r\n  private loadContact(): void {\r\n    if (!!this.componentData && !!this.componentData.objectId) {\r\n      const contactListOutput: ContactListOutputDTO = this.serializationService.deserialize(\r\n        this.componentData.objectId\r\n      );\r\n      const bidoContactDTO = {\r\n        customerCode: contactListOutput.customerCode,\r\n        contactName: contactListOutput.contactName\r\n      };\r\n\r\n      this.contactSearchService.findBidoContactBySearchCriteria(bidoContactDTO).subscribe((result) => {\r\n        this.contactListOutputDTO = result[0].bidoContactDTO;\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Edit Contact */\r\n  public editContact(): void {\r\n    this.updateOpenMode(ComponentOpenMode.Write);\r\n  }\r\n\r\n  private init(): void {\r\n    this.contactListOutputDTO = {};\r\n    this.businessPartnerName = undefined;\r\n  }\r\n\r\n  /** Refresh Screen */\r\n  public reloadContact(): void {\r\n    const bidoContactDTO = {\r\n      customerCode: this.contactListOutputDTO.customerCode,\r\n      contactName: this.contactListOutputDTO.contactName\r\n    };\r\n\r\n    this.contactSearchService.findBidoContactBySearchCriteria(bidoContactDTO).subscribe((result) => {\r\n      this.contactListOutputDTO = result[0].bidoContactDTO;\r\n    });\r\n  }\r\n\r\n  /** Cancel Changes */\r\n  public cancelContact(): void {\r\n    if (this.isWriteOpenMode) {\r\n      this.updateOpenMode(ComponentOpenMode.Read);\r\n      this.reloadContact();\r\n    } else {\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  /** Saving Contact */\r\n  public saveContact(): void {\r\n    if (this.validateContact()) {\r\n      const isUpdate = !!this.componentData && this.componentData.openMode === ComponentOpenMode.Create ? '' : 'update';\r\n\r\n      // TODO getting blank DTO\r\n      const contactDTO: ContactListOutputDTO = {\r\n        address: '',\r\n        businessPartner: '',\r\n        contactName: '',\r\n        country: '',\r\n        customerCode: '',\r\n        email: '',\r\n        fax: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        phone1: '',\r\n        phone2: '',\r\n        primaryContact: false,\r\n        statusDate: new Date(),\r\n        statusState: '',\r\n        statusUser: '',\r\n        title: '',\r\n        town: ''\r\n      };\r\n\r\n      for (const p in this.contactListOutputDTO) {\r\n        // tslint:disable-next-line:prefer-conditional-expression\r\n        if (this.contactListOutputDTO.hasOwnProperty(p)) {\r\n          if (p === 'email') {\r\n            contactDTO[p] = this.contactListOutputDTO[p];\r\n            contactDTO[p] = contactDTO.email;\r\n          } else {\r\n            contactDTO[p] = this.contactListOutputDTO[p];\r\n          }\r\n        }\r\n      }\r\n\r\n      const saveContactInput: SaveContactInput = {\r\n        bidoContactDTO: contactDTO,\r\n        isForUpdate: isUpdate\r\n      };\r\n\r\n      this.showSaveSpinner = true;\r\n      this.contactFormService.saveContact(saveContactInput).subscribe((result) => {\r\n        let messageKey = 'successOnUpdateContact';\r\n        if (!!this.componentData && isUpdate === '') {\r\n          messageKey = 'successOnSaveContact';\r\n          const bidoContactDTO = {\r\n            customerCode: this.contactListOutputDTO.customerCode,\r\n            contactName: `${this.contactListOutputDTO.firstName} ${this.contactListOutputDTO.lastName}`\r\n          };\r\n          this.componentData.objectId = this.serializationService.serialize(bidoContactDTO);\r\n          this.componentData.openMode = ComponentOpenMode.Read;\r\n        }\r\n        this.messageService.showSuccessMessage(this.getTranslateKey(messageKey));\r\n        this.ngOnInit();\r\n        this.showSaveSpinner = false;\r\n      });\r\n    } else {\r\n      this.messageService.showWarningMessage('global.warningOnMissingRequiredFields');\r\n      this.showSaveSpinner = false;\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  /** Validate Contact Form */\r\n  private validateContact(): boolean {\r\n    if (\r\n      !this.contactListOutputDTO.firstName ||\r\n      !this.contactListOutputDTO.lastName ||\r\n      !this.contactListOutputDTO.customerCode\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /** On selecting business partner */\r\n  public onSelectedCustomer(event): void {\r\n    this.contactListOutputDTO.customerCode = event.customerCode;\r\n    this.businessPartnerName = event.customerName;\r\n  }\r\n\r\n  public openStatusUpdatesPopup() {\r\n    this.showStatusUpdatesPopup = true;\r\n  }\r\n\r\n  public resetCustomerCode(): void {\r\n    this.contactListOutputDTO.customerCode = '';\r\n    this.businessPartnerName = undefined;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { FleetManagementApi } from '../../../../shared/api/fleet-management.api';\r\nimport { AbstractAwHttpService } from '../../../../shared/http/abstract-aw-http';\r\nimport { AppConfigService } from '../../../../shared/services/app-config.service';\r\nimport { SaveContactInput } from '../../../../shared/types/api-types/save-contact-input-dto.interface';\r\n\r\n@Injectable()\r\nexport class ContactFormService extends AbstractAwHttpService {\r\n  public constructor(\r\n    http: HttpClient,\r\n    appConfigService: AppConfigService,\r\n    private readonly fleetManagementApi: FleetManagementApi\r\n  ) {\r\n    super(http, appConfigService);\r\n  }\r\n\r\n  public saveContact(saveContactInput: SaveContactInput): Observable<void> {\r\n    return super.post<SaveContactInput, void>(this.fleetManagementApi.saveContact, saveContactInput);\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"page-header\\\">\\r\\n  <div class=\\\"page-info\\\">\\r\\n    <div>\\r\\n      <div class=\\\"page-title\\\">\\r\\n        {{ \\\"transaction.\\\" + componentData.componentId | translate }}\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"page-subtitle\\\">\\r\\n        <div class=\\\"page-subtitle\\\">- {{ \\\"page.searchPage\\\" | translate }}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"page-actions\\\">\\r\\n    <button type=\\\"button\\\" mat-raised-button (click)=\\\"openNewContact()\\\" *ngIf=\\\"hasUpdateAccessRight\\\">\\r\\n      {{ \\\"global.create\\\" | translate }}\\r\\n    </button>\\r\\n    <button\\r\\n      id=\\\"actions\\\"\\r\\n      mat-icon-button\\r\\n      class=\\\"mat-elevation-z1\\\"\\r\\n      matTooltip=\\\"{{ 'global.showAllActionTooltip' | translate }}\\\"\\r\\n      matTooltipPosition=\\\"above\\\"\\r\\n      aria-label=\\\"Show all actions\\\"\\r\\n      [matMenuTriggerFor]=\\\"actions\\\"\\r\\n    >\\r\\n      <mat-icon>more_horiz</mat-icon>\\r\\n    </button>\\r\\n\\r\\n    <mat-menu #actions=\\\"matMenu\\\">\\r\\n      <button id=\\\"favorites\\\" mat-menu-item (click)=\\\"updateFavoriteState()\\\">\\r\\n        {{ (isFavoriteEntry ? \\\"page.removeFromFavorites\\\" : \\\"page.addToFavorites\\\") | translate }}\\r\\n      </button>\\r\\n    </mat-menu>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"page-wrapper\\\">\\r\\n  <div class=\\\"page-container search-page-container\\\">\\r\\n    <div class=\\\"page-content\\\">\\r\\n      <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"grid-cell--12\\\">\\r\\n          <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n            <div class=\\\"grid-cell-header\\\">\\r\\n              <div class=\\\"grid-cell-title-container\\\">\\r\\n                <h3 class=\\\"grid-cell-title\\\">{{ \\\"global.search\\\" | translate }}</h3>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"grid-cell-content\\\">\\r\\n              <div class=\\\"column\\\">\\r\\n                <div class=\\\"row search-criteria-header\\\">\\r\\n                  <aw-manage-search-criteria\\r\\n                    [componentId]=\\\"CONTACT_SEARCH_CRITERIA_ID\\\"\\r\\n                    (onSelected)=\\\"loadSearchCriteria($event)\\\"\\r\\n                    (onSavedAsked)=\\\"saveSearchCriteriaAsked()\\\"\\r\\n                    [objectFromPage]=\\\"criteriaToSave\\\"\\r\\n                  ></aw-manage-search-criteria>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\"> {{ componentData.componentId + \\\".businessPartner\\\" | translate }} </label>\\r\\n                    <div class=\\\"form-control form-control-with-modal\\\" [ngClass]=\\\"{ disabled: isReadOpenMode }\\\">\\r\\n                      <div class=\\\"form-control-data\\\" (click)=\\\"openCustomerDialog()\\\">\\r\\n                        {{ bidoCustomerDTO.customerCode }}\\r\\n                        <span *ngIf=\\\"bidoCustomerDTO.customerName\\\">({{ bidoCustomerDTO.customerName }})</span>\\r\\n                      </div>\\r\\n\\r\\n                      <div *ngIf=\\\"bidoCustomerDTO.customerCode\\\" class=\\\"btn-clear-wrapper\\\">\\r\\n                        <i\\r\\n                          class=\\\"ui-dropdown-clear-icon pi pi-times aw-icon btn-clear\\\"\\r\\n                          aria-hidden=\\\"true\\\"\\r\\n                          (click)=\\\"resetCustomer()\\\"\\r\\n                        ></i>\\r\\n                      </div>\\r\\n                      <div class=\\\"btn-search-wrapper\\\">\\r\\n                        <i\\r\\n                          class=\\\"fa fa-fw fa-search aw-icon btn-search\\\"\\r\\n                          aria-hidden=\\\"true\\\"\\r\\n                          (click)=\\\"openCustomerDialog()\\\"\\r\\n                        ></i>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\" style=\\\"width: 20%\\\">\\r\\n                    <label class=\\\"form-label\\\"> {{ componentData.componentId + \\\".contactName\\\" | translate }} </label>\\r\\n\\r\\n                    <div class=\\\"form-control\\\"><input type=\\\"text\\\" class=\\\"aw-input\\\" [(ngModel)]=\\\"contactName\\\" /></div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"row search-criteria-footer\\\">\\r\\n                  <div class=\\\"search-actions\\\">\\r\\n                    <button\\r\\n                      type=\\\"button\\\"\\r\\n                      mat-raised-button\\r\\n                      class=\\\"btn-with-spinner\\\"\\r\\n                      color=\\\"primary\\\"\\r\\n                      (click)=\\\"search()\\\"\\r\\n                      appKeyPress\\r\\n                      [keyCode]=\\\"'Enter'\\\"\\r\\n                      (keyPress)=\\\"search()\\\"\\r\\n                    >\\r\\n                      <span *ngIf=\\\"isLoading\\\" class=\\\"lds-hourglass\\\"></span>\\r\\n                      {{ \\\"global.toSearch\\\" | translate }}\\r\\n                    </button>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"grid-cell--12\\\">\\r\\n          <div #resultsContainerAnchor class=\\\"grid-cell grid-cell--container\\\">\\r\\n            <!-- Contacts table -->\\r\\n\\r\\n            <div class=\\\"grid-cell-header\\\">\\r\\n              <div class=\\\"grid-cell-title-container\\\">\\r\\n                <h3 class=\\\"grid-cell-title\\\">\\r\\n                  {{ \\\"global.results\\\" | translate }}\\r\\n                  ({{ contactTableDataSource ? contactTableDataSource.dataCount : 0 }})\\r\\n                </h3>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"grid-cell-content\\\">\\r\\n              <a-table [dataSource]=\\\"contactTableDataSource\\\">\\r\\n                <ng-template tableActionsDef>\\r\\n                  <button\\r\\n                    *ngIf=\\\"hasManageAccessRight && contactTableDataSource.hasDataSelection\\\"\\r\\n                    type=\\\"button\\\"\\r\\n                    mat-raised-button\\r\\n                    color=\\\"warn\\\"\\r\\n                    (click)=\\\"deleteContacts()\\\"\\r\\n                  >\\r\\n                    {{ \\\"global.delete\\\" | translate }}\\r\\n                  </button>\\r\\n\\r\\n                  <button\\r\\n                    *ngIf=\\\"contactTableDataSource.hasDataSelection\\\"\\r\\n                    type=\\\"button\\\"\\r\\n                    mat-raised-button\\r\\n                    (click)=\\\"openSelectedContacts()\\\"\\r\\n                  >\\r\\n                    {{ \\\"global.open\\\" | translate }}\\r\\n                  </button>\\r\\n                </ng-template>\\r\\n              </a-table>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<aw-dialog-search-customer\\r\\n  *ngIf=\\\"showCustomerDialog\\\"\\r\\n  [(display)]=\\\"showCustomerDialog\\\"\\r\\n  [customer-code]=\\\"bidoCustomerDTO.customerCode\\\"\\r\\n  (onSelected)=\\\"onSelectedCustomer($event)\\\"\\r\\n></aw-dialog-search-customer>\\r\\n\"","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\n\r\nimport { DialogTableData } from '../../../../shared/components/dialog-table/types/dialog-table-data.interface';\r\nimport { ISearchCriteria } from '../../../../shared/components/manage-search-criteria/search-criteria.interface';\r\nimport { TableDataSource } from '../../../../shared/components/table/table-data-source';\r\nimport { AppConstants } from '../../../../shared/constants/app-constants';\r\nimport { ComponentConstants } from '../../../../shared/constants/component-constants';\r\nimport { ComponentOpenMode } from '../../../../shared/enums/component-open-mode.enum';\r\nimport { ConfirmationService } from '../../../../shared/services/confirmation.service';\r\nimport { FavoriteService } from '../../../../shared/services/favorite.service';\r\nimport { LoaderService } from '../../../../shared/services/loader.service';\r\nimport { MessageService } from '../../../../shared/services/message.service';\r\nimport { SerializationService } from '../../../../shared/services/serialization.service';\r\nimport { TabService } from '../../../../shared/services/tab.service';\r\nimport { ContactListOutputDTO } from '../../../../shared/types/api-output-types/administration-contact/contact-list-output-dto.interface';\r\nimport { BidoContactDTOId } from '../../../../shared/types/api-types/bido-contact-dto-id.interface';\r\nimport { BidoCustomerDTO } from '../../../../shared/types/api-types/bido-customer-dto.interface';\r\nimport { PageComponent } from '../../../../shared/types/page-component';\r\nimport { PageComponentData } from '../../../../shared/types/page-component-data.interface';\r\n\r\nimport { ContactSearchService } from './contact-search.service';\r\n\r\n@Component({\r\n  selector: 'aw-contact-search',\r\n  templateUrl: './contact-search.component.html'\r\n})\r\nexport class ContactSearchComponent extends PageComponent<PageComponentData> implements OnInit {\r\n  public contactTableDataSource: TableDataSource<ContactListOutputDTO>;\r\n  public showCustomerDialog: boolean;\r\n  public customerTableData: DialogTableData<BidoCustomerDTO>;\r\n  public bidoCustomerDTO: BidoCustomerDTO;\r\n  public contactName: string;\r\n  public filterTxt: string | undefined;\r\n  public isLoading: boolean;\r\n\r\n  public criteriaToSave: BidoCustomerDTO;\r\n  public criteriaName: string | undefined;\r\n\r\n  public readonly CONTACT_SEARCH_CRITERIA_ID: string = AppConstants.CONTACT_SEARCH_CRITERIA_ID;\r\n\r\n  /* HTML references ***********************************************************/\r\n\r\n  @ViewChild('resultsContainerAnchor')\r\n  public resultsContainerAnchor: ElementRef;\r\n\r\n  public constructor(\r\n    favoriteService: FavoriteService,\r\n    loaderService: LoaderService,\r\n    messageService: MessageService,\r\n    serializationService: SerializationService,\r\n    tabService: TabService,\r\n    private readonly contactSearchService: ContactSearchService,\r\n    private readonly confirmationService: ConfirmationService\r\n  ) {\r\n    super(ComponentOpenMode.Write, favoriteService, loaderService, messageService, serializationService, tabService);\r\n\r\n    this.showCustomerDialog = false;\r\n\r\n    this.initContactTableDataSource();\r\n  }\r\n\r\n  public getComponentName(): string {\r\n    return ComponentConstants.ADM_CONTACT_SEARCH;\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    super.ngOnInit();\r\n\r\n    this.bidoCustomerDTO = {};\r\n    this.isLoading = false;\r\n    this.displayComponentContext('global.search', true);\r\n  }\r\n\r\n  private initContactTableDataSource(): void {\r\n    this.contactTableDataSource = new TableDataSource({\r\n      allowMultiSelect: true,\r\n      columns: [\r\n        {\r\n          field: 'businessPartner',\r\n          translateKey: this.getTranslateKey('businessPartner')\r\n        },\r\n        {\r\n          field: 'contactName',\r\n          translateKey: this.getTranslateKey('contactName')\r\n        },\r\n        {\r\n          field: 'title',\r\n          translateKey: this.getTranslateKey('title')\r\n        },\r\n        {\r\n          field: 'phone1',\r\n          translateKey: this.getTranslateKey('phone1')\r\n        },\r\n        {\r\n          field: 'phone2',\r\n          translateKey: this.getTranslateKey('phone2')\r\n        }\r\n      ],\r\n      data: []\r\n    });\r\n  }\r\n\r\n  public loadSearchCriteria(event: ISearchCriteria): void {\r\n    const criteria: BidoCustomerDTO | undefined = event.criteria;\r\n    if (!criteria) {\r\n      this.resetSearchCriteria();\r\n\r\n      return;\r\n    }\r\n\r\n    this.criteriaName = event.name;\r\n    this.bidoCustomerDTO.customerCode = criteria.customerCode;\r\n    this.contactName = criteria.customerName as string;\r\n  }\r\n\r\n  public saveSearchCriteriaAsked(): void {\r\n    const criteriaToSave: BidoCustomerDTO = {\r\n      customerCode: this.bidoCustomerDTO.customerCode,\r\n      customerName: this.contactName\r\n    };\r\n\r\n    this.criteriaToSave = criteriaToSave;\r\n  }\r\n\r\n  /** Resetting Search Filters */\r\n  public resetSearchCriteria(): void {\r\n    this.bidoCustomerDTO = {};\r\n    this.contactName = '';\r\n  }\r\n\r\n  public openCustomerDialog(): void {\r\n    this.showCustomerDialog = true;\r\n  }\r\n\r\n  /** Getting Selected Business Partner */\r\n  public onSelectedCustomer(event): void {\r\n    this.bidoCustomerDTO = event;\r\n  }\r\n\r\n  /** Search Contact By Criteria */\r\n  public search(): void {\r\n    this.isLoading = true;\r\n    super.scrollToAnchor(this.resultsContainerAnchor);\r\n    this.contactTableDataSource.setData([]);\r\n    const bidoContactDTO = {\r\n      customerCode: this.bidoCustomerDTO.customerCode,\r\n      contactName: this.contactName\r\n    };\r\n\r\n    this.contactSearchService.findBidoContactBySearchCriteria(bidoContactDTO).subscribe((result) => {\r\n      this.isLoading = false;\r\n      this.renderContactTable(result);\r\n      this.contactTableDataSource.dataSelection = [];\r\n    });\r\n  }\r\n\r\n  /** Filling contact table */\r\n  private renderContactTable(result): void {\r\n    const contactListDTO: ContactListOutputDTO[] = [];\r\n    result.forEach((results) => {\r\n      results.bidoContactDTO.businessPartner = results.businessPartner;\r\n      contactListDTO.push(results.bidoContactDTO);\r\n    });\r\n\r\n    this.contactTableDataSource.setData(contactListDTO);\r\n    this.contactTableDataSource.update();\r\n  }\r\n\r\n  /** Create Event */\r\n  public openNewContact(): void {\r\n    this.openContacts(undefined, ComponentOpenMode.Create);\r\n  }\r\n\r\n  /** Open Selected Contact */\r\n  private openContacts(objectId: ContactListOutputDTO | undefined, openMode: ComponentOpenMode): void {\r\n    const data: PageComponentData = {\r\n      id: this.tabService.generateId(),\r\n      componentId: ComponentConstants.ADM_CONTACT_FORM,\r\n      openMode\r\n    };\r\n    if (!!objectId) {\r\n      data.objectId = this.serializationService.serialize(objectId);\r\n    }\r\n    const labelKey = 'transaction.' + data.componentId;\r\n    this.tabService.open(this.tabService.create(data, labelKey, true));\r\n  }\r\n\r\n  /** Open Contacts per screen */\r\n  public openSelectedContacts(): void {\r\n    this.contactTableDataSource.dataSelection.forEach((contact) => {\r\n      if (!!contact) {\r\n        this.openContacts(contact, ComponentOpenMode.Read);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Delete selected contacts */\r\n  public deleteContacts(): void {\r\n    const confirmMessageKey =\r\n      this.contactTableDataSource.dataSelectionCount > 1\r\n        ? 'confirmDeleteSelectedContact'\r\n        : 'confirmDeleteSelectedContacts';\r\n\r\n    this.confirmationService.confirmDelete({\r\n      messageKey: this.getTranslateKey(confirmMessageKey),\r\n      accept: () => {\r\n        const bidoContactDTOId: BidoContactDTOId[] = [];\r\n        this.contactTableDataSource.dataSelection.forEach((results) => {\r\n          if (!!results.contactName) {\r\n            const bidoContact: BidoContactDTOId = {\r\n              contactName: results.contactName\r\n            };\r\n            bidoContactDTOId.push(bidoContact);\r\n          } else {\r\n            super.throwUnboundLocalError('deleteContacts', 'results.contactName');\r\n          }\r\n        });\r\n\r\n        this.contactSearchService.deleteContacts(bidoContactDTOId).subscribe((result) => {\r\n          this.search();\r\n          this.messageService.showSuccessMessage(this.getTranslateKey('successOnDeleteContact'));\r\n        });\r\n\r\n        this.contactTableDataSource.dataSelection = [];\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Reset Table filter */\r\n  public resetFilter(): void {\r\n    this.filterTxt = undefined;\r\n  }\r\n\r\n  public resetCustomer(): void {\r\n    this.bidoCustomerDTO = {};\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { FleetManagementApi } from '../../../../shared/api/fleet-management.api';\r\nimport { AbstractAwHttpService } from '../../../../shared/http/abstract-aw-http';\r\nimport { AppConfigService } from '../../../../shared/services/app-config.service';\r\nimport { ContactListOutputDTO } from '../../../../shared/types/api-output-types/administration-contact/contact-list-output-dto.interface';\r\nimport { BidoContactDTOId } from '../../../../shared/types/api-types/bido-contact-dto-id.interface';\r\nimport { SearchResultsDTO } from '../../../../shared/types/api-types/search-results-dto.interface';\r\n\r\n@Injectable()\r\nexport class ContactSearchService extends AbstractAwHttpService {\r\n  public constructor(\r\n    http: HttpClient,\r\n    appConfigService: AppConfigService,\r\n    private readonly fleetManagementApi: FleetManagementApi\r\n  ) {\r\n    super(http, appConfigService);\r\n  }\r\n\r\n  public findBidoContactBySearchCriteria(criteria): Observable<ContactListOutputDTO> {\r\n    return super.post<Object, ContactListOutputDTO>(this.fleetManagementApi.findBidoContactBySearchCriteria, criteria);\r\n  }\r\n\r\n  public deleteContacts(criteria: BidoContactDTOId[]): Observable<SearchResultsDTO<ContactListOutputDTO>> {\r\n    return super.post<BidoContactDTOId[], SearchResultsDTO<ContactListOutputDTO>>(\r\n      this.fleetManagementApi.removeBidoContact,\r\n      criteria\r\n    );\r\n  }\r\n}\r\n","module.exports = \"<a-modal class=\\\"aw-modal\\\" [(visible)]=\\\"display\\\">\\r\\n  <a-header>\\r\\n    <div class=\\\"modal-title\\\">{{ getComponentName() + \\\".title\\\" | translate }}</div>\\r\\n  </a-header>\\r\\n\\r\\n  <a-content>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".statusState\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <p-dropdown\\r\\n          class=\\\"aw-dropdown fixed-width\\\"\\r\\n          [options]=\\\"statusList\\\"\\r\\n          [(ngModel)]=\\\"item.statusState\\\"\\r\\n          [showClear]=\\\"true\\\"\\r\\n          placeholder=\\\"&nbsp;\\\"\\r\\n          [disabled]=\\\"!isStatusEditable\\\"\\r\\n          appendTo=\\\"body\\\"\\r\\n        ></p-dropdown>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".statusDate\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <p-calendar\\r\\n          showButtonBar=\\\"true\\\"\\r\\n          [monthNavigator]=\\\"true\\\"\\r\\n          [yearNavigator]=\\\"true\\\"\\r\\n          [yearRange]=\\\"sessionService.calendarYearRange\\\"\\r\\n          class=\\\"aw-calendar\\\"\\r\\n          [dateFormat]=\\\"sessionService.dateFormatPrimeNG\\\"\\r\\n          [locale]=\\\"sessionService.calendarFormat\\\"\\r\\n          [(ngModel)]=\\\"item.statusDate\\\"\\r\\n          [disabled]=\\\"true\\\"\\r\\n          [showTime]=\\\"true\\\"\\r\\n          appendTo=\\\"body\\\"\\r\\n        ></p-calendar>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".statusUser\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <input class=\\\"aw-input\\\" type=\\\"text\\\" [(ngModel)]=\\\"item.statusUser\\\" [disabled]=\\\"true\\\" />\\r\\n      </div>\\r\\n    </div>\\r\\n  </a-content>\\r\\n  <a-footer>\\r\\n    <button type=\\\"button\\\" mat-raised-button (click)=\\\"closeDialog()\\\">{{ \\\"global.close\\\" | translate }}</button>\\r\\n  </a-footer>\\r\\n</a-modal>\\r\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { DialogComponent } from '../../../shared/types/dialog-component';\r\nimport { ComponentOpenMode } from '../../enums/component-open-mode.enum';\r\nimport { MessageService } from '../../services/message.service';\r\nimport { PropertiesService } from '../../services/properties.service';\r\nimport { SessionService } from '../../services/session.service';\r\nimport { LabelValue } from '../../types/label-value.interface';\r\n\r\n@Component({\r\n  selector: 'aw-dialog-status',\r\n  templateUrl: './dialog-status.component.html'\r\n})\r\nexport class DialogStatusComponent<T> extends DialogComponent implements OnInit {\r\n  @Input() public item: T;\r\n\r\n  @Input() public itemId: string;\r\n\r\n  @Input('isStatusEditable') public isStatusEditable: boolean;\r\n\r\n  @Input('isObjectTypeOfBireSbDTO') public readonly isObjectTypeOfBireSbDTO: boolean;\r\n\r\n  @Input('isObjectTypeOfBireEvolutionDTO') public readonly isObjectTypeOfBireEvolutionDTO: boolean;\r\n\r\n  @Input('isObjectTypeOfBireMaintenancePlanDTO') public readonly isObjectTypeOfBireMaintenancePlanDTO: boolean;\r\n\r\n  @Input('isSapSession') private readonly isSapSession: boolean;\r\n\r\n  public statusList: LabelValue<string>[];\r\n\r\n  public readonly componentId: string;\r\n\r\n  public constructor(\r\n    public readonly sessionService: SessionService,\r\n    private readonly propertiesService: PropertiesService,\r\n    private readonly messageService: MessageService\r\n  ) {\r\n    super(ComponentOpenMode.Write, 'DialogStatusComponent');\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.loadStatusList();\r\n  }\r\n\r\n  public close(): void {\r\n    this.display = false;\r\n  }\r\n\r\n  private loadStatusList(): void {\r\n    const statusState = 'statusState';\r\n    this.propertiesService\r\n      .getObjectStatusList(\r\n        this.isObjectTypeOfBireSbDTO,\r\n        this.isObjectTypeOfBireEvolutionDTO,\r\n        this.isObjectTypeOfBireMaintenancePlanDTO,\r\n        this.item[statusState],\r\n        this.isSapSession\r\n      )\r\n      .subscribe(\r\n        (result) => {\r\n          this.statusList = result;\r\n        },\r\n        () => {\r\n          this.messageService.showErrorMessage(this.getTranslateKey('errorOnLoadStatusList'));\r\n        }\r\n      );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\n\r\nimport { AngularCommonSharedModule } from '../../angular-common-shared.module';\r\nimport { AngularGenericTemplatesSharedModule } from '../../angular-generic-templates-shared-module';\r\nimport { AppCommonSharedModule } from '../../app-common-shared.module';\r\nimport { ModalModule } from '../modal/modal.module';\r\n\r\nimport { DialogStatusComponent } from './dialog-status.component';\r\n\r\n/******************************************************************************\r\n * Modules\r\n *************************************************************************** */\r\n\r\nconst EXTERNAL_MODULES = [CalendarModule, DropdownModule];\r\n\r\nconst INTERNAL_MODULES = [ModalModule];\r\n\r\n/******************************************************************************\r\n * Components\r\n *************************************************************************** */\r\n\r\nconst COMPONENTS = [DialogStatusComponent];\r\n\r\n@NgModule({\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n  imports: [\r\n    AngularCommonSharedModule,\r\n    AngularGenericTemplatesSharedModule,\r\n    AppCommonSharedModule,\r\n    ...EXTERNAL_MODULES,\r\n    ...INTERNAL_MODULES\r\n  ]\r\n})\r\nexport class DialogStatusModule {}\r\n"],"sourceRoot":""}