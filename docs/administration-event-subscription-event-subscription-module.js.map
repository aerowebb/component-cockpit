{"version":3,"sources":["webpack:///./node_modules/primeng/components/inputtextarea/inputtextarea.js","webpack:///./src/app/main/administration/event-subscription/event-subscription.component.html","webpack:///./src/app/main/administration/event-subscription/event-subscription.component.ts","webpack:///./src/app/main/administration/event-subscription/event-subscription.module.ts","webpack:///./src/app/main/administration/event-subscription/event-subscription.service.ts","webpack:///./src/app/main/administration/event-subscription/event-subscripton-form/contacts-popup/contacts-popup.component.html","webpack:///./src/app/main/administration/event-subscription/event-subscripton-form/contacts-popup/contacts-popup.component.ts","webpack:///./src/app/main/administration/event-subscription/event-subscripton-form/event-subscripton-form.component.html","webpack:///./src/app/main/administration/event-subscription/event-subscripton-form/event-subscripton-form.component.ts","webpack:///./src/app/shared/utils/bido-family-variant-utils.ts"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,cAAc,mBAAO,CAAC,oEAAgB;AACtC,eAAe,mBAAO,CAAC,uEAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,yC;;;;;;;;;;;ACrHA,2IAA2I,4DAA4D,wGAAwG,iCAAiC,wMAAwM,iCAAiC,8IAA8I,6CAA6C,4TAA4T,kCAAkC,wHAAwH,0FAA0F,4fAA4f,+DAA+D,IAAI,+HAA+H,2oBAA2oB,iCAAiC,sVAAsV,+BAA+B,8qB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAj9F;AAEmC;AACF;AACC;AACZ;AACI;AACJ;AACE;AACY;AACpB;AAEG;AAGG;AAiBxE;IAAgD,8CAAgC;IAU9E,mDAAmD;IAEnD,oCACE,eAAgC,EAChC,aAA4B,EAC5B,cAA8B,EAC9B,oBAA0C,EAC1C,UAAsB,EACN,aAA4B,EAC3B,wBAAkD,EAClD,mBAAwC;QAR3D,YAUE,kBAAM,wFAAiB,CAAC,IAAI,EAAE,eAAe,EAAE,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","file":"administration-event-subscription-event-subscription-module.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar common_1 = require(\"@angular/common\");\nvar InputTextarea = /** @class */ (function () {\n    function InputTextarea(el, ngModel) {\n        this.el = el;\n        this.ngModel = ngModel;\n        this.onResize = new core_1.EventEmitter();\n    }\n    InputTextarea.prototype.ngDoCheck = function () {\n        this.updateFilledState();\n        if (this.autoResize) {\n            this.resize();\n        }\n    };\n    //To trigger change detection to manage ui-state-filled for material labels when there is no value binding\n    InputTextarea.prototype.onInput = function (e) {\n        this.updateFilledState();\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.updateFilledState = function () {\n        this.filled = (this.el.nativeElement.value && this.el.nativeElement.value.length) || (this.ngModel && this.ngModel.model);\n    };\n    InputTextarea.prototype.onFocus = function (e) {\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.onBlur = function (e) {\n        if (this.autoResize) {\n            this.resize(e);\n        }\n    };\n    InputTextarea.prototype.resize = function (event) {\n        this.el.nativeElement.style.height = this.el.nativeElement.scrollHeight + 'px';\n        if (parseFloat(this.el.nativeElement.style.height) >= parseFloat(this.el.nativeElement.style.maxHeight)) {\n            this.el.nativeElement.style.overflowY = \"scroll\";\n            this.el.nativeElement.style.height = this.el.nativeElement.style.maxHeight;\n        }\n        else {\n            this.el.nativeElement.style.overflow = \"hidden\";\n        }\n        this.onResize.emit(event || {});\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], InputTextarea.prototype, \"autoResize\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], InputTextarea.prototype, \"onResize\", void 0);\n    __decorate([\n        core_1.HostListener('input', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onInput\", null);\n    __decorate([\n        core_1.HostListener('focus', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onFocus\", null);\n    __decorate([\n        core_1.HostListener('blur', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], InputTextarea.prototype, \"onBlur\", null);\n    InputTextarea = __decorate([\n        core_1.Directive({\n            selector: '[pInputTextarea]',\n            host: {\n                '[class.ui-inputtext]': 'true',\n                '[class.ui-corner-all]': 'true',\n                '[class.ui-inputtextarea-resizable]': 'autoResize',\n                '[class.ui-state-default]': 'true',\n                '[class.ui-widget]': 'true',\n                '[class.ui-state-filled]': 'filled'\n            }\n        }),\n        __param(1, core_1.Optional()),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef, forms_1.NgModel])\n    ], InputTextarea);\n    return InputTextarea;\n}());\nexports.InputTextarea = InputTextarea;\nvar InputTextareaModule = /** @class */ (function () {\n    function InputTextareaModule() {\n    }\n    InputTextareaModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule],\n            exports: [InputTextarea],\n            declarations: [InputTextarea]\n        })\n    ], InputTextareaModule);\n    return InputTextareaModule;\n}());\nexports.InputTextareaModule = InputTextareaModule;\n//# sourceMappingURL=inputtextarea.js.map","module.exports = \"<div class=\\\"page-header\\\">\\r\\n  <div class=\\\"page-info\\\">\\r\\n    <div>\\r\\n      <div class=\\\"page-title\\\">\\r\\n        {{ \\\"transaction.\\\" + componentData.componentId | translate }}\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"page-subtitle\\\">\\r\\n        <div class=\\\"page-subtitle\\\">- {{ \\\"global.search\\\" | translate }}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"page-actions\\\">\\r\\n    <button type=\\\"button\\\" mat-raised-button (click)=\\\"create()\\\" *ngIf=\\\"hasUpdateAccessRight\\\">\\r\\n      {{ \\\"global.create\\\" | translate }}\\r\\n    </button>\\r\\n    <button\\r\\n      id=\\\"actions\\\"\\r\\n      mat-icon-button\\r\\n      class=\\\"mat-elevation-z1\\\"\\r\\n      matTooltip=\\\"{{ 'global.showAllActionTooltip' | translate }}\\\"\\r\\n      matTooltipPosition=\\\"above\\\"\\r\\n      aria-label=\\\"Show all actions\\\"\\r\\n      [matMenuTriggerFor]=\\\"actions\\\"\\r\\n    >\\r\\n      <mat-icon>more_horiz</mat-icon>\\r\\n    </button>\\r\\n\\r\\n    <mat-menu #actions=\\\"matMenu\\\">\\r\\n      <button type=\\\"button\\\" mat-menu-item (click)=\\\"refresh()\\\">\\r\\n        {{ \\\"global.refresh\\\" | translate }}\\r\\n      </button>\\r\\n\\r\\n      <button id=\\\"favorites\\\" mat-menu-item (click)=\\\"updateFavoriteState()\\\">\\r\\n        {{ (isFavoriteEntry ? \\\"page.removeFromFavorites\\\" : \\\"page.addToFavorites\\\") | translate }}\\r\\n      </button>\\r\\n    </mat-menu>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"page-wrapper\\\">\\r\\n  <div class=\\\"page-container\\\">\\r\\n    <div class=\\\"page-content\\\">\\r\\n      <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"grid-cell--12\\\">\\r\\n          <div #resultsContainerAnchor class=\\\"grid-cell grid-cell--container\\\">\\r\\n            <div class=\\\"grid-cell-header\\\">\\r\\n              <div class=\\\"grid-cell-title-container\\\">\\r\\n                <h3 class=\\\"grid-cell-title\\\">\\r\\n                  {{ getComponentName() + \\\".eventSubscriptionList\\\" | translate }} ({{\\r\\n                    evtSubscriptionsTableDataSource ? evtSubscriptionsTableDataSource.dataCount : 0\\r\\n                  }})\\r\\n                </h3>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <!-- Event subscriptions table -->\\r\\n\\r\\n            <div class=\\\"grid-cell-content\\\">\\r\\n              <a-table [dataSource]=\\\"evtSubscriptionsTableDataSource\\\">\\r\\n                <ng-template tableActionsDef>\\r\\n                  <button\\r\\n                    type=\\\"button\\\"\\r\\n                    *ngIf=\\\"evtSubscriptionsTableDataSource.hasDataSelection\\\"\\r\\n                    color=\\\"warn\\\"\\r\\n                    mat-raised-button\\r\\n                    (click)=\\\"deleteSelectedEventSubscription()\\\"\\r\\n                  >\\r\\n                    {{ \\\"global.delete\\\" | translate }}\\r\\n                  </button>\\r\\n\\r\\n                  <button\\r\\n                    type=\\\"button\\\"\\r\\n                    mat-raised-button\\r\\n                    *ngIf=\\\"evtSubscriptionsTableDataSource.hasDataSelection\\\"\\r\\n                    (click)=\\\"viewSelectedEventSubscription()\\\"\\r\\n                  >\\r\\n                    {{ \\\"global.open\\\" | translate }}\\r\\n                  </button>\\r\\n                </ng-template>\\r\\n\\r\\n                <ng-template columnDef=\\\"newEventsOnly\\\" let-rowData=\\\"rowData\\\">\\r\\n                  <i *ngIf=\\\"rowData.newEventsOnly\\\" class=\\\"fa fa-fw fa-check\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                </ng-template>\\r\\n\\r\\n                <ng-template columnDef=\\\"doNotNotifyOnForms\\\" let-rowData=\\\"rowData\\\">\\r\\n                  <i *ngIf=\\\"rowData.doNotNotifyOnForms\\\" class=\\\"fa fa-fw fa-check\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                </ng-template>\\r\\n              </a-table>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { TableDataSource } from '../../../shared/components/table/table-data-source';\r\nimport { ComponentOpenMode } from '../../../shared/enums/component-open-mode.enum';\r\nimport { ConfirmationService } from '../../../shared/services/confirmation.service';\r\nimport { ExportService } from '../../../shared/services/export.service';\r\nimport { FavoriteService } from '../../../shared/services/favorite.service';\r\nimport { LoaderService } from '../../../shared/services/loader.service';\r\nimport { MessageService } from '../../../shared/services/message.service';\r\nimport { SerializationService } from '../../../shared/services/serialization.service';\r\nimport { TabService } from '../../../shared/services/tab.service';\r\nimport { BidoSubscriptionDTO } from '../../../shared/types/api-types/bido-subscription-dto.interface';\r\nimport { PageComponent } from '../../../shared/types/page-component';\r\nimport { PageComponentData } from '../../../shared/types/page-component-data.interface';\r\n\r\nimport { EventSubscriptionService } from './event-subscription.service';\r\n\r\ninterface DTOForEventSubscriptionExcelExport {\r\n  subscriptionName?: string;\r\n  eventType?: string;\r\n  familyVariantCode?: string;\r\n  operatorCode?: string;\r\n  chapter?: string;\r\n  eventPriority?: string;\r\n  newEventsOnly?: boolean;\r\n  doNotNotifyOnForms?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'aw-event-subscription',\r\n  templateUrl: './event-subscription.component.html'\r\n})\r\nexport class EventSubscriptionComponent extends PageComponent<PageComponentData> implements OnInit {\r\n  public filteredRowsNb: number;\r\n  public isReadOnlyForm: boolean;\r\n\r\n  public evtSubscriptionsTableDataSource: TableDataSource<BidoSubscriptionDTO>;\r\n  public currentEventSubscription: BidoSubscriptionDTO | undefined;\r\n  public currentEventSubscriptionIndex: number | undefined;\r\n\r\n  public dataForEventSubscriptionExcelExport: DTOForEventSubscriptionExcelExport[];\r\n\r\n  // private readonly resultsTableExportName: string;\r\n\r\n  public constructor(\r\n    favoriteService: FavoriteService,\r\n    loaderService: LoaderService,\r\n    messageService: MessageService,\r\n    serializationService: SerializationService,\r\n    tabService: TabService,\r\n    public readonly exportService: ExportService,\r\n    private readonly eventSubscriptionService: EventSubscriptionService,\r\n    private readonly confirmationService: ConfirmationService\r\n  ) {\r\n    super(ComponentOpenMode.Read, favoriteService, loaderService, messageService, serializationService, tabService);\r\n\r\n    this.filteredRowsNb = 0;\r\n    this.isReadOnlyForm = false;\r\n\r\n    // this.resultsTableExportName = 'Subscriptions-List';\r\n\r\n    this.currentEventSubscription = undefined;\r\n    this.currentEventSubscriptionIndex = undefined;\r\n\r\n    this.dataForEventSubscriptionExcelExport = [];\r\n\r\n    this.loadEventSubscriptionData();\r\n    this.initEvtSubscriptionsTableDataSource();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    super.ngOnInit();\r\n\r\n    this.displayComponentContext('global.search', true);\r\n  }\r\n\r\n  private initEvtSubscriptionsTableDataSource(): void {\r\n    this.evtSubscriptionsTableDataSource = new TableDataSource({\r\n      allowMultiSelect: true,\r\n      columns: [\r\n        {\r\n          field: 'subscriptionName',\r\n          translateKey: this.getTranslateKey('subscriptionName'),\r\n          width: '20%'\r\n        },\r\n        {\r\n          field: 'eventType',\r\n          translateKey: this.getTranslateKey('eventType'),\r\n          width: '20%'\r\n        },\r\n        {\r\n          field: 'familyVariantCode',\r\n          translateKey: this.getTranslateKey('familyVariantCode'),\r\n          width: '10%'\r\n        },\r\n        {\r\n          field: 'operatorCode',\r\n          translateKey: this.getTranslateKey('operatorCode'),\r\n          width: '10%'\r\n        },\r\n        {\r\n          field: 'chapter',\r\n          translateKey: this.getTranslateKey('chapter'),\r\n          width: '10%'\r\n        },\r\n        {\r\n          field: 'eventPriority',\r\n          translateKey: this.getTranslateKey('eventPriority'),\r\n          width: '10%'\r\n        },\r\n        {\r\n          field: 'newEventsOnly',\r\n          translateKey: this.getTranslateKey('newEventsOnly'),\r\n          width: '10%'\r\n        },\r\n        {\r\n          field: 'doNotNotifyOnForms',\r\n          translateKey: this.getTranslateKey('doNotNotifyOnForms'),\r\n          width: '10%'\r\n        },\r\n      ],\r\n      data: []\r\n    });\r\n  }\r\n\r\n  public getComponentName(): string {\r\n    return 'EventSubscriptionComponent';\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  public onFilter(event: any): void {\r\n    this.filteredRowsNb = event.filteredValue.length;\r\n  }\r\n\r\n  public loadEventSubscriptionData(): void {\r\n    this.eventSubscriptionService.loadEventSubscriptionTableData().subscribe((results) => {\r\n      this.evtSubscriptionsTableDataSource.setData(results.list);\r\n      this.filteredRowsNb = this.evtSubscriptionsTableDataSource.dataSelectionCount;\r\n      this.evtSubscriptionsTableDataSource.update();\r\n    });\r\n  }\r\n\r\n  public refresh(): void {\r\n    this.loadEventSubscriptionData();\r\n    this.evtSubscriptionsTableDataSource.dataSelection = [];\r\n  }\r\n\r\n  private openEventSubscription(object: BidoSubscriptionDTO | undefined, openMode: ComponentOpenMode): void {\r\n    if (!!object) {\r\n      const labelKey = 'transaction.EventSubscriptonFormComponent';\r\n      const data: PageComponentData = {\r\n        id: this.tabService.generateId(),\r\n        componentId: 'EventSubscriptonFormComponent',\r\n        objectId: this.serializationService.serialize(object),\r\n        openMode\r\n      };\r\n      this.tabService.open(this.tabService.create(data, labelKey, true));\r\n    } else {\r\n      const labelKey = 'transaction.EventSubscriptonFormComponent';\r\n      const data: PageComponentData = {\r\n        id: this.tabService.generateId(),\r\n        componentId: 'EventSubscriptonFormComponent',\r\n        objectId: undefined,\r\n        openMode\r\n      };\r\n      this.tabService.open(this.tabService.create(data, labelKey, true));\r\n    }\r\n  }\r\n\r\n  // public exportTable(): void {\r\n  //   this.eventSubscriptionsTable.list.forEach((subscription) => {\r\n  //     const data: DTOForEventSubscriptionExcelExport = {\r\n  //       subscriptionName: subscription.subscriptionName,\r\n  //       eventType: subscription.eventType,\r\n  //       familyVariantCode: subscription.familyVariantCode,\r\n  //       operatorCode: subscription.operatorCode,\r\n  //       chapter: subscription.chapter,\r\n  //       eventPriority: subscription.eventPriority,\r\n  //       newEventsOnly: subscription.newEventsOnly,\r\n  //       doNotNotifyOnForms: subscription.doNotNotifyOnForms\r\n  //     };\r\n  //     this.dataForEventSubscriptionExcelExport.push(data);\r\n  //   });\r\n  //   if (!!this.componentData) {\r\n  //     this.exportService.toExcel(\r\n  //       this.dataForEventSubscriptionExcelExport,\r\n  //       this.resultsTableExportName,\r\n  //       this.componentData.componentId\r\n  //     );\r\n  //   } else {\r\n  //     super.throwUnboundLocalError('exportTable', 'this.componentData');\r\n  //   }\r\n  // }\r\n\r\n  public create(): void {\r\n    this.openEventSubscription(undefined, ComponentOpenMode.Create);\r\n  }\r\n\r\n  public viewSelectedEventSubscription(): void {\r\n    this.evtSubscriptionsTableDataSource.dataSelection.forEach((subscription) => {\r\n      if (subscription) {\r\n        if (subscription.subscriptionName && subscription.subscriptionName.length > 0) {\r\n          this.openEventSubscription(subscription, ComponentOpenMode.Read);\r\n        } else {\r\n          this.messageService.showErrorMessage('errorOnMissingSubscriptionName');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public deleteSelectedEventSubscription(): void {\r\n    const partialMessageKey = 'global.deleteConfirmationMsg';\r\n    this.confirmationService.confirmDelete({\r\n      messageKey: partialMessageKey,\r\n      accept: () => {\r\n        const ids: number[] = [];\r\n        this.evtSubscriptionsTableDataSource.dataSelection.forEach((subscription) => {\r\n          if (!!subscription.subscriptionId) {\r\n            ids.push(subscription.subscriptionId);\r\n          } else {\r\n            super.throwUnboundLocalError('deleteSelectedEventSubscription', 'subscription.subscriptionId');\r\n          }\r\n        });\r\n        this.eventSubscriptionService.deleteSubscriptions(ids).subscribe(\r\n          (result) => {\r\n            this.messageService.showSuccessMessage('global.deleteSuccessMsg');\r\n            this.refresh();\r\n          },\r\n          () => {\r\n            this.messageService.showErrorMessage('global.deleteErrorMsg');\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\nimport { TableModule as PrimeNgTableModule } from 'primeng/table';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\nimport { AngularCommonSharedModule } from '../../../shared/angular-common-shared.module';\r\nimport { AngularGenericTemplatesSharedModule } from '../../../shared/angular-generic-templates-shared-module';\r\nimport { AppCommonSharedModule } from '../../../shared/app-common-shared.module';\r\nimport { ComponentSidebarModule } from '../../../shared/components/component-sidebar/component-sidebar.mdule';\r\nimport { DialogSearchContactModule } from '../../../shared/components/dialog-search-contact/dialog-search-contact.module';\r\nimport { DialogSearchCustomerModule } from '../../../shared/components/dialog-search-customer/dialog-search-customer.module';\r\nimport { ModalModule } from '../../../shared/components/modal/modal.module';\r\nimport { TableModule } from '../../../shared/components/table/table.module';\r\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\r\n\r\nimport { EventSubscriptionComponent } from './event-subscription.component';\r\nimport { EventSubscriptionService } from './event-subscription.service';\r\nimport { ContactsPopupComponent } from './event-subscripton-form/contacts-popup/contacts-popup.component';\r\nimport { EventSubscriptonFormComponent } from './event-subscripton-form/event-subscripton-form.component';\r\n\r\n/******************************************************************************\r\n * Modules\r\n *************************************************************************** */\r\n\r\nconst EXTERNAL_MODULES = [\r\n  CalendarModule,\r\n  CheckboxModule,\r\n  DropdownModule,\r\n  FileUploadModule,\r\n  InputTextareaModule,\r\n  PrimeNgTableModule,\r\n  TooltipModule\r\n];\r\n\r\nconst INTERNAL_MODULES = [\r\n  ComponentSidebarModule,\r\n  DialogSearchContactModule,\r\n  DialogSearchCustomerModule,\r\n  ModalModule,\r\n  TableModule\r\n];\r\n\r\n/******************************************************************************\r\n * Components\r\n *************************************************************************** */\r\n\r\nconst COMPONENTS = [ContactsPopupComponent];\r\n\r\nconst DYNAMIC_COMPONENTS = [EventSubscriptionComponent, EventSubscriptonFormComponent];\r\n\r\n/******************************************************************************\r\n * Services\r\n *************************************************************************** */\r\n\r\nconst SERVICES = [EventSubscriptionService];\r\n\r\n@NgModule({\r\n  declarations: [...COMPONENTS, ...DYNAMIC_COMPONENTS],\r\n  imports: [\r\n    AngularCommonSharedModule,\r\n    AngularGenericTemplatesSharedModule,\r\n    AppCommonSharedModule,\r\n    DynamicComponentLoaderModule.forChild(DYNAMIC_COMPONENTS),\r\n    ...EXTERNAL_MODULES,\r\n    ...INTERNAL_MODULES\r\n  ],\r\n  providers: [...SERVICES]\r\n})\r\nexport class EventSubscriptionModule {}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { FleetManagementApi } from '../../../shared/api/fleet-management.api';\r\nimport { ProductStructureManagementApi } from '../../../shared/api/product-structure-management.api';\r\nimport { AbstractAwHttpService } from '../../../shared/http/abstract-aw-http';\r\nimport { AppConfigService } from '../../../shared/services/app-config.service';\r\nimport { SaveCatalogInput } from '../../../shared/types/api-input-types/catalog/save-catalog-input.interface';\r\nimport { GetSubscriptionDataAndContactListByOutputDTO } from '../../../shared/types/api-output-types/catalog/get-subscription-data-and-contact-list-by-output-dto.interface';\r\nimport { SavedCatalogOutputDTO } from '../../../shared/types/api-output-types/catalog/saved-catalog-output-dto.inerface';\r\nimport { BidoCustomerDTO } from '../../../shared/types/api-types/bido-customer-dto.interface';\r\nimport { BidoSubscriptionDTO } from '../../../shared/types/api-types/bido-subscription-dto.interface';\r\nimport { FamilyVariantDTO } from '../../../shared/types/api-types/family-variant-dto.interface';\r\nimport { SearchResultsDTO } from '../../../shared/types/api-types/search-results-dto.interface';\r\nimport { LabelValue } from '../../../shared/types/label-value.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventSubscriptionService extends AbstractAwHttpService {\r\n  public constructor(\r\n    http: HttpClient,\r\n    appConfigService: AppConfigService,\r\n    private readonly fleetManagementApi: FleetManagementApi,\r\n    private readonly productStructureManagement: ProductStructureManagementApi\r\n  ) {\r\n    super(http, appConfigService);\r\n  }\r\n\r\n  public loadEventSubscriptionTableData(): Observable<SearchResultsDTO<BidoSubscriptionDTO>> {\r\n    return super.post<void, SearchResultsDTO<BidoSubscriptionDTO>>(\r\n      this.fleetManagementApi.findBidoSubscriptionsBySearchCriteria\r\n    );\r\n  }\r\n\r\n  public deleteSubscriptions(ids: number[]) {\r\n    return super.post<number[], void>(this.fleetManagementApi.removeBidoSubscription, ids);\r\n  }\r\n\r\n  /******\r\n   * FORM\r\n   ******/\r\n\r\n  public loadEventTypes(): Observable<LabelValue<string>[]> {\r\n    return super.post<void, LabelValue<string>[]>(\r\n      this.fleetManagementApi.findAllBidoNotificationTypeByTypeCategoryCatalog\r\n    );\r\n  }\r\n\r\n  public loadFamilyVariants(): Observable<FamilyVariantDTO[]> {\r\n    return super.post<void, FamilyVariantDTO[]>(this.productStructureManagement.findAllBireVariantVersions);\r\n  }\r\n\r\n  public loadSubscription(id: number): Observable<GetSubscriptionDataAndContactListByOutputDTO> {\r\n    return super.post<number, GetSubscriptionDataAndContactListByOutputDTO>(\r\n      this.fleetManagementApi.getSubscriptionDataAndContactListBySubscriptionId,\r\n      id\r\n    );\r\n  }\r\n\r\n  public findBidoCustomersBySearchCriteria(criteria: BidoCustomerDTO): Observable<SearchResultsDTO<BidoCustomerDTO>> {\r\n    return super.post<BidoCustomerDTO, SearchResultsDTO<BidoCustomerDTO>>(\r\n      this.fleetManagementApi.findBidoCustomersBySearchCriteria,\r\n      criteria\r\n    );\r\n  }\r\n\r\n  public saveCatalog(input: SaveCatalogInput): Observable<SavedCatalogOutputDTO> {\r\n    return super.post<SaveCatalogInput, SavedCatalogOutputDTO>(this.fleetManagementApi.saveCatalog, input);\r\n  }\r\n}\r\n","module.exports = \"<a-modal class=\\\"aw-modal\\\" [(visible)]=\\\"display\\\">\\r\\n  <a-header>\\r\\n    <div class=\\\"modal-title\\\">{{ getComponentName() + \\\".title\\\" | translate }}</div>\\r\\n  </a-header>\\r\\n\\r\\n  <a-content>\\r\\n    <div class=\\\"form-group required\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".contactName\\\" | translate }}</label>\\r\\n      <div class=\\\"form-control form-control-with-btn\\\">\\r\\n        <input\\r\\n          type=\\\"button\\\"\\r\\n          style=\\\"text-align: left\\\"\\r\\n          class=\\\"aw-input\\\"\\r\\n          [(ngModel)]=\\\"contact.contactName\\\"\\r\\n          (click)=\\\"quickSearchContact()\\\"\\r\\n        />\\r\\n        <i\\r\\n          style=\\\"padding-bottom: 2%\\\"\\r\\n          class=\\\"fa fa-fw fa-search aw-icon btn-search\\\"\\r\\n          aria-hidden=\\\"true\\\"\\r\\n          (click)=\\\"quickSearchContact()\\\"\\r\\n        ></i>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".customer\\\" | translate }}</label>\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <input\\r\\n          type=\\\"text\\\"\\r\\n          style=\\\"width: 47%; border-bottom-color: black\\\"\\r\\n          class=\\\"aw-input\\\"\\r\\n          [(ngModel)]=\\\"contact.customerCode\\\"\\r\\n          disabled\\r\\n        />\\r\\n        &nbsp; &nbsp;\\r\\n        <input\\r\\n          type=\\\"text\\\"\\r\\n          style=\\\"width: 47%; border-bottom-color: black\\\"\\r\\n          class=\\\"aw-input\\\"\\r\\n          [(ngModel)]=\\\"contact.customerName\\\"\\r\\n          disabled\\r\\n        />\\r\\n      </div>\\r\\n    </div>\\r\\n  </a-content>\\r\\n\\r\\n  <a-footer>\\r\\n    <button type=\\\"button\\\" mat-raised-button (click)=\\\"cancel()\\\">{{ \\\"global.cancel\\\" | translate }}</button>\\r\\n    <button type=\\\"button\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"associate()\\\" [disabled]=\\\"!enableAssociateButton()\\\">\\r\\n      {{ \\\"global.validate\\\" | translate }}\\r\\n    </button>\\r\\n  </a-footer>\\r\\n</a-modal>\\r\\n\\r\\n<aw-dialog-search-contact\\r\\n  *ngIf=\\\"showQuickSearchContactPopup\\\"\\r\\n  [(display)]=\\\"showQuickSearchContactPopup\\\"\\r\\n  [contact-name]=\\\"contact.contactName\\\"\\r\\n  (onSelected)=\\\"setSelectedContact($event)\\\"\\r\\n></aw-dialog-search-contact>\\r\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nimport { ComponentOpenMode } from '../../../../../shared/enums/component-open-mode.enum';\r\nimport { MessageService } from '../../../../../shared/services/message.service';\r\nimport { BidoContactDTO } from '../../../../../shared/types/api-types/bido-contact-dto.interface';\r\nimport { DialogComponent } from '../../../../../shared/types/dialog-component';\r\n\r\n@Component({\r\n  selector: 'aw-contacts-popup',\r\n  templateUrl: './contacts-popup.component.html'\r\n})\r\nexport class ContactsPopupComponent extends DialogComponent implements OnInit {\r\n  @Output()\r\n  public displayChange: EventEmitter<boolean>;\r\n\r\n  @Input()\r\n  public contact: BidoContactDTO;\r\n\r\n  @Output()\r\n  public onCreate: EventEmitter<BidoContactDTO>;\r\n\r\n  public readonly componentId: string;\r\n\r\n  public displayValue: boolean;\r\n\r\n  public showQuickSearchContactPopup: boolean;\r\n\r\n  public constructor(private readonly messageService: MessageService) {\r\n    super(ComponentOpenMode.Write, 'ContactsPopupComponent');\r\n\r\n    this.onCreate = new EventEmitter<BidoContactDTO>();\r\n\r\n    this.showQuickSearchContactPopup = false;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    if (!this.contact) {\r\n      this.contact = {};\r\n    }\r\n  }\r\n\r\n  public quickSearchContact(): void {\r\n    this.showQuickSearchContactPopup = true;\r\n  }\r\n\r\n  public associate(): void {\r\n    if (!!this.contact) {\r\n      this.onCreate.emit(this.contact);\r\n      this.display = false;\r\n    } else {\r\n      super.throwUnboundLocalError('associate', 'this.contact');\r\n    }\r\n  }\r\n\r\n  public cancel(): void {\r\n    this.display = false;\r\n  }\r\n\r\n  public enableAssociateButton(): boolean {\r\n    if (!!this.contact && !!this.contact.contactName && this.contact.contactName.trim().length !== 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /*************************************************************************\r\n   * Dialog Search Customer\r\n   *************************************************************************/\r\n\r\n  public setSelectedContact(event: BidoContactDTO): void {\r\n    if (!!this.contact) {\r\n      if (Object.keys(event).length === 0) {\r\n        this.messageService.showWarningMessage('global.warningOnMissingRequiredFields');\r\n      }\r\n      this.contact.contactName = event.contactName;\r\n      this.contact.customerCode = event.customerCode;\r\n      this.contact.customerName = event.customerName;\r\n    } else {\r\n      super.throwUnboundLocalError('setSelectedContact', 'this.contact');\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"page-header\\\">\\r\\n  <div class=\\\"page-info\\\">\\r\\n    <div>\\r\\n      <div class=\\\"page-title\\\">\\r\\n        {{ \\\"transaction.\\\" + componentData.componentId | translate }}\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"page-subtitle\\\">\\r\\n        <div *ngIf=\\\"!isCreateOpenMode && componentData && componentData.objectId\\\" class=\\\"page-subtitle\\\">\\r\\n          - {{ serializationService.deserialize(componentData.objectId)[\\\"subscriptionName\\\"] }}\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"page-actions\\\">\\r\\n    <button *ngIf=\\\"isReadOpenMode && hasUpdateAccessRight\\\" type=\\\"button\\\" mat-raised-button (click)=\\\"editSubscription()\\\">\\r\\n      {{ \\\"global.edit\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      *ngIf=\\\"!isReadOpenMode && !isCreateOpenMode\\\"\\r\\n      type=\\\"button\\\"\\r\\n      color=\\\"warn\\\"\\r\\n      mat-raised-button\\r\\n      (click)=\\\"cancelSubscription()\\\"\\r\\n    >\\r\\n      {{ \\\"global.cancel\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      *ngIf=\\\"!isReadOpenMode\\\"\\r\\n      class=\\\"btn-with-spinner\\\"\\r\\n      color=\\\"primary\\\"\\r\\n      type=\\\"button\\\"\\r\\n      mat-raised-button\\r\\n      (click)=\\\"saveSubscription()\\\"\\r\\n    >\\r\\n      <span class=\\\"lds-hourglass\\\" *ngIf=\\\"showSaveSpinner\\\"></span>\\r\\n      {{ \\\"global.save\\\" | translate }}\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      mat-icon-button\\r\\n      class=\\\"mat-elevation-z1\\\"\\r\\n      matTooltip=\\\"{{ 'global.showAllActionTooltip' | translate }}\\\"\\r\\n      matTooltipPosition=\\\"above\\\"\\r\\n      aria-label=\\\"Show all actions\\\"\\r\\n      [matMenuTriggerFor]=\\\"actions\\\"\\r\\n    >\\r\\n      <mat-icon>more_horiz</mat-icon>\\r\\n    </button>\\r\\n    <mat-menu #actions=\\\"matMenu\\\">\\r\\n      <button mat-menu-item (click)=\\\"reloadSubscription()\\\">{{ \\\"global.refresh\\\" | translate }}</button>\\r\\n      <button mat-menu-item (click)=\\\"updateFavoriteState()\\\">\\r\\n        {{ (isFavoriteEntry ? \\\"page.removeFromFavorites\\\" : \\\"page.addToFavorites\\\") | translate }}\\r\\n      </button>\\r\\n    </mat-menu>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"page-wrapper\\\">\\r\\n  <div class=\\\"page-container search-page-container\\\">\\r\\n    <div class=\\\"page-content\\\">\\r\\n      <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"grid-cell--12\\\">\\r\\n          <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n            <div class=\\\"grid-cell-header\\\">\\r\\n              <div class=\\\"grid-cell-title-container\\\">\\r\\n                <div class=\\\"grid-cell-title\\\">\\r\\n                  <span>{{ \\\"page.mainData\\\" | translate }}</span>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"grid-cell-content\\\">\\r\\n              <div class=\\\"grid-cell--12\\\">\\r\\n                <div class=\\\"grid-row\\\">\\r\\n                  <div class=\\\"form-group required\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".subscriptionName\\\" | translate }} </label>\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"subscription.subscriptionName\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode || !isCreateOpenMode\\\"\\r\\n                        maxlength=\\\"100\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".eventType\\\" | translate }} </label>\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <p-dropdown\\r\\n                        class=\\\"aw-dropdown fixed-width\\\"\\r\\n                        [options]=\\\"eventTypes\\\"\\r\\n                        [(ngModel)]=\\\"subscription.eventType\\\"\\r\\n                        [showClear]=\\\"true\\\"\\r\\n                        placeholder=\\\"&nbsp;\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      ></p-dropdown>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\"\\r\\n                      >{{ componentData.componentId + \\\".familyVariantCode\\\" | translate }}\\r\\n                    </label>\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <p-dropdown\\r\\n                        class=\\\"aw-dropdown fixed-width\\\"\\r\\n                        [options]=\\\"familyVariants\\\"\\r\\n                        [(ngModel)]=\\\"subscription.familyVariantCode\\\"\\r\\n                        [showClear]=\\\"true\\\"\\r\\n                        placeholder=\\\"&nbsp;\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      ></p-dropdown>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"grid-cell--12\\\">\\r\\n                <div class=\\\"grid-row\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".operatorCode\\\" | translate }}</label>\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"submit\\\"\\r\\n                        (click)=\\\"quickSearchBusinessPartner()\\\"\\r\\n                        style=\\\"width: 40%; text-align: left\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"subscription.operatorCode\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      />&nbsp;&nbsp;\\r\\n                      <i\\r\\n                        *ngIf=\\\"!isReadOpenMode\\\"\\r\\n                        class=\\\"fa fa-fw fa-search\\\"\\r\\n                        aria-hidden=\\\"true\\\"\\r\\n                        (click)=\\\"quickSearchBusinessPartner()\\\"\\r\\n                      ></i\\r\\n                      >&nbsp;&nbsp;\\r\\n                      <input\\r\\n                        type=\\\"submit\\\"\\r\\n                        style=\\\"width: 40%; text-align: left\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"operatorName\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                        maxlength=\\\"50\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".eventPriority\\\" | translate }} </label>\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <p-dropdown\\r\\n                        class=\\\"aw-dropdown fixed-width\\\"\\r\\n                        [options]=\\\"eventPriorities\\\"\\r\\n                        [(ngModel)]=\\\"subscription.eventPriority\\\"\\r\\n                        [showClear]=\\\"true\\\"\\r\\n                        placeholder=\\\"&nbsp;\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      ></p-dropdown>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".chapter\\\" | translate }}</label>\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"subscription.chapter\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                        maxlength=\\\"2\\\"\\r\\n                        style=\\\"width:30%\\\"\\r\\n                      />\\r\\n                      &nbsp;&nbsp;\\r\\n                      <input\\r\\n                        type=\\\"text\\\"\\r\\n                        class=\\\"aw-input\\\"\\r\\n                        [(ngModel)]=\\\"subscription.section\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                        maxlength=\\\"2\\\"\\r\\n                        style=\\\"width:30%\\\"\\r\\n                      />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"grid-cell--12\\\">\\r\\n                <div class=\\\"grid-row\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{ componentData.componentId + \\\".newEventsOnly\\\" | translate }}</label>\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <p-checkbox\\r\\n                        class=\\\"aw-checkbox\\\"\\r\\n                        binary=\\\"true\\\"\\r\\n                        [(ngModel)]=\\\"subscription.newEventsOnly\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      ></p-checkbox>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"form-label\\\">{{\\r\\n                      componentData.componentId + \\\".doNotNotifyOnForms\\\" | translate\\r\\n                    }}</label>\\r\\n                    <div class=\\\"form-control\\\">\\r\\n                      <p-checkbox\\r\\n                        class=\\\"aw-checkbox\\\"\\r\\n                        binary=\\\"true\\\"\\r\\n                        [(ngModel)]=\\\"subscription.doNotNotifyOnForms\\\"\\r\\n                        [disabled]=\\\"isReadOpenMode\\\"\\r\\n                      ></p-checkbox>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\"></div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Contacts table -->\\r\\n\\r\\n      <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"grid-cell--12\\\">\\r\\n          <div class=\\\"grid-cell grid-cell--container\\\">\\r\\n            <div class=\\\"grid-cell-header\\\">\\r\\n              <div class=\\\"grid-cell-title-container\\\">\\r\\n                <h3 class=\\\"grid-cell-title\\\">{{ componentData.componentId + \\\".contacts\\\" | translate }}</h3>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"grid-cell-content  grid-cell-content-with-section\\\">\\r\\n              <div class=\\\"section\\\">\\r\\n                <h4 class=\\\"section-title\\\">\\r\\n                  {{ componentData.componentId + \\\".contactsLinkedToSubscription\\\" | translate }}\\r\\n                </h4>\\r\\n\\r\\n                <div class=\\\"section-content\\\">\\r\\n                  <a-table [dataSource]=\\\"contactsTableDataSource\\\">\\r\\n                    <ng-template tableActionsDef>\\r\\n                      <button\\r\\n                        *ngIf=\\\"!isReadOpenMode && !contactsTableDataSource.hasDataSelection\\\"\\r\\n                        type=\\\"button\\\"\\r\\n                        mat-raised-button\\r\\n                        (click)=\\\"addNewContact()\\\"\\r\\n                      >\\r\\n                        {{ \\\"global.add\\\" | translate }}\\r\\n                      </button>\\r\\n\\r\\n                      <button\\r\\n                        *ngIf=\\\"!isReadOpenMode && contactsTableDataSource.hasDataSelection\\\"\\r\\n                        type=\\\"button\\\"\\r\\n                        color=\\\"warn\\\"\\r\\n                        mat-raised-button\\r\\n                        (click)=\\\"deleteContact()\\\"\\r\\n                      >\\r\\n                        {{ \\\"global.delete\\\" | translate }}\\r\\n                      </button>\\r\\n                    </ng-template>\\r\\n\\r\\n                    <ng-template columnDef=\\\"opeCode\\\" let-rowData=\\\"rowData\\\">\\r\\n                      <a (click)=\\\"openOperationForm(rowData)\\\">{{ rowData.opeCode }}</a>\\r\\n                    </ng-template>\\r\\n                  </a-table>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- POPUP ZONE -->\\r\\n<aw-dialog-search-customer\\r\\n  *ngIf=\\\"showQuickSearchBusinessPartnerPopup\\\"\\r\\n  [(display)]=\\\"showQuickSearchBusinessPartnerPopup\\\"\\r\\n  [customer-code]=\\\"subscription.operatorCode\\\"\\r\\n  (onSelected)=\\\"setSelectedBusinessPartner($event)\\\"\\r\\n>\\r\\n</aw-dialog-search-customer>\\r\\n\\r\\n<aw-contacts-popup\\r\\n  *ngIf=\\\"showContactsPopup\\\"\\r\\n  [(display)]=\\\"showContactsPopup\\\"\\r\\n  [contact]=\\\"currentContact\\\"\\r\\n  (onCreate)=\\\"createContact($event)\\\"\\r\\n></aw-contacts-popup>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { TableDataSource } from '../../../../shared/components/table/table-data-source';\r\nimport { ComponentOpenMode } from '../../../../shared/enums/component-open-mode.enum';\r\nimport { ConfirmationService } from '../../../../shared/services/confirmation.service';\r\nimport { FavoriteService } from '../../../../shared/services/favorite.service';\r\nimport { LoaderService } from '../../../../shared/services/loader.service';\r\nimport { MessageService } from '../../../../shared/services/message.service';\r\nimport { PropertiesService } from '../../../../shared/services/properties.service';\r\nimport { SerializationService } from '../../../../shared/services/serialization.service';\r\nimport { TabService } from '../../../../shared/services/tab.service';\r\nimport { SaveCatalogInput } from '../../../../shared/types/api-input-types/catalog/save-catalog-input.interface';\r\nimport { BidoContactDTO } from '../../../../shared/types/api-types/bido-contact-dto.interface';\r\nimport { BidoCustomerDTO } from '../../../../shared/types/api-types/bido-customer-dto.interface';\r\nimport { BidoSubscriptionDTO } from '../../../../shared/types/api-types/bido-subscription-dto.interface';\r\nimport { SearchResultsDTO } from '../../../../shared/types/api-types/search-results-dto.interface';\r\nimport { FormPageComponent } from '../../../../shared/types/form-page-component';\r\nimport { LabelValue } from '../../../../shared/types/label-value.interface';\r\nimport { PageComponentData } from '../../../../shared/types/page-component-data.interface';\r\nimport { BidoFamilyVariantUtils } from '../../../../shared/utils/bido-family-variant-utils';\r\nimport { EventSubscriptionService } from '../event-subscription.service';\r\n\r\n@Component({\r\n  selector: 'aw-event-subscripton-form',\r\n  templateUrl: './event-subscripton-form.component.html'\r\n})\r\nexport class EventSubscriptonFormComponent extends FormPageComponent<PageComponentData> implements OnInit {\r\n  public subscription: BidoSubscriptionDTO;\r\n  public operatorName: string | undefined;\r\n\r\n  public eventTypes: LabelValue<string>[];\r\n  public familyVariants: LabelValue<string>[];\r\n  public eventPriorities: LabelValue<string>[];\r\n\r\n  public tabContactsId: string;\r\n  public currentTabId: string;\r\n\r\n  public contactsTableDataSource: TableDataSource<BidoContactDTO>;\r\n  public currentContact: BidoContactDTO;\r\n  public currentContactIndex: number | undefined;\r\n\r\n  public existingSubscriptions: string[];\r\n\r\n  public showQuickSearchBusinessPartnerPopup: boolean;\r\n\r\n  public showContactsPopup: boolean;\r\n\r\n  public eventSubscriptionsTable: SearchResultsDTO<BidoSubscriptionDTO>;\r\n  public showSaveSpinner: boolean;\r\n\r\n  public constructor(\r\n    favoriteService: FavoriteService,\r\n    loaderService: LoaderService,\r\n    messageService: MessageService,\r\n    serializationService: SerializationService,\r\n    tabService: TabService,\r\n    private readonly eventSubscriptionService: EventSubscriptionService,\r\n    private readonly confirmationService: ConfirmationService,\r\n    private readonly propertiesService: PropertiesService\r\n  ) {\r\n    super(ComponentOpenMode.Read, favoriteService, loaderService, messageService, serializationService, tabService);\r\n\r\n    this.tabContactsId = 'contacts';\r\n    this.initContactsTableDataSource();\r\n    this.init();\r\n  }\r\n\r\n  private initContactsTableDataSource(): void {\r\n    this.contactsTableDataSource = new TableDataSource({\r\n      allowMultiSelect: true,\r\n      columns: [\r\n        { field: 'customerCode', translateKey: this.getTranslateKey('customerCode'), width: '40%' },\r\n        { field: 'customerName', translateKey: this.getTranslateKey('customerName'), width: '30%' },\r\n        { field: 'contactName', translateKey: this.getTranslateKey('contactName'), width: '30%' }\r\n      ],\r\n      data: []\r\n    });\r\n  }\r\n\r\n  public init(): void {\r\n    this.subscription = {};\r\n    this.operatorName = undefined;\r\n\r\n    this.eventTypes = [];\r\n    this.familyVariants = [];\r\n\r\n    this.eventSubscriptionsTable = { list: [], moreResults: false };\r\n\r\n    this.currentTabId = this.tabContactsId;\r\n\r\n    this.contactsTableDataSource.dataSelection = [];\r\n    this.currentContact = {};\r\n    this.currentContactIndex = undefined;\r\n\r\n    this.existingSubscriptions = [];\r\n\r\n    this.loadEventTypes();\r\n    this.loadFamilyVariants();\r\n    this.loadEventPriorities();\r\n\r\n    this.getExistingSubscriptionNames();\r\n\r\n    this.showQuickSearchBusinessPartnerPopup = false;\r\n    this.showContactsPopup = false;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    super.ngOnInit();\r\n\r\n    if (this.componentData) {\r\n      this.updateOpenMode(this.componentData.openMode);\r\n\r\n      const subscriptionContext = this.isCreateOpenMode\r\n        ? 'tab.createMode'\r\n        : !!this.componentData.objectId &&\r\n          this.serializationService.deserialize(this.componentData.objectId).subscriptionName;\r\n\r\n      this.displayComponentContext(subscriptionContext, this.isCreateOpenMode);\r\n\r\n      this.loadSubscription();\r\n    }\r\n  }\r\n\r\n  public loadEventTypes(): void {\r\n    this.eventSubscriptionService.loadEventTypes().subscribe(\r\n      (results) => {\r\n        this.eventTypes = results;\r\n      },\r\n      () => {\r\n        this.messageService.showErrorMessage('errorOnLoadingEventTypes');\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadFamilyVariants(): void {\r\n    this.eventSubscriptionService.loadFamilyVariants().subscribe(\r\n      (results) => {\r\n        results.forEach((result) => {\r\n          const label1 = result.familyname ? result.familyname : result.familyCode;\r\n          const label2 = result.variantName ? result.variantName : result.variantCode;\r\n          const label = `${label1}-${label2}`;\r\n          const value = BidoFamilyVariantUtils.buildFamilyVariantCode(result.familyCode, result.variantCode);\r\n          if (!!label && !!value) {\r\n            const familyVariant: LabelValue<string> = {\r\n              label,\r\n              value\r\n            };\r\n            this.familyVariants.push(familyVariant);\r\n          } else {\r\n            super.throwUnboundLocalError('loadFamilyVariants', 'label && value');\r\n          }\r\n        });\r\n      },\r\n      () => {\r\n        this.messageService.showErrorMessage('errorOnLoadingFamilyVariants');\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadEventPriorities(): void {\r\n    this.propertiesService.getValue('getEventPriorityMap').subscribe(\r\n      (results) => {\r\n        this.eventPriorities = results;\r\n      },\r\n      () => {\r\n        this.messageService.showErrorMessage('errorOnLoadingEventPriorities');\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSubscription(): void {\r\n    if (!!this.componentData && !!this.componentData.objectId) {\r\n      const subscriptionId = this.serializationService.deserialize(this.componentData.objectId).subscriptionId;\r\n      this.eventSubscriptionService.loadSubscription(subscriptionId).subscribe((results) => {\r\n        if (!!results.bidoSubscriptionDTO && !!results.bidoContactDTO) {\r\n          const bidoCustomerDTO: BidoCustomerDTO = {\r\n            customerCode: results.bidoSubscriptionDTO.operatorCode\r\n          };\r\n          this.eventSubscriptionService.findBidoCustomersBySearchCriteria(bidoCustomerDTO).subscribe((result) => {\r\n            if (result) {\r\n              this.operatorName = result.list[0].customerName;\r\n            }\r\n          });\r\n          this.subscription = results.bidoSubscriptionDTO;\r\n          this.subscription.subscriptionId = subscriptionId;\r\n          this.contactsTableDataSource.setData(results.bidoContactDTO);\r\n          this.contactsTableDataSource.update();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public getExistingSubscriptionNames(): void {\r\n    this.eventSubscriptionService.loadEventSubscriptionTableData().subscribe((results) => {\r\n      results.list.forEach((result) => {\r\n        if (!!result.subscriptionName) {\r\n          this.existingSubscriptions.push(result.subscriptionName);\r\n        } else {\r\n          super.throwUnboundLocalError('getExistingSubscriptionName', 'result.subscriptionName');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getComponentName(): string {\r\n    return 'EventSubscriptonFormComponent';\r\n  }\r\n\r\n  public reloadSubscription(): void {\r\n    this.init();\r\n    this.loadSubscription();\r\n  }\r\n\r\n  public editSubscription(): void {\r\n    this.updateOpenMode(ComponentOpenMode.Write);\r\n  }\r\n\r\n  public saveSubscription(): void {\r\n    this.eventSubscriptionService.loadEventSubscriptionTableData().subscribe((subscriptionData) => {\r\n      this.eventSubscriptionsTable = subscriptionData;\r\n\r\n      const input: SaveCatalogInput = {\r\n        bidoSubscriptionList: {\r\n          bidoSubscriptionDTO: this.subscription,\r\n          bidoContactDTO: this.contactsTableDataSource.data\r\n        }\r\n      };\r\n      const create = 0;\r\n      const update = 1;\r\n      if (!this.subscription.subscriptionName || this.subscription.subscriptionName.trim().length === 0) {\r\n        this.messageService.showWarningMessage('global.warningOnMissingRequiredFields');\r\n      } else if (!this.contactsTableDataSource.hasData) {\r\n        this.messageService.showErrorMessage(this.getTranslateKey('addContact'));\r\n      } else {\r\n        if (!!this.componentData && this.componentData.openMode === create) {\r\n          if (this.existingSubscriptions.includes(this.subscription.subscriptionName)) {\r\n            this.messageService.showErrorMessage(this.getTranslateKey('nameAlreadyUsed'));\r\n          } else {\r\n            this.showSaveSpinner = true;\r\n            this.eventSubscriptionService.saveCatalog(input).subscribe(\r\n              (result) => {\r\n                this.messageService.showSuccessMessage('global.successOnSave');\r\n                this.eventSubscriptionService.loadEventSubscriptionTableData().subscribe((results) => {\r\n                  results.list.forEach((re) => {\r\n                    if (\r\n                      !!input.bidoSubscriptionList &&\r\n                      !!input.bidoSubscriptionList.bidoSubscriptionDTO &&\r\n                      re.subscriptionName === input.bidoSubscriptionList.bidoSubscriptionDTO.subscriptionName &&\r\n                      re.subscriptionId\r\n                    ) {\r\n                      this.eventSubscriptionService.loadSubscription(re.subscriptionId).subscribe((res) => {\r\n                        if (\r\n                          !!res.bidoSubscriptionDTO &&\r\n                          !!res.bidoContactDTO &&\r\n                          !!res.bidoSubscriptionDTO.operatorCode\r\n                        ) {\r\n                          const bidoCustomerDTO: BidoCustomerDTO = {\r\n                            customerCode: !!res.bidoSubscriptionDTO && res.bidoSubscriptionDTO.operatorCode\r\n                          };\r\n                          this.eventSubscriptionService\r\n                            .findBidoCustomersBySearchCriteria(bidoCustomerDTO)\r\n                            .subscribe((r) => {\r\n                              if (r) {\r\n                                this.operatorName = r.list[0].customerName;\r\n                              }\r\n                            });\r\n                          this.subscription = res.bidoSubscriptionDTO;\r\n                          this.contactsTableDataSource.setData(res.bidoContactDTO);\r\n                          this.contactsTableDataSource.update();\r\n                        }\r\n                      });\r\n                    }\r\n                  });\r\n                });\r\n                if (!!this.componentData) {\r\n                  this.componentData.objectId = this.serializationService.serialize(this.subscription);\r\n                  if (!!this.subscription.subscriptionName) {\r\n                    this.displayComponentContext(this.subscription.subscriptionName, this.isWriteOpenMode);\r\n                    this.updateOpenMode(ComponentOpenMode.Write);\r\n                    this.componentData.openMode = 1;\r\n                  } else {\r\n                    super.throwUnboundLocalError('saveSubscription', 'this.subscription.subscriptionName');\r\n                  }\r\n                } else {\r\n                  super.throwUnboundLocalError('saveSubscription', 'this.componentData');\r\n                }\r\n                this.showSaveSpinner = false;\r\n              },\r\n              () => {\r\n                this.messageService.showErrorMessage('global.errorOnSave');\r\n                this.showSaveSpinner = false;\r\n              }\r\n            );\r\n          }\r\n        } else if (!!this.componentData && this.componentData.openMode === update) {\r\n          let dataInDB = false;\r\n          this.eventSubscriptionsTable.list.forEach((sub) => {\r\n            if (sub.subscriptionName === this.subscription.subscriptionName) {\r\n              dataInDB = true;\r\n            }\r\n          });\r\n          if (dataInDB) {\r\n            this.showSaveSpinner = true;\r\n            this.eventSubscriptionService.saveCatalog(input).subscribe(\r\n              (result) => {\r\n                this.messageService.showSuccessMessage('global.successOnSave');\r\n                this.eventSubscriptionService.loadEventSubscriptionTableData().subscribe((results) => {\r\n                  results.list.forEach((re) => {\r\n                    if (\r\n                      !!input.bidoSubscriptionList &&\r\n                      !!input.bidoSubscriptionList.bidoSubscriptionDTO &&\r\n                      !!re.subscriptionId &&\r\n                      re.subscriptionName === input.bidoSubscriptionList.bidoSubscriptionDTO.subscriptionName\r\n                    ) {\r\n                      this.eventSubscriptionService.loadSubscription(re.subscriptionId).subscribe((res) => {\r\n                        if (\r\n                          !!res.bidoSubscriptionDTO &&\r\n                          !!res.bidoSubscriptionDTO.operatorCode &&\r\n                          !!res.bidoContactDTO\r\n                        ) {\r\n                          const bidoCustomerDTO: BidoCustomerDTO = {\r\n                            customerCode: res.bidoSubscriptionDTO.operatorCode\r\n                          };\r\n                          this.eventSubscriptionService\r\n                            .findBidoCustomersBySearchCriteria(bidoCustomerDTO)\r\n                            .subscribe((r) => {\r\n                              if (r) {\r\n                                this.operatorName = r.list[0].customerName;\r\n                              }\r\n                            });\r\n                          this.subscription = res.bidoSubscriptionDTO;\r\n                          this.contactsTableDataSource.setData(res.bidoContactDTO);\r\n                          this.contactsTableDataSource.update();\r\n                        }\r\n                      });\r\n                    }\r\n                  });\r\n                });\r\n                this.updateOpenMode(ComponentOpenMode.Write);\r\n                if (!!this.componentData) {\r\n                  this.componentData.objectId = this.serializationService.serialize(this.subscription);\r\n                }\r\n                this.showSaveSpinner = false;\r\n              },\r\n              () => {\r\n                this.messageService.showErrorMessage('global.errorOnSave');\r\n                this.showSaveSpinner = false;\r\n              }\r\n            );\r\n          } else {\r\n            this.messageService.showErrorMessage('global.internalServerError');\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public cancelSubscription(): void {\r\n    this.updateOpenMode(ComponentOpenMode.Read);\r\n    this.reloadSubscription();\r\n  }\r\n\r\n  public quickSearchBusinessPartner(): void {\r\n    this.showQuickSearchBusinessPartnerPopup = true;\r\n  }\r\n\r\n  public openContactsTab(): void {\r\n    this.currentTabId = this.tabContactsId;\r\n  }\r\n\r\n  /*******\r\n   * Popup\r\n   *******/\r\n\r\n  public addNewContact(): void {\r\n    this.showContactsPopup = true;\r\n    this.currentContact = {};\r\n  }\r\n\r\n  public deleteContact(): void {\r\n    this.confirmationService.confirmDelete({\r\n      messageKey: 'global.confirmSelectedDataDelete',\r\n      accept: () => {\r\n        this.contactsTableDataSource.dataSelection.forEach((selectedContact) => {\r\n          this.contactsTableDataSource.setData(\r\n            this.contactsTableDataSource.data.filter((contact) => contact.contactName !== selectedContact.contactName)\r\n          );\r\n          this.contactsTableDataSource.update();\r\n        });\r\n        this.contactsTableDataSource.dataSelection = [];\r\n      }\r\n    });\r\n  }\r\n\r\n  public createContact(event: BidoContactDTO): void {\r\n    const inContactsTable = this.contactsTableDataSource.data.filter(\r\n      (contact) => contact.contactName === event.contactName\r\n    );\r\n    if (inContactsTable.length === 0) {\r\n      this.contactsTableDataSource.addData([event]);\r\n    }\r\n  }\r\n\r\n  /*************************************************************************\r\n   * Dialog Search Customer\r\n   *************************************************************************/\r\n\r\n  public setSelectedBusinessPartner(event: BidoCustomerDTO): void {\r\n    if (Object.keys(event).length === 0) {\r\n      this.messageService.showWarningMessage('global.warningOnMissingRequiredFields');\r\n    }\r\n    this.subscription.operatorCode = event.customerCode;\r\n    this.operatorName = event.customerName;\r\n  }\r\n}\r\n","import { StringUtils } from '../../shared/utils/string-utils';\r\n\r\nexport class BidoFamilyVariantUtils {\r\n  public static buildFamilyVariantCode(\r\n    familyCode: string | undefined,\r\n    variantCode: string | undefined\r\n  ): string | undefined {\r\n    if (StringUtils.isNullOrEmpty(familyCode) || StringUtils.isNullOrEmpty(variantCode)) {\r\n      return undefined;\r\n    } else {\r\n      return `${familyCode}-${variantCode}`;\r\n    }\r\n  }\r\n\r\n  public static getFamilyCodeFromFamilyVariantCode(familyVariantCode: string | undefined): string | undefined {\r\n    return !!familyVariantCode && familyVariantCode.indexOf('-') > -1\r\n      ? familyVariantCode.substring(0, familyVariantCode.indexOf('-'))\r\n      : undefined;\r\n  }\r\n\r\n  public static getVariantCodeFromFamilyVariantCode(familyVariantCode: string | undefined): string | undefined {\r\n    return !!familyVariantCode && familyVariantCode.indexOf('-') > -1\r\n      ? familyVariantCode.substring(familyVariantCode.indexOf('-') + 1)\r\n      : undefined;\r\n  }\r\n}\r\n"],"sourceRoot":""}