{"version":3,"sources":["webpack:///./src/app/shared/components/create-event-form/create-event-form.component.html","webpack:///./src/app/shared/components/create-event-form/create-event-form.component.ts","webpack:///./src/app/shared/components/create-event-form/create-event-form.module.ts","webpack:///./src/app/shared/components/create-event-form/create-event-form.service.ts"],"names":[],"mappings":"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","file":"default~fleet-management-asset-asset-module~maintenance-asset-review-asset-review-module~maintenance~5933c4ff.js","sourcesContent":["module.exports = \"<a-modal class=\\\"aw-modal\\\" [(visible)]=\\\"display\\\">\\r\\n  <a-header>\\r\\n    <div class=\\\"modal-title\\\">{{ getComponentName() + \\\".title\\\" | translate }}</div>\\r\\n  </a-header>\\r\\n\\r\\n  <a-content>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".asset\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <input type=\\\"text\\\" class=\\\"aw-input\\\" [(ngModel)]=\\\"event.equipmentText\\\" [disabled]=\\\"true\\\" />\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group required\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".category\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <p-dropdown\\r\\n          class=\\\"aw-dropdown fixed-width\\\"\\r\\n          [options]=\\\"categories\\\"\\r\\n          [(ngModel)]=\\\"event.notificationCategroy\\\"\\r\\n          [disabled]=\\\"isReadOpenMode || categories.length === 1\\\"\\r\\n          (onChange)=\\\"loadTypeByCategory()\\\"\\r\\n          [showClear]=\\\"true\\\"\\r\\n          placeholder=\\\"&nbsp;\\\"\\r\\n          appendTo=\\\"body\\\"\\r\\n        ></p-dropdown>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group required\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".type\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <p-dropdown\\r\\n          class=\\\"aw-dropdown fixed-width\\\"\\r\\n          [options]=\\\"typeList\\\"\\r\\n          [(ngModel)]=\\\"event.bidoNotificationDTO.typeCode\\\"\\r\\n          [disabled]=\\\"isReadOpenMode\\\"\\r\\n          [showClear]=\\\"true\\\"\\r\\n          placeholder=\\\"&nbsp;\\\"\\r\\n          appendTo=\\\"body\\\"\\r\\n        ></p-dropdown>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group required\\\">\\r\\n      <label class=\\\"form-label\\\">{{ getComponentName() + \\\".eventDate\\\" | translate }}</label>\\r\\n\\r\\n      <div class=\\\"form-control\\\">\\r\\n        <p-calendar\\r\\n          showButtonBar=\\\"true\\\"\\r\\n          [monthNavigator]=\\\"true\\\"\\r\\n          [yearNavigator]=\\\"true\\\"\\r\\n          [yearRange]=\\\"sessionService.calendarYearRange\\\"\\r\\n          class=\\\"aw-calendar\\\"\\r\\n          [dateFormat]=\\\"sessionService.dateFormatPrimeNG\\\"\\r\\n          [locale]=\\\"sessionService.calendarFormat\\\"\\r\\n          [(ngModel)]=\\\"event.bidoNotificationDTO.reportingPeriodStartDate\\\"\\r\\n          appendTo=\\\"body\\\"\\r\\n          [disabled]=\\\"isReadOpenMode\\\"\\r\\n          [maxDate]=\\\"maxDate\\\"\\r\\n          [showTime]=\\\"true\\\"\\r\\n          [hideOnDateTimeSelect]=\\\"true\\\"\\r\\n        ></p-calendar>\\r\\n      </div>\\r\\n    </div>\\r\\n  </a-content>\\r\\n\\r\\n  <a-footer>\\r\\n    <button *ngIf=\\\"isReadOpenMode\\\" type=\\\"button\\\" mat-raised-button (click)=\\\"closeDialog()\\\">\\r\\n      <span>{{ \\\"global.close\\\" | translate }}</span>\\r\\n    </button>\\r\\n\\r\\n    <button *ngIf=\\\"!isReadOpenMode\\\" type=\\\"button\\\" mat-raised-button (click)=\\\"closeDialog()\\\">\\r\\n      <span>{{ \\\"global.cancel\\\" | translate }}</span>\\r\\n    </button>\\r\\n\\r\\n    <button\\r\\n      *ngIf=\\\"!isReadOpenMode\\\"\\r\\n      color=\\\"primary\\\"\\r\\n      [disabled]=\\\"showValidate()\\\"\\r\\n      type=\\\"button\\\"\\r\\n      mat-raised-button\\r\\n      (click)=\\\"validate()\\\"\\r\\n    >\\r\\n      {{ \\\"global.validate\\\" | translate }}\\r\\n    </button>\\r\\n  </a-footer>\\r\\n</a-modal>\\r\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { SelectItem } from 'primeng/api';\r\n\r\nimport { ComponentOpenMode } from '../../enums/component-open-mode.enum';\r\nimport { MessageService } from '../../services/message.service';\r\nimport { PropertiesService } from '../../services/properties.service';\r\nimport { SessionService } from '../../services/session.service';\r\nimport { NotificationTableDto } from '../../types/api-types/notification-table-dto.interface';\r\nimport { DialogComponent } from '../../types/dialog-component';\r\nimport { LabelValue } from '../../types/label-value.interface';\r\n\r\nimport { CreateEventFormService } from './create-event-form.service';\r\n\r\n@Component({\r\n  selector: 'aw-create-event-form',\r\n  templateUrl: './create-event-form.component.html'\r\n})\r\nexport class CreateEventFormComponent extends DialogComponent implements OnInit {\r\n  @Input()\r\n  public event: NotificationTableDto;\r\n  @Input()\r\n  public assetTitle: string;\r\n  @Input()\r\n  public openMode: ComponentOpenMode;\r\n  @Input()\r\n  public set defaultCategory(categoryCode: string) {\r\n    this.event.notificationCategroy = categoryCode;\r\n    this.loadEventCategoryDropdown();\r\n  }\r\n  @Input()\r\n  public types: SelectItem[];\r\n  @Output()\r\n  public onValidated: EventEmitter<NotificationTableDto>;\r\n  public categories: LabelValue<string>[];\r\n  public typeList: LabelValue<string>[];\r\n  public maxDate: Date;\r\n  public isCategoryDisabled: boolean;\r\n\r\n  public constructor(\r\n    private readonly createEventFormService: CreateEventFormService,\r\n    public sessionService: SessionService,\r\n    private readonly propertiesService: PropertiesService,\r\n    private readonly messageService: MessageService\r\n  ) {\r\n    super(ComponentOpenMode.Read, 'CreateEventComponent');\r\n    this.categories = [];\r\n    this.typeList = [];\r\n    this.displayChange = new EventEmitter<boolean>();\r\n    this.onValidated = new EventEmitter<NotificationTableDto>();\r\n    this.loadEventCategoryDropdown();\r\n    this.loadTypeByCategory();\r\n    this.maxDate = new Date();\r\n  }\r\n\r\n  public loadEventCategoryDropdown(): void {\r\n    this.propertiesService.getValue('getEventCategoryMap').subscribe(\r\n      (results) => {\r\n        let categories: LabelValue<string>[] = results || [];\r\n        if (!!this.event && !!this.event.notificationCategroy) {\r\n          categories = results.filter((c) => {\r\n            return c.value === this.event.notificationCategroy;\r\n          });\r\n          this.loadTypeByCategory();\r\n        }\r\n        this.categories = categories;\r\n      },\r\n      () => {\r\n        this.messageService.showErrorMessage(this.getTranslateKey('.errorOnGetCategories'));\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadTypeByCategory(): void {\r\n    if (!!this.event && !!this.event.notificationCategroy) {\r\n      this.createEventFormService.findAllBidoNotificationTypeByTypeCategory(this.event.notificationCategroy).subscribe(\r\n        (results) => {\r\n          this.typeList = results || [];\r\n        },\r\n        () => {\r\n          this.messageService.showErrorMessage(this.getTranslateKey('errorONloadTypeByCategory'));\r\n        }\r\n      );\r\n    } else {\r\n      this.typeList = [];\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.updateOpenMode(this.openMode);\r\n    if (!this.event) {\r\n      this.event = {\r\n        bidoNotificationDTO: {\r\n          bidoNotificationTypeDTO: {}\r\n        }\r\n      };\r\n    }\r\n    this.event.equipmentText = this.assetTitle;\r\n  }\r\n\r\n  public showValidate(): boolean {\r\n    const response =\r\n      !this.event.bidoNotificationDTO.typeCode ||\r\n      !this.event.bidoNotificationDTO.reportingPeriodStartDate ||\r\n      !this.event.notificationCategroy\r\n        ? true\r\n        : false;\r\n\r\n    return response;\r\n  }\r\n\r\n  public validate(): void {\r\n    this.onValidated.emit(this.event);\r\n    this.closeDialog();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\n\r\nimport { AngularCommonSharedModule } from '../../angular-common-shared.module';\r\nimport { AngularGenericTemplatesSharedModule } from '../../angular-generic-templates-shared-module';\r\nimport { AppCommonSharedModule } from '../../app-common-shared.module';\r\nimport { ModalModule } from '../modal/modal.module';\r\n\r\nimport { CreateEventFormComponent } from './create-event-form.component';\r\nimport { CreateEventFormService } from './create-event-form.service';\r\n\r\n/******************************************************************************\r\n * Modules\r\n *************************************************************************** */\r\n\r\nconst EXTERNAL_MODULES = [DropdownModule, CalendarModule];\r\n\r\nconst INTERNAL_MODULES = [ModalModule];\r\n\r\n/******************************************************************************\r\n * Components\r\n *************************************************************************** */\r\n\r\nconst COMPONENTS = [CreateEventFormComponent];\r\n\r\n/******************************************************************************\r\n * Services\r\n *************************************************************************** */\r\n\r\nconst SERVICES = [CreateEventFormService];\r\n\r\n@NgModule({\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n  imports: [\r\n    AngularCommonSharedModule,\r\n    AngularGenericTemplatesSharedModule,\r\n    AppCommonSharedModule,\r\n    ...EXTERNAL_MODULES,\r\n    ...INTERNAL_MODULES\r\n  ],\r\n  providers: [...SERVICES]\r\n})\r\nexport class CreateEventFormModule {}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AssetManagementApi } from '../../api/asset-management.api';\r\nimport { AbstractAwHttpService } from '../../http/abstract-aw-http';\r\nimport { AppConfigService } from '../../services/app-config.service';\r\nimport { LabelValue } from '../../types/label-value.interface';\r\n\r\n@Injectable()\r\nexport class CreateEventFormService extends AbstractAwHttpService {\r\n  public constructor(\r\n    http: HttpClient,\r\n    appConfigService: AppConfigService,\r\n    private readonly assetManagementApi: AssetManagementApi\r\n  ) {\r\n    super(http, appConfigService);\r\n  }\r\n\r\n  public findAllBidoNotificationTypeByTypeCategory(typeCategory: string): Observable<LabelValue<string>[]> {\r\n    return super.post<string, LabelValue<string>[]>(\r\n      this.assetManagementApi.findAllBidoNotificationTypeByTypeCategory,\r\n      typeCategory\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}